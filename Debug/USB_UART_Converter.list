
USB_UART_Converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008778  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008924  08008924  00018924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800897c  0800897c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800897c  0800897c  0001897c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008984  08008984  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008984  08008984  00018984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008988  08008988  00018988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800898c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001db4  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001eb0  20001eb0  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a4d  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039a8  00000000  00000000  00038b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  0003c528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001238  00000000  00000000  0003d8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273ea  00000000  00000000  0003eb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000197fe  00000000  00000000  00065f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de42a  00000000  00000000  0007f708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015db32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051d0  00000000  00000000  0015db84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000fc 	.word	0x200000fc
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800890c 	.word	0x0800890c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000100 	.word	0x20000100
 80001e8:	0800890c 	.word	0x0800890c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_DMA_Init+0x3c>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a0b      	ldr	r2, [pc, #44]	; (800052c <MX_DMA_Init+0x3c>)
 8000500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_DMA_Init+0x3c>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	2010      	movs	r0, #16
 8000518:	f000 fddf 	bl	80010da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800051c:	2010      	movs	r0, #16
 800051e:	f000 fdf8 	bl	8001112 <HAL_NVIC_EnableIRQ>

}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023800 	.word	0x40023800

08000530 <MX_GPIO_Init>:
     PD9   ------> USART3_RX
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08c      	sub	sp, #48	; 0x30
 8000534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 031c 	add.w	r3, r7, #28
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]
 800054a:	4b75      	ldr	r3, [pc, #468]	; (8000720 <MX_GPIO_Init+0x1f0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a74      	ldr	r2, [pc, #464]	; (8000720 <MX_GPIO_Init+0x1f0>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b72      	ldr	r3, [pc, #456]	; (8000720 <MX_GPIO_Init+0x1f0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	61bb      	str	r3, [r7, #24]
 8000560:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	4b6e      	ldr	r3, [pc, #440]	; (8000720 <MX_GPIO_Init+0x1f0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a6d      	ldr	r2, [pc, #436]	; (8000720 <MX_GPIO_Init+0x1f0>)
 800056c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b6b      	ldr	r3, [pc, #428]	; (8000720 <MX_GPIO_Init+0x1f0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	4b67      	ldr	r3, [pc, #412]	; (8000720 <MX_GPIO_Init+0x1f0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a66      	ldr	r2, [pc, #408]	; (8000720 <MX_GPIO_Init+0x1f0>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b64      	ldr	r3, [pc, #400]	; (8000720 <MX_GPIO_Init+0x1f0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b60      	ldr	r3, [pc, #384]	; (8000720 <MX_GPIO_Init+0x1f0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a5f      	ldr	r2, [pc, #380]	; (8000720 <MX_GPIO_Init+0x1f0>)
 80005a4:	f043 0302 	orr.w	r3, r3, #2
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b5d      	ldr	r3, [pc, #372]	; (8000720 <MX_GPIO_Init+0x1f0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0302 	and.w	r3, r3, #2
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4b59      	ldr	r3, [pc, #356]	; (8000720 <MX_GPIO_Init+0x1f0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a58      	ldr	r2, [pc, #352]	; (8000720 <MX_GPIO_Init+0x1f0>)
 80005c0:	f043 0308 	orr.w	r3, r3, #8
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b56      	ldr	r3, [pc, #344]	; (8000720 <MX_GPIO_Init+0x1f0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0308 	and.w	r3, r3, #8
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b52      	ldr	r3, [pc, #328]	; (8000720 <MX_GPIO_Init+0x1f0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a51      	ldr	r2, [pc, #324]	; (8000720 <MX_GPIO_Init+0x1f0>)
 80005dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b4f      	ldr	r3, [pc, #316]	; (8000720 <MX_GPIO_Init+0x1f0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80005f4:	484b      	ldr	r0, [pc, #300]	; (8000724 <MX_GPIO_Init+0x1f4>)
 80005f6:	f001 fa3d 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	484a      	ldr	r0, [pc, #296]	; (8000728 <MX_GPIO_Init+0x1f8>)
 8000600:	f001 fa38 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800060a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	4844      	ldr	r0, [pc, #272]	; (800072c <MX_GPIO_Init+0x1fc>)
 800061c:	f001 f87e 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000620:	2332      	movs	r3, #50	; 0x32
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800062c:	2303      	movs	r3, #3
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000630:	230b      	movs	r3, #11
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	483c      	ldr	r0, [pc, #240]	; (800072c <MX_GPIO_Init+0x1fc>)
 800063c:	f001 f86e 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000640:	2386      	movs	r3, #134	; 0x86
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000650:	230b      	movs	r3, #11
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	4835      	ldr	r0, [pc, #212]	; (8000730 <MX_GPIO_Init+0x200>)
 800065c:	f001 f85e 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000660:	f244 0381 	movw	r3, #16513	; 0x4081
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	482a      	ldr	r0, [pc, #168]	; (8000724 <MX_GPIO_Init+0x1f4>)
 800067a:	f001 f84f 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800067e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000690:	230b      	movs	r3, #11
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	4822      	ldr	r0, [pc, #136]	; (8000724 <MX_GPIO_Init+0x1f4>)
 800069c:	f001 f83e 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80006a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a6:	2302      	movs	r3, #2
 80006a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ae:	2303      	movs	r3, #3
 80006b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006b2:	2307      	movs	r3, #7
 80006b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	4619      	mov	r1, r3
 80006bc:	481d      	ldr	r0, [pc, #116]	; (8000734 <MX_GPIO_Init+0x204>)
 80006be:	f001 f82d 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006c2:	2340      	movs	r3, #64	; 0x40
 80006c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	4813      	ldr	r0, [pc, #76]	; (8000728 <MX_GPIO_Init+0x1f8>)
 80006da:	f001 f81f 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006de:	2380      	movs	r3, #128	; 0x80
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_GPIO_Init+0x1f8>)
 80006f2:	f001 f813 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000704:	2303      	movs	r3, #3
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000708:	230b      	movs	r3, #11
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_GPIO_Init+0x1f8>)
 8000714:	f001 f802 	bl	800171c <HAL_GPIO_Init>

}
 8000718:	bf00      	nop
 800071a:	3730      	adds	r7, #48	; 0x30
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40020400 	.word	0x40020400
 8000728:	40021800 	.word	0x40021800
 800072c:	40020800 	.word	0x40020800
 8000730:	40020000 	.word	0x40020000
 8000734:	40020c00 	.word	0x40020c00

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 fb5c 	bl	8000df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f838 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f7ff fef4 	bl	8000530 <MX_GPIO_Init>
  MX_DMA_Init();
 8000748:	f7ff fed2 	bl	80004f0 <MX_DMA_Init>
  MX_UART4_Init();
 800074c:	f000 fa02 	bl	8000b54 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8000750:	f000 fa2a 	bl	8000ba8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000754:	f007 fb4e 	bl	8007df4 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8000758:	f000 f99e 	bl	8000a98 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  USART2->CR3 |= USART_CR3_DMAR;
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <main+0x68>)
 800075e:	695b      	ldr	r3, [r3, #20]
 8000760:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <main+0x68>)
 8000762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000766:	6153      	str	r3, [r2, #20]

  TIM7->CR1 |= TIM_CR1_CEN;
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <main+0x6c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <main+0x6c>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	6013      	str	r3, [r2, #0]
  TIM7->DIER |= TIM_DIER_UIE;
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <main+0x6c>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <main+0x6c>)
 800077a:	f043 0301 	orr.w	r3, r3, #1
 800077e:	60d3      	str	r3, [r2, #12]

  DMA1_Stream5->M0AR = UART_Rx_data;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <main+0x70>)
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <main+0x74>)
 8000784:	60da      	str	r2, [r3, #12]
  DMA1_Stream5->PAR = &(USART2->DR);
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <main+0x70>)
 8000788:	4a09      	ldr	r2, [pc, #36]	; (80007b0 <main+0x78>)
 800078a:	609a      	str	r2, [r3, #8]
  DMA1_Stream5->NDTR = UART_BUF_SIZE;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <main+0x70>)
 800078e:	2240      	movs	r2, #64	; 0x40
 8000790:	605a      	str	r2, [r3, #4]
  DMA1_Stream5->CR |= DMA_SxCR_HTIE | DMA_SxCR_TCIE | DMA_SxCR_EN;
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <main+0x70>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <main+0x70>)
 8000798:	f043 0319 	orr.w	r3, r3, #25
 800079c:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079e:	e7fe      	b.n	800079e <main+0x66>
 80007a0:	40004400 	.word	0x40004400
 80007a4:	40001400 	.word	0x40001400
 80007a8:	40026088 	.word	0x40026088
 80007ac:	20000118 	.word	0x20000118
 80007b0:	40004404 	.word	0x40004404

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	; 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	; 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f008 f89a 	bl	80088fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <SystemClock_Config+0xcc>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	4a27      	ldr	r2, [pc, #156]	; (8000880 <SystemClock_Config+0xcc>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	; 0x40
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <SystemClock_Config+0xcc>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <SystemClock_Config+0xd0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <SystemClock_Config+0xd0>)
 80007fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <SystemClock_Config+0xd0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000824:	2308      	movs	r3, #8
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000828:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800082c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000832:	2307      	movs	r3, #7
 8000834:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fbb0 	bl	8002fa0 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000846:	f000 f81f 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2302      	movs	r3, #2
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000856:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800085a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2105      	movs	r1, #5
 8000868:	4618      	mov	r0, r3
 800086a:	f002 fe11 	bl	8003490 <HAL_RCC_ClockConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000874:	f000 f808 	bl	8000888 <Error_Handler>
  }
}
 8000878:	bf00      	nop
 800087a:	3750      	adds	r7, #80	; 0x50
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	e7fe      	b.n	8000890 <Error_Handler+0x8>
	...

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <HAL_MspInit+0x4c>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	; 0x44
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <HAL_MspInit+0x4c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <NMI_Handler+0x4>

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 fab4 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	if (DMA1->HISR & DMA_HISR_TCIF5) {
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <DMA1_Stream5_IRQHandler+0x5c>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000944:	2b00      	cmp	r3, #0
 8000946:	d00a      	beq.n	800095e <DMA1_Stream5_IRQHandler+0x26>
		DMA1->HIFCR = DMA_HIFCR_CTCIF5;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <DMA1_Stream5_IRQHandler+0x5c>)
 800094a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800094e:	60da      	str	r2, [r3, #12]
		CDC_Transmit_FS(UART_Rx_data, UART_BUF_SIZE/2);
 8000950:	2120      	movs	r1, #32
 8000952:	4811      	ldr	r0, [pc, #68]	; (8000998 <DMA1_Stream5_IRQHandler+0x60>)
 8000954:	f007 fb36 	bl	8007fc4 <CDC_Transmit_FS>
		dma_interrupt_flag = 2;
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <DMA1_Stream5_IRQHandler+0x64>)
 800095a:	2202      	movs	r2, #2
 800095c:	601a      	str	r2, [r3, #0]
	}
	if (DMA1->HISR & DMA_HISR_HTIF5) {
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <DMA1_Stream5_IRQHandler+0x5c>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000966:	2b00      	cmp	r3, #0
 8000968:	d00b      	beq.n	8000982 <DMA1_Stream5_IRQHandler+0x4a>
		DMA1->HIFCR = DMA_HIFCR_CHTIF5;
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <DMA1_Stream5_IRQHandler+0x5c>)
 800096c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000970:	60da      	str	r2, [r3, #12]
		CDC_Transmit_FS(UART_Rx_data+UART_BUF_SIZE/2, UART_BUF_SIZE/2);
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <DMA1_Stream5_IRQHandler+0x68>)
 8000974:	2120      	movs	r1, #32
 8000976:	4618      	mov	r0, r3
 8000978:	f007 fb24 	bl	8007fc4 <CDC_Transmit_FS>
		dma_interrupt_flag = 1;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <DMA1_Stream5_IRQHandler+0x64>)
 800097e:	2201      	movs	r2, #1
 8000980:	601a      	str	r2, [r3, #0]
	}
	counter = 0;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <DMA1_Stream5_IRQHandler+0x6c>)
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000988:	4807      	ldr	r0, [pc, #28]	; (80009a8 <DMA1_Stream5_IRQHandler+0x70>)
 800098a:	f000 fc8b 	bl	80012a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40026000 	.word	0x40026000
 8000998:	20000118 	.word	0x20000118
 800099c:	20000168 	.word	0x20000168
 80009a0:	20000138 	.word	0x20000138
 80009a4:	20000164 	.word	0x20000164
 80009a8:	20000240 	.word	0x20000240

080009ac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	static int32_t bbuf_pointer;
	uint32_t buf_pointer = UART_BUF_SIZE - DMA1_Stream5->NDTR;
 80009b2:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <TIM7_IRQHandler+0x98>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80009ba:	607b      	str	r3, [r7, #4]
	if (TIM7->SR & TIM_SR_UIF) {
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <TIM7_IRQHandler+0x9c>)
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d036      	beq.n	8000a36 <TIM7_IRQHandler+0x8a>
		TIM7->SR = 0;
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <TIM7_IRQHandler+0x9c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
		if (dma_interrupt_flag) {
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <TIM7_IRQHandler+0xa0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d00d      	beq.n	80009f2 <TIM7_IRQHandler+0x46>
			if (dma_interrupt_flag == 1){
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <TIM7_IRQHandler+0xa0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d103      	bne.n	80009e6 <TIM7_IRQHandler+0x3a>
				bbuf_pointer = UART_BUF_SIZE/2;
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <TIM7_IRQHandler+0xa4>)
 80009e0:	2220      	movs	r2, #32
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	e002      	b.n	80009ec <TIM7_IRQHandler+0x40>
			}
			else bbuf_pointer = 0;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <TIM7_IRQHandler+0xa4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
			dma_interrupt_flag = 0;
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <TIM7_IRQHandler+0xa0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
		}
		counter++;
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <TIM7_IRQHandler+0xa8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	3301      	adds	r3, #1
 80009f8:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <TIM7_IRQHandler+0xa8>)
 80009fa:	6013      	str	r3, [r2, #0]
		if (counter == 150) {
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <TIM7_IRQHandler+0xa8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b96      	cmp	r3, #150	; 0x96
 8000a02:	d118      	bne.n	8000a36 <TIM7_IRQHandler+0x8a>
			counter = 0;
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <TIM7_IRQHandler+0xa8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
			if (bbuf_pointer != buf_pointer) {
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <TIM7_IRQHandler+0xa4>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d010      	beq.n	8000a36 <TIM7_IRQHandler+0x8a>
				CDC_Transmit_FS(UART_Rx_data + bbuf_pointer, buf_pointer - bbuf_pointer);
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <TIM7_IRQHandler+0xa4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <TIM7_IRQHandler+0xac>)
 8000a1c:	441a      	add	r2, r3
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <TIM7_IRQHandler+0xa4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4619      	mov	r1, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	1a5b      	subs	r3, r3, r1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	f007 faca 	bl	8007fc4 <CDC_Transmit_FS>
				bbuf_pointer = buf_pointer;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <TIM7_IRQHandler+0xa4>)
 8000a34:	6013      	str	r3, [r2, #0]
		}
	}


  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000a36:	4809      	ldr	r0, [pc, #36]	; (8000a5c <TIM7_IRQHandler+0xb0>)
 8000a38:	f002 ff99 	bl	800396e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40026088 	.word	0x40026088
 8000a48:	40001400 	.word	0x40001400
 8000a4c:	20000168 	.word	0x20000168
 8000a50:	2000016c 	.word	0x2000016c
 8000a54:	20000164 	.word	0x20000164
 8000a58:	20000118 	.word	0x20000118
 8000a5c:	20000170 	.word	0x20000170

08000a60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <OTG_FS_IRQHandler+0x10>)
 8000a66:	f001 f96e 	bl	8001d46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20001784 	.word	0x20001784

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <SystemInit+0x20>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <SystemInit+0x20>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_TIM7_Init+0x64>)
 8000aa8:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <MX_TIM7_Init+0x68>)
 8000aaa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_TIM7_Init+0x64>)
 8000aae:	2253      	movs	r2, #83	; 0x53
 8000ab0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_TIM7_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_TIM7_Init+0x64>)
 8000aba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000abe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_TIM7_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ac6:	480d      	ldr	r0, [pc, #52]	; (8000afc <MX_TIM7_Init+0x64>)
 8000ac8:	f002 ff02 	bl	80038d0 <HAL_TIM_Base_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000ad2:	f7ff fed9 	bl	8000888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4806      	ldr	r0, [pc, #24]	; (8000afc <MX_TIM7_Init+0x64>)
 8000ae4:	f003 f91e 	bl	8003d24 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000aee:	f7ff fecb 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000170 	.word	0x20000170
 8000b00:	40001400 	.word	0x40001400

08000b04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <HAL_TIM_Base_MspInit+0x48>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d115      	bne.n	8000b42 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_TIM_Base_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <HAL_TIM_Base_MspInit+0x4c>)
 8000b20:	f043 0320 	orr.w	r3, r3, #32
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_TIM_Base_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	2037      	movs	r0, #55	; 0x37
 8000b38:	f000 facf 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b3c:	2037      	movs	r0, #55	; 0x37
 8000b3e:	f000 fae8 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40001400 	.word	0x40001400
 8000b50:	40023800 	.word	0x40023800

08000b54 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_UART4_Init+0x4c>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MX_UART4_Init+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_UART4_Init+0x4c>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_UART4_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_UART4_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_UART4_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_UART4_Init+0x4c>)
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_UART4_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_8;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_UART4_Init+0x4c>)
 8000b86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b8a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_UART4_Init+0x4c>)
 8000b8e:	f003 f959 	bl	8003e44 <HAL_UART_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_UART4_Init+0x48>
  {
    Error_Handler();
 8000b98:	f7ff fe76 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200001b8 	.word	0x200001b8
 8000ba4:	40004c00 	.word	0x40004c00

08000ba8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <MX_USART2_UART_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1500000;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <MX_USART2_UART_Init+0x54>)
 8000bb6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bcc:	220c      	movs	r2, #12
 8000bce:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000be0:	f003 f930 	bl	8003e44 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bea:	f7ff fe4d 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200001fc 	.word	0x200001fc
 8000bf8:	40004400 	.word	0x40004400
 8000bfc:	0016e360 	.word	0x0016e360

08000c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	; 0x30
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a59      	ldr	r2, [pc, #356]	; (8000d84 <HAL_UART_MspInit+0x184>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d14b      	bne.n	8000cba <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
 8000c26:	4b58      	ldr	r3, [pc, #352]	; (8000d88 <HAL_UART_MspInit+0x188>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a57      	ldr	r2, [pc, #348]	; (8000d88 <HAL_UART_MspInit+0x188>)
 8000c2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b55      	ldr	r3, [pc, #340]	; (8000d88 <HAL_UART_MspInit+0x188>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c3a:	61bb      	str	r3, [r7, #24]
 8000c3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	4b51      	ldr	r3, [pc, #324]	; (8000d88 <HAL_UART_MspInit+0x188>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a50      	ldr	r2, [pc, #320]	; (8000d88 <HAL_UART_MspInit+0x188>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b4e      	ldr	r3, [pc, #312]	; (8000d88 <HAL_UART_MspInit+0x188>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b4a      	ldr	r3, [pc, #296]	; (8000d88 <HAL_UART_MspInit+0x188>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a49      	ldr	r2, [pc, #292]	; (8000d88 <HAL_UART_MspInit+0x188>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b47      	ldr	r3, [pc, #284]	; (8000d88 <HAL_UART_MspInit+0x188>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c76:	2301      	movs	r3, #1
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c86:	2308      	movs	r3, #8
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	483e      	ldr	r0, [pc, #248]	; (8000d8c <HAL_UART_MspInit+0x18c>)
 8000c92:	f000 fd43 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4837      	ldr	r0, [pc, #220]	; (8000d90 <HAL_UART_MspInit+0x190>)
 8000cb4:	f000 fd32 	bl	800171c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cb8:	e05f      	b.n	8000d7a <HAL_UART_MspInit+0x17a>
  else if(uartHandle->Instance==USART2)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a35      	ldr	r2, [pc, #212]	; (8000d94 <HAL_UART_MspInit+0x194>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d15a      	bne.n	8000d7a <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <HAL_UART_MspInit+0x188>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	4a2e      	ldr	r2, [pc, #184]	; (8000d88 <HAL_UART_MspInit+0x188>)
 8000cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd4:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <HAL_UART_MspInit+0x188>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <HAL_UART_MspInit+0x188>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a27      	ldr	r2, [pc, #156]	; (8000d88 <HAL_UART_MspInit+0x188>)
 8000cea:	f043 0308 	orr.w	r3, r3, #8
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <HAL_UART_MspInit+0x188>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cfc:	2360      	movs	r3, #96	; 0x60
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4820      	ldr	r0, [pc, #128]	; (8000d98 <HAL_UART_MspInit+0x198>)
 8000d18:	f000 fd00 	bl	800171c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <HAL_UART_MspInit+0x19c>)
 8000d1e:	4a20      	ldr	r2, [pc, #128]	; (8000da0 <HAL_UART_MspInit+0x1a0>)
 8000d20:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <HAL_UART_MspInit+0x19c>)
 8000d24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d28:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <HAL_UART_MspInit+0x19c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <HAL_UART_MspInit+0x19c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d36:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <HAL_UART_MspInit+0x19c>)
 8000d38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_UART_MspInit+0x19c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d44:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_UART_MspInit+0x19c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_UART_MspInit+0x19c>)
 8000d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d50:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_UART_MspInit+0x19c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d58:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <HAL_UART_MspInit+0x19c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d5e:	480f      	ldr	r0, [pc, #60]	; (8000d9c <HAL_UART_MspInit+0x19c>)
 8000d60:	f000 f9f2 	bl	8001148 <HAL_DMA_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8000d6a:	f7ff fd8d 	bl	8000888 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <HAL_UART_MspInit+0x19c>)
 8000d72:	639a      	str	r2, [r3, #56]	; 0x38
 8000d74:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <HAL_UART_MspInit+0x19c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000d7a:	bf00      	nop
 8000d7c:	3730      	adds	r7, #48	; 0x30
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40004c00 	.word	0x40004c00
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40020800 	.word	0x40020800
 8000d94:	40004400 	.word	0x40004400
 8000d98:	40020c00 	.word	0x40020c00
 8000d9c:	20000240 	.word	0x20000240
 8000da0:	40026088 	.word	0x40026088

08000da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ddc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000daa:	490e      	ldr	r1, [pc, #56]	; (8000de4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc0:	4c0b      	ldr	r4, [pc, #44]	; (8000df0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dce:	f7ff fe51 	bl	8000a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f007 fd61 	bl	8008898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd6:	f7ff fcaf 	bl	8000738 <main>
  bx  lr    
 8000dda:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ddc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000de8:	0800898c 	.word	0x0800898c
  ldr r2, =_sbss
 8000dec:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000df0:	20001eb0 	.word	0x20001eb0

08000df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <HAL_Init+0x40>)
 8000e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <HAL_Init+0x40>)
 8000e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_Init+0x40>)
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f94f 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f000 f808 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fd32 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023c00 	.word	0x40023c00

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f967 	bl	800112e <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e78:	f000 f92f 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	200002a0 	.word	0x200002a0

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200002a0 	.word	0x200002a0

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008

08000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4907      	ldr	r1, [pc, #28]	; (8000fc0 <__NVIC_EnableIRQ+0x38>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	; (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010a4:	f7ff ff8e 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff29 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff3e 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff8e 	bl	8001018 <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5d 	bl	8000fc4 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff31 	bl	8000f88 <__NVIC_EnableIRQ>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffa2 	bl	8001080 <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff feb6 	bl	8000ec4 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e099      	b.n	8001298 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2202      	movs	r2, #2
 8001168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0201 	bic.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001184:	e00f      	b.n	80011a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001186:	f7ff fe9d 	bl	8000ec4 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b05      	cmp	r3, #5
 8001192:	d908      	bls.n	80011a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2220      	movs	r2, #32
 8001198:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2203      	movs	r2, #3
 800119e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e078      	b.n	8001298 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1e8      	bne.n	8001186 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <HAL_DMA_Init+0x158>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d107      	bne.n	8001210 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4313      	orrs	r3, r2
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4313      	orrs	r3, r2
 800120e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f023 0307 	bic.w	r3, r3, #7
 8001226:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	4313      	orrs	r3, r2
 8001230:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	2b04      	cmp	r3, #4
 8001238:	d117      	bne.n	800126a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4313      	orrs	r3, r2
 8001242:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00e      	beq.n	800126a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 f9e9 	bl	8001624 <DMA_CheckFifoParam>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2240      	movs	r2, #64	; 0x40
 800125c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001266:	2301      	movs	r3, #1
 8001268:	e016      	b.n	8001298 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 f9a0 	bl	80015b8 <DMA_CalcBaseAndBitshift>
 8001278:	4603      	mov	r3, r0
 800127a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001280:	223f      	movs	r2, #63	; 0x3f
 8001282:	409a      	lsls	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	f010803f 	.word	0xf010803f

080012a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012b0:	4b8e      	ldr	r3, [pc, #568]	; (80014ec <HAL_DMA_IRQHandler+0x248>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a8e      	ldr	r2, [pc, #568]	; (80014f0 <HAL_DMA_IRQHandler+0x24c>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0a9b      	lsrs	r3, r3, #10
 80012bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ce:	2208      	movs	r2, #8
 80012d0:	409a      	lsls	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d01a      	beq.n	8001310 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d013      	beq.n	8001310 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0204 	bic.w	r2, r2, #4
 80012f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fc:	2208      	movs	r2, #8
 80012fe:	409a      	lsls	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001308:	f043 0201 	orr.w	r2, r3, #1
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001314:	2201      	movs	r2, #1
 8001316:	409a      	lsls	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d012      	beq.n	8001346 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00b      	beq.n	8001346 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001332:	2201      	movs	r2, #1
 8001334:	409a      	lsls	r2, r3
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133e:	f043 0202 	orr.w	r2, r3, #2
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134a:	2204      	movs	r2, #4
 800134c:	409a      	lsls	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4013      	ands	r3, r2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d012      	beq.n	800137c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00b      	beq.n	800137c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001368:	2204      	movs	r2, #4
 800136a:	409a      	lsls	r2, r3
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001374:	f043 0204 	orr.w	r2, r3, #4
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001380:	2210      	movs	r2, #16
 8001382:	409a      	lsls	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4013      	ands	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d043      	beq.n	8001414 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d03c      	beq.n	8001414 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139e:	2210      	movs	r2, #16
 80013a0:	409a      	lsls	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d018      	beq.n	80013e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d108      	bne.n	80013d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d024      	beq.n	8001414 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	4798      	blx	r3
 80013d2:	e01f      	b.n	8001414 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d01b      	beq.n	8001414 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	4798      	blx	r3
 80013e4:	e016      	b.n	8001414 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d107      	bne.n	8001404 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0208 	bic.w	r2, r2, #8
 8001402:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001418:	2220      	movs	r2, #32
 800141a:	409a      	lsls	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4013      	ands	r3, r2
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 808f 	beq.w	8001544 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8087 	beq.w	8001544 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143a:	2220      	movs	r2, #32
 800143c:	409a      	lsls	r2, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b05      	cmp	r3, #5
 800144c:	d136      	bne.n	80014bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0216 	bic.w	r2, r2, #22
 800145c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800146c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	2b00      	cmp	r3, #0
 8001474:	d103      	bne.n	800147e <HAL_DMA_IRQHandler+0x1da>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0208 	bic.w	r2, r2, #8
 800148c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001492:	223f      	movs	r2, #63	; 0x3f
 8001494:	409a      	lsls	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d07e      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	4798      	blx	r3
        }
        return;
 80014ba:	e079      	b.n	80015b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d01d      	beq.n	8001506 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d10d      	bne.n	80014f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d031      	beq.n	8001544 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	4798      	blx	r3
 80014e8:	e02c      	b.n	8001544 <HAL_DMA_IRQHandler+0x2a0>
 80014ea:	bf00      	nop
 80014ec:	20000000 	.word	0x20000000
 80014f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d023      	beq.n	8001544 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
 8001504:	e01e      	b.n	8001544 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001510:	2b00      	cmp	r3, #0
 8001512:	d10f      	bne.n	8001534 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0210 	bic.w	r2, r2, #16
 8001522:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001548:	2b00      	cmp	r3, #0
 800154a:	d032      	beq.n	80015b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d022      	beq.n	800159e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2205      	movs	r2, #5
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0201 	bic.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	3301      	adds	r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	429a      	cmp	r2, r3
 800157a:	d307      	bcc.n	800158c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f2      	bne.n	8001570 <HAL_DMA_IRQHandler+0x2cc>
 800158a:	e000      	b.n	800158e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800158c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	4798      	blx	r3
 80015ae:	e000      	b.n	80015b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80015b0:	bf00      	nop
    }
  }
}
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	3b10      	subs	r3, #16
 80015c8:	4a14      	ldr	r2, [pc, #80]	; (800161c <DMA_CalcBaseAndBitshift+0x64>)
 80015ca:	fba2 2303 	umull	r2, r3, r2, r3
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015d2:	4a13      	ldr	r2, [pc, #76]	; (8001620 <DMA_CalcBaseAndBitshift+0x68>)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d909      	bls.n	80015fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015ee:	f023 0303 	bic.w	r3, r3, #3
 80015f2:	1d1a      	adds	r2, r3, #4
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	659a      	str	r2, [r3, #88]	; 0x58
 80015f8:	e007      	b.n	800160a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001602:	f023 0303 	bic.w	r3, r3, #3
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	aaaaaaab 	.word	0xaaaaaaab
 8001620:	08008974 	.word	0x08008974

08001624 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d11f      	bne.n	800167e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d856      	bhi.n	80016f2 <DMA_CheckFifoParam+0xce>
 8001644:	a201      	add	r2, pc, #4	; (adr r2, 800164c <DMA_CheckFifoParam+0x28>)
 8001646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164a:	bf00      	nop
 800164c:	0800165d 	.word	0x0800165d
 8001650:	0800166f 	.word	0x0800166f
 8001654:	0800165d 	.word	0x0800165d
 8001658:	080016f3 	.word	0x080016f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d046      	beq.n	80016f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800166c:	e043      	b.n	80016f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001676:	d140      	bne.n	80016fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800167c:	e03d      	b.n	80016fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001686:	d121      	bne.n	80016cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b03      	cmp	r3, #3
 800168c:	d837      	bhi.n	80016fe <DMA_CheckFifoParam+0xda>
 800168e:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <DMA_CheckFifoParam+0x70>)
 8001690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001694:	080016a5 	.word	0x080016a5
 8001698:	080016ab 	.word	0x080016ab
 800169c:	080016a5 	.word	0x080016a5
 80016a0:	080016bd 	.word	0x080016bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
      break;
 80016a8:	e030      	b.n	800170c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d025      	beq.n	8001702 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016ba:	e022      	b.n	8001702 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016c4:	d11f      	bne.n	8001706 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016ca:	e01c      	b.n	8001706 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d903      	bls.n	80016da <DMA_CheckFifoParam+0xb6>
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d003      	beq.n	80016e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016d8:	e018      	b.n	800170c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	73fb      	strb	r3, [r7, #15]
      break;
 80016de:	e015      	b.n	800170c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00e      	beq.n	800170a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
      break;
 80016f0:	e00b      	b.n	800170a <DMA_CheckFifoParam+0xe6>
      break;
 80016f2:	bf00      	nop
 80016f4:	e00a      	b.n	800170c <DMA_CheckFifoParam+0xe8>
      break;
 80016f6:	bf00      	nop
 80016f8:	e008      	b.n	800170c <DMA_CheckFifoParam+0xe8>
      break;
 80016fa:	bf00      	nop
 80016fc:	e006      	b.n	800170c <DMA_CheckFifoParam+0xe8>
      break;
 80016fe:	bf00      	nop
 8001700:	e004      	b.n	800170c <DMA_CheckFifoParam+0xe8>
      break;
 8001702:	bf00      	nop
 8001704:	e002      	b.n	800170c <DMA_CheckFifoParam+0xe8>
      break;   
 8001706:	bf00      	nop
 8001708:	e000      	b.n	800170c <DMA_CheckFifoParam+0xe8>
      break;
 800170a:	bf00      	nop
    }
  } 
  
  return status; 
 800170c:	7bfb      	ldrb	r3, [r7, #15]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	e177      	b.n	8001a28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001738:	2201      	movs	r2, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	f040 8166 	bne.w	8001a22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b01      	cmp	r3, #1
 8001760:	d005      	beq.n	800176e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176a:	2b02      	cmp	r3, #2
 800176c:	d130      	bne.n	80017d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a4:	2201      	movs	r2, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 0201 	and.w	r2, r3, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d017      	beq.n	800180c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d123      	bne.n	8001860 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	08da      	lsrs	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3208      	adds	r2, #8
 800185a:	69b9      	ldr	r1, [r7, #24]
 800185c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0203 	and.w	r2, r3, #3
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80c0 	beq.w	8001a22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a65      	ldr	r2, [pc, #404]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018be:	4a61      	ldr	r2, [pc, #388]	; (8001a44 <HAL_GPIO_Init+0x328>)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_GPIO_Init+0x32c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d037      	beq.n	800195a <HAL_GPIO_Init+0x23e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a57      	ldr	r2, [pc, #348]	; (8001a4c <HAL_GPIO_Init+0x330>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d031      	beq.n	8001956 <HAL_GPIO_Init+0x23a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a56      	ldr	r2, [pc, #344]	; (8001a50 <HAL_GPIO_Init+0x334>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d02b      	beq.n	8001952 <HAL_GPIO_Init+0x236>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a55      	ldr	r2, [pc, #340]	; (8001a54 <HAL_GPIO_Init+0x338>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d025      	beq.n	800194e <HAL_GPIO_Init+0x232>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a54      	ldr	r2, [pc, #336]	; (8001a58 <HAL_GPIO_Init+0x33c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d01f      	beq.n	800194a <HAL_GPIO_Init+0x22e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a53      	ldr	r2, [pc, #332]	; (8001a5c <HAL_GPIO_Init+0x340>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d019      	beq.n	8001946 <HAL_GPIO_Init+0x22a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a52      	ldr	r2, [pc, #328]	; (8001a60 <HAL_GPIO_Init+0x344>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0x226>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a51      	ldr	r2, [pc, #324]	; (8001a64 <HAL_GPIO_Init+0x348>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00d      	beq.n	800193e <HAL_GPIO_Init+0x222>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a50      	ldr	r2, [pc, #320]	; (8001a68 <HAL_GPIO_Init+0x34c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x21e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4f      	ldr	r2, [pc, #316]	; (8001a6c <HAL_GPIO_Init+0x350>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_GPIO_Init+0x21a>
 8001932:	2309      	movs	r3, #9
 8001934:	e012      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001936:	230a      	movs	r3, #10
 8001938:	e010      	b.n	800195c <HAL_GPIO_Init+0x240>
 800193a:	2308      	movs	r3, #8
 800193c:	e00e      	b.n	800195c <HAL_GPIO_Init+0x240>
 800193e:	2307      	movs	r3, #7
 8001940:	e00c      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001942:	2306      	movs	r3, #6
 8001944:	e00a      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001946:	2305      	movs	r3, #5
 8001948:	e008      	b.n	800195c <HAL_GPIO_Init+0x240>
 800194a:	2304      	movs	r3, #4
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x240>
 800194e:	2303      	movs	r3, #3
 8001950:	e004      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001952:	2302      	movs	r3, #2
 8001954:	e002      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_GPIO_Init+0x240>
 800195a:	2300      	movs	r3, #0
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	f002 0203 	and.w	r2, r2, #3
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4093      	lsls	r3, r2
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800196c:	4935      	ldr	r1, [pc, #212]	; (8001a44 <HAL_GPIO_Init+0x328>)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197a:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_GPIO_Init+0x354>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800199e:	4a34      	ldr	r2, [pc, #208]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a4:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c8:	4a29      	ldr	r2, [pc, #164]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ce:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019f2:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_GPIO_Init+0x354>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	f67f ae84 	bls.w	8001738 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40013800 	.word	0x40013800
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020c00 	.word	0x40020c00
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40021400 	.word	0x40021400
 8001a60:	40021800 	.word	0x40021800
 8001a64:	40021c00 	.word	0x40021c00
 8001a68:	40022000 	.word	0x40022000
 8001a6c:	40022400 	.word	0x40022400
 8001a70:	40013c00 	.word	0x40013c00

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a90:	e003      	b.n	8001a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a92:	887b      	ldrh	r3, [r7, #2]
 8001a94:	041a      	lsls	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	619a      	str	r2, [r3, #24]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aa8:	b08f      	sub	sp, #60	; 0x3c
 8001aaa:	af0a      	add	r7, sp, #40	; 0x28
 8001aac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e10f      	b.n	8001cd8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f006 fbbe 	bl	8008254 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2203      	movs	r2, #3
 8001adc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 fe7b 	bl	80047f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	687e      	ldr	r6, [r7, #4]
 8001b04:	466d      	mov	r5, sp
 8001b06:	f106 0410 	add.w	r4, r6, #16
 8001b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b16:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b1a:	1d33      	adds	r3, r6, #4
 8001b1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b1e:	6838      	ldr	r0, [r7, #0]
 8001b20:	f002 fd52 	bl	80045c8 <USB_CoreInit>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0d0      	b.n	8001cd8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 fe69 	bl	8004814 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	e04a      	b.n	8001bde <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b48:	7bfa      	ldrb	r2, [r7, #15]
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	333d      	adds	r3, #61	; 0x3d
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	333c      	adds	r3, #60	; 0x3c
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	b298      	uxth	r0, r3
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	3344      	adds	r3, #68	; 0x44
 8001b84:	4602      	mov	r2, r0
 8001b86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b88:	7bfa      	ldrb	r2, [r7, #15]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	3340      	adds	r3, #64	; 0x40
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3348      	adds	r3, #72	; 0x48
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	334c      	adds	r3, #76	; 0x4c
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3354      	adds	r3, #84	; 0x54
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d3af      	bcc.n	8001b48 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	e044      	b.n	8001c78 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bee:	7bfa      	ldrb	r2, [r7, #15]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c04:	7bfa      	ldrb	r2, [r7, #15]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c46:	7bfa      	ldrb	r2, [r7, #15]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	3301      	adds	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d3b5      	bcc.n	8001bee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	687e      	ldr	r6, [r7, #4]
 8001c8a:	466d      	mov	r5, sp
 8001c8c:	f106 0410 	add.w	r4, r6, #16
 8001c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ca0:	1d33      	adds	r3, r6, #4
 8001ca2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca4:	6838      	ldr	r0, [r7, #0]
 8001ca6:	f002 fe01 	bl	80048ac <USB_DevInit>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e00d      	b.n	8001cd8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 ff50 	bl	8005b76 <USB_DevDisconnect>

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ce0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_PCD_Start+0x1c>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e020      	b.n	8001d3e <HAL_PCD_Start+0x5e>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d109      	bne.n	8001d20 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d005      	beq.n	8001d20 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f002 fd53 	bl	80047d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 ff00 	bl	8005b34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d46:	b590      	push	{r4, r7, lr}
 8001d48:	b08d      	sub	sp, #52	; 0x34
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 ffbe 	bl	8005cde <USB_GetMode>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f040 848a 	bne.w	800267e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 ff22 	bl	8005bb8 <USB_ReadInterrupts>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8480 	beq.w	800267c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 ff0f 	bl	8005bb8 <USB_ReadInterrupts>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d107      	bne.n	8001db4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f002 0202 	and.w	r2, r2, #2
 8001db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 fefd 	bl	8005bb8 <USB_ReadInterrupts>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b10      	cmp	r3, #16
 8001dc6:	d161      	bne.n	8001e8c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699a      	ldr	r2, [r3, #24]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0210 	bic.w	r2, r2, #16
 8001dd6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	f003 020f 	and.w	r2, r3, #15
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	4413      	add	r3, r2
 8001df4:	3304      	adds	r3, #4
 8001df6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	0c5b      	lsrs	r3, r3, #17
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d124      	bne.n	8001e4e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d035      	beq.n	8001e7c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	6a38      	ldr	r0, [r7, #32]
 8001e24:	f003 fd34 	bl	8005890 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e34:	441a      	add	r2, r3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	6a1a      	ldr	r2, [r3, #32]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e46:	441a      	add	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	621a      	str	r2, [r3, #32]
 8001e4c:	e016      	b.n	8001e7c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	0c5b      	lsrs	r3, r3, #17
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d110      	bne.n	8001e7c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e60:	2208      	movs	r2, #8
 8001e62:	4619      	mov	r1, r3
 8001e64:	6a38      	ldr	r0, [r7, #32]
 8001e66:	f003 fd13 	bl	8005890 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	6a1a      	ldr	r2, [r3, #32]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e76:	441a      	add	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0210 	orr.w	r2, r2, #16
 8001e8a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fe91 	bl	8005bb8 <USB_ReadInterrupts>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ea0:	f040 80a7 	bne.w	8001ff2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f003 fe96 	bl	8005bde <USB_ReadDevAllOutEpInterrupt>
 8001eb2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001eb4:	e099      	b.n	8001fea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 808e 	beq.w	8001fde <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f003 feba 	bl	8005c46 <USB_ReadDevOutEPInterrupt>
 8001ed2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00c      	beq.n	8001ef8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eea:	461a      	mov	r2, r3
 8001eec:	2301      	movs	r3, #1
 8001eee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fec2 	bl	8002c7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00c      	beq.n	8001f1c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	015a      	lsls	r2, r3, #5
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f0e:	461a      	mov	r2, r3
 8001f10:	2308      	movs	r3, #8
 8001f12:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 ff98 	bl	8002e4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d008      	beq.n	8001f38 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f32:	461a      	mov	r2, r3
 8001f34:	2310      	movs	r3, #16
 8001f36:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d030      	beq.n	8001fa4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	2b80      	cmp	r3, #128	; 0x80
 8001f4c:	d109      	bne.n	8001f62 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f60:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	4413      	add	r3, r2
 8001f74:	3304      	adds	r3, #4
 8001f76:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	78db      	ldrb	r3, [r3, #3]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d108      	bne.n	8001f92 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2200      	movs	r2, #0
 8001f84:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f006 fa75 	bl	800847c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d008      	beq.n	8001fc0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2320      	movs	r3, #32
 8001fbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fdc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f47f af62 	bne.w	8001eb6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f003 fdde 	bl	8005bb8 <USB_ReadInterrupts>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002002:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002006:	f040 80db 	bne.w	80021c0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f003 fdff 	bl	8005c12 <USB_ReadDevAllInEpInterrupt>
 8002014:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800201a:	e0cd      	b.n	80021b8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 80c2 	beq.w	80021ac <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f003 fe25 	bl	8005c82 <USB_ReadDevInEPInterrupt>
 8002038:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d057      	beq.n	80020f4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	2201      	movs	r2, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	43db      	mvns	r3, r3
 800205e:	69f9      	ldr	r1, [r7, #28]
 8002060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002064:	4013      	ands	r3, r2
 8002066:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	4413      	add	r3, r2
 8002070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002074:	461a      	mov	r2, r3
 8002076:	2301      	movs	r3, #1
 8002078:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d132      	bne.n	80020e8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	334c      	adds	r3, #76	; 0x4c
 8002092:	6819      	ldr	r1, [r3, #0]
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4403      	add	r3, r0
 80020a2:	3348      	adds	r3, #72	; 0x48
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4419      	add	r1, r3
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4403      	add	r3, r0
 80020b6:	334c      	adds	r3, #76	; 0x4c
 80020b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d113      	bne.n	80020e8 <HAL_PCD_IRQHandler+0x3a2>
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	3354      	adds	r3, #84	; 0x54
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d108      	bne.n	80020e8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020e0:	461a      	mov	r2, r3
 80020e2:	2101      	movs	r1, #1
 80020e4:	f003 fe2c 	bl	8005d40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4619      	mov	r1, r3
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f006 f93f 	bl	8008372 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	4413      	add	r3, r2
 8002106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800210a:	461a      	mov	r2, r3
 800210c:	2308      	movs	r3, #8
 800210e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	4413      	add	r3, r2
 8002122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002126:	461a      	mov	r2, r3
 8002128:	2310      	movs	r3, #16
 800212a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	d008      	beq.n	8002148 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	015a      	lsls	r2, r3, #5
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	4413      	add	r3, r2
 800213e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002142:	461a      	mov	r2, r3
 8002144:	2340      	movs	r3, #64	; 0x40
 8002146:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d023      	beq.n	800219a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002152:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002154:	6a38      	ldr	r0, [r7, #32]
 8002156:	f002 fd0d 	bl	8004b74 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800215a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	3338      	adds	r3, #56	; 0x38
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	3304      	adds	r3, #4
 800216c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	78db      	ldrb	r3, [r3, #3]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d108      	bne.n	8002188 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2200      	movs	r2, #0
 800217a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	b2db      	uxtb	r3, r3
 8002180:	4619      	mov	r1, r3
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f006 f98c 	bl	80084a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	4413      	add	r3, r2
 8002190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002194:	461a      	mov	r2, r3
 8002196:	2302      	movs	r3, #2
 8002198:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80021a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fcdb 	bl	8002b62 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	3301      	adds	r3, #1
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	085b      	lsrs	r3, r3, #1
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f47f af2e 	bne.w	800201c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f003 fcf7 	bl	8005bb8 <USB_ReadInterrupts>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021d4:	d122      	bne.n	800221c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d108      	bne.n	8002206 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021fc:	2100      	movs	r1, #0
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fec2 	bl	8002f88 <HAL_PCDEx_LPM_Callback>
 8002204:	e002      	b.n	800220c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f006 f92a 	bl	8008460 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800221a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f003 fcc9 	bl	8005bb8 <USB_ReadInterrupts>
 8002226:	4603      	mov	r3, r0
 8002228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800222c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002230:	d112      	bne.n	8002258 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d102      	bne.n	8002248 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f006 f8e6 	bl	8008414 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002256:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f003 fcab 	bl	8005bb8 <USB_ReadInterrupts>
 8002262:	4603      	mov	r3, r0
 8002264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800226c:	f040 80b7 	bne.w	80023de <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2110      	movs	r1, #16
 800228a:	4618      	mov	r0, r3
 800228c:	f002 fc72 	bl	8004b74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002294:	e046      	b.n	8002324 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4413      	add	r3, r2
 800229e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a2:	461a      	mov	r2, r3
 80022a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ba:	0151      	lsls	r1, r2, #5
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	440a      	add	r2, r1
 80022c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d6:	461a      	mov	r2, r3
 80022d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	015a      	lsls	r2, r3, #5
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ee:	0151      	lsls	r1, r2, #5
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	440a      	add	r2, r1
 80022f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	4413      	add	r3, r2
 8002306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800230e:	0151      	lsls	r1, r2, #5
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	440a      	add	r2, r1
 8002314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002318:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800231c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002320:	3301      	adds	r3, #1
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800232a:	429a      	cmp	r2, r3
 800232c:	d3b3      	bcc.n	8002296 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800233c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002340:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	2b00      	cmp	r3, #0
 8002348:	d016      	beq.n	8002378 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800235a:	f043 030b 	orr.w	r3, r3, #11
 800235e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002370:	f043 030b 	orr.w	r3, r3, #11
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
 8002376:	e015      	b.n	80023a4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002386:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800238a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800238e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800239e:	f043 030b 	orr.w	r3, r3, #11
 80023a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023c8:	461a      	mov	r2, r3
 80023ca:	f003 fcb9 	bl	8005d40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80023dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f003 fbe8 	bl	8005bb8 <USB_ReadInterrupts>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023f2:	d124      	bne.n	800243e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f003 fc7e 	bl	8005cfa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f002 fc33 	bl	8004c6e <USB_GetDevSpeed>
 8002408:	4603      	mov	r3, r0
 800240a:	461a      	mov	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681c      	ldr	r4, [r3, #0]
 8002414:	f001 fa28 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 8002418:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	4620      	mov	r0, r4
 8002424:	f002 f932 	bl	800468c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f005 ffca 	bl	80083c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800243c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f003 fbb8 	bl	8005bb8 <USB_ReadInterrupts>
 8002448:	4603      	mov	r3, r0
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b08      	cmp	r3, #8
 8002450:	d10a      	bne.n	8002468 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f005 ffa7 	bl	80083a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f002 0208 	and.w	r2, r2, #8
 8002466:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f003 fba3 	bl	8005bb8 <USB_ReadInterrupts>
 8002472:	4603      	mov	r3, r0
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	2b80      	cmp	r3, #128	; 0x80
 800247a:	d122      	bne.n	80024c2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002488:	2301      	movs	r3, #1
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
 800248c:	e014      	b.n	80024b8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d105      	bne.n	80024b2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	4619      	mov	r1, r3
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fb27 	bl	8002b00 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	3301      	adds	r3, #1
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024be:	429a      	cmp	r2, r3
 80024c0:	d3e5      	bcc.n	800248e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 fb76 	bl	8005bb8 <USB_ReadInterrupts>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024d6:	d13b      	bne.n	8002550 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024d8:	2301      	movs	r3, #1
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
 80024dc:	e02b      	b.n	8002536 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	3340      	adds	r3, #64	; 0x40
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d115      	bne.n	8002530 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002504:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002506:	2b00      	cmp	r3, #0
 8002508:	da12      	bge.n	8002530 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	333f      	adds	r3, #63	; 0x3f
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002526:	b2db      	uxtb	r3, r3
 8002528:	4619      	mov	r1, r3
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fae8 	bl	8002b00 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	3301      	adds	r3, #1
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253c:	429a      	cmp	r2, r3
 800253e:	d3ce      	bcc.n	80024de <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800254e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fb2f 	bl	8005bb8 <USB_ReadInterrupts>
 800255a:	4603      	mov	r3, r0
 800255c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002564:	d155      	bne.n	8002612 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002566:	2301      	movs	r3, #1
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
 800256a:	e045      	b.n	80025f8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	4413      	add	r3, r2
 8002574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d12e      	bne.n	80025f2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002594:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002596:	2b00      	cmp	r3, #0
 8002598:	da2b      	bge.n	80025f2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80025a6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d121      	bne.n	80025f2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10a      	bne.n	80025f2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	69fa      	ldr	r2, [r7, #28]
 80025e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ee:	6053      	str	r3, [r2, #4]
            break;
 80025f0:	e007      	b.n	8002602 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	3301      	adds	r3, #1
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fe:	429a      	cmp	r2, r3
 8002600:	d3b4      	bcc.n	800256c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002610:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f003 face 	bl	8005bb8 <USB_ReadInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002626:	d10a      	bne.n	800263e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f005 ff4b 	bl	80084c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800263c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f003 fab8 	bl	8005bb8 <USB_ReadInterrupts>
 8002648:	4603      	mov	r3, r0
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b04      	cmp	r3, #4
 8002650:	d115      	bne.n	800267e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f005 ff3b 	bl	80084e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	e000      	b.n	800267e <HAL_PCD_IRQHandler+0x938>
      return;
 800267c:	bf00      	nop
    }
  }
}
 800267e:	3734      	adds	r7, #52	; 0x34
 8002680:	46bd      	mov	sp, r7
 8002682:	bd90      	pop	{r4, r7, pc}

08002684 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_PCD_SetAddress+0x1a>
 800269a:	2302      	movs	r3, #2
 800269c:	e013      	b.n	80026c6 <HAL_PCD_SetAddress+0x42>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 fa16 	bl	8005ae8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	4608      	mov	r0, r1
 80026d8:	4611      	mov	r1, r2
 80026da:	461a      	mov	r2, r3
 80026dc:	4603      	mov	r3, r0
 80026de:	70fb      	strb	r3, [r7, #3]
 80026e0:	460b      	mov	r3, r1
 80026e2:	803b      	strh	r3, [r7, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	da0f      	bge.n	8002714 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	f003 020f 	and.w	r2, r3, #15
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	3338      	adds	r3, #56	; 0x38
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	4413      	add	r3, r2
 8002708:	3304      	adds	r3, #4
 800270a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	705a      	strb	r2, [r3, #1]
 8002712:	e00f      	b.n	8002734 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	f003 020f 	and.w	r2, r3, #15
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	3304      	adds	r3, #4
 800272c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	b2da      	uxtb	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002740:	883a      	ldrh	r2, [r7, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	78ba      	ldrb	r2, [r7, #2]
 800274a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	785b      	ldrb	r3, [r3, #1]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d004      	beq.n	800275e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800275e:	78bb      	ldrb	r3, [r7, #2]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d102      	bne.n	800276a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_PCD_EP_Open+0xaa>
 8002774:	2302      	movs	r3, #2
 8002776:	e00e      	b.n	8002796 <HAL_PCD_EP_Open+0xc8>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68f9      	ldr	r1, [r7, #12]
 8002786:	4618      	mov	r0, r3
 8002788:	f002 fa96 	bl	8004cb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002794:	7afb      	ldrb	r3, [r7, #11]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	da0f      	bge.n	80027d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	f003 020f 	and.w	r2, r3, #15
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	3338      	adds	r3, #56	; 0x38
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	3304      	adds	r3, #4
 80027c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	705a      	strb	r2, [r3, #1]
 80027d0:	e00f      	b.n	80027f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	f003 020f 	and.w	r2, r3, #15
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	4413      	add	r3, r2
 80027e8:	3304      	adds	r3, #4
 80027ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_PCD_EP_Close+0x6e>
 8002808:	2302      	movs	r3, #2
 800280a:	e00e      	b.n	800282a <HAL_PCD_EP_Close+0x8c>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68f9      	ldr	r1, [r7, #12]
 800281a:	4618      	mov	r0, r3
 800281c:	f002 fad4 	bl	8004dc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	460b      	mov	r3, r1
 8002840:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002842:	7afb      	ldrb	r3, [r7, #11]
 8002844:	f003 020f 	and.w	r2, r3, #15
 8002848:	4613      	mov	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4413      	add	r3, r2
 8002858:	3304      	adds	r3, #4
 800285a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2200      	movs	r2, #0
 800286c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2200      	movs	r2, #0
 8002872:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002874:	7afb      	ldrb	r3, [r7, #11]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	b2da      	uxtb	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d102      	bne.n	800288e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800288e:	7afb      	ldrb	r3, [r7, #11]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	6979      	ldr	r1, [r7, #20]
 80028a6:	f002 fdb3 	bl	8005410 <USB_EP0StartXfer>
 80028aa:	e008      	b.n	80028be <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	6979      	ldr	r1, [r7, #20]
 80028ba:	f002 fb61 	bl	8004f80 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	f003 020f 	and.w	r2, r3, #15
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	460b      	mov	r3, r1
 8002906:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002908:	7afb      	ldrb	r3, [r7, #11]
 800290a:	f003 020f 	and.w	r2, r3, #15
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	3338      	adds	r3, #56	; 0x38
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4413      	add	r3, r2
 800291c:	3304      	adds	r3, #4
 800291e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2200      	movs	r2, #0
 8002930:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2201      	movs	r2, #1
 8002936:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002938:	7afb      	ldrb	r3, [r7, #11]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	b2da      	uxtb	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d102      	bne.n	8002952 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	2b00      	cmp	r3, #0
 800295a:	d109      	bne.n	8002970 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	6979      	ldr	r1, [r7, #20]
 800296a:	f002 fd51 	bl	8005410 <USB_EP0StartXfer>
 800296e:	e008      	b.n	8002982 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	6979      	ldr	r1, [r7, #20]
 800297e:	f002 faff 	bl	8004f80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	f003 020f 	and.w	r2, r3, #15
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d901      	bls.n	80029aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e050      	b.n	8002a4c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	da0f      	bge.n	80029d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	f003 020f 	and.w	r2, r3, #15
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	3338      	adds	r3, #56	; 0x38
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	3304      	adds	r3, #4
 80029c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	705a      	strb	r2, [r3, #1]
 80029d0:	e00d      	b.n	80029ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	3304      	adds	r3, #4
 80029e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_PCD_EP_SetStall+0x82>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e01e      	b.n	8002a4c <HAL_PCD_EP_SetStall+0xc0>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68f9      	ldr	r1, [r7, #12]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f002 ff8f 	bl	8005940 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	b2d9      	uxtb	r1, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f003 f97f 	bl	8005d40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	f003 020f 	and.w	r2, r3, #15
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d901      	bls.n	8002a72 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e042      	b.n	8002af8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	da0f      	bge.n	8002a9a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7a:	78fb      	ldrb	r3, [r7, #3]
 8002a7c:	f003 020f 	and.w	r2, r3, #15
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	3338      	adds	r3, #56	; 0x38
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3304      	adds	r3, #4
 8002a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	705a      	strb	r2, [r3, #1]
 8002a98:	e00f      	b.n	8002aba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	f003 020f 	and.w	r2, r3, #15
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_PCD_EP_ClrStall+0x86>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e00e      	b.n	8002af8 <HAL_PCD_EP_ClrStall+0xa4>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68f9      	ldr	r1, [r7, #12]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f002 ff97 	bl	8005a1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	da0c      	bge.n	8002b2e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	f003 020f 	and.w	r2, r3, #15
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	3338      	adds	r3, #56	; 0x38
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	3304      	adds	r3, #4
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e00c      	b.n	8002b48 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	f003 020f 	and.w	r2, r3, #15
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	4413      	add	r3, r2
 8002b44:	3304      	adds	r3, #4
 8002b46:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68f9      	ldr	r1, [r7, #12]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f002 fdb6 	bl	80056c0 <USB_EPStopXfer>
 8002b54:	4603      	mov	r3, r0
 8002b56:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b58:	7afb      	ldrb	r3, [r7, #11]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b08a      	sub	sp, #40	; 0x28
 8002b66:	af02      	add	r7, sp, #8
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	3338      	adds	r3, #56	; 0x38
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a1a      	ldr	r2, [r3, #32]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d901      	bls.n	8002b9a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e06c      	b.n	8002c74 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d902      	bls.n	8002bb6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3303      	adds	r3, #3
 8002bba:	089b      	lsrs	r3, r3, #2
 8002bbc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bbe:	e02b      	b.n	8002c18 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	699a      	ldr	r2, [r3, #24]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d902      	bls.n	8002bdc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	3303      	adds	r3, #3
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6919      	ldr	r1, [r3, #16]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f002 fe0a 	bl	8005814 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	441a      	add	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a1a      	ldr	r2, [r3, #32]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	441a      	add	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d809      	bhi.n	8002c42 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a1a      	ldr	r2, [r3, #32]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d203      	bcs.n	8002c42 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1be      	bne.n	8002bc0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d811      	bhi.n	8002c72 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	2201      	movs	r2, #1
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	6939      	ldr	r1, [r7, #16]
 8002c6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c6e:	4013      	ands	r3, r2
 8002c70:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	333c      	adds	r3, #60	; 0x3c
 8002c94:	3304      	adds	r3, #4
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d17b      	bne.n	8002daa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d015      	beq.n	8002ce8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	4a61      	ldr	r2, [pc, #388]	; (8002e44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	f240 80b9 	bls.w	8002e38 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80b3 	beq.w	8002e38 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ce4:	6093      	str	r3, [r2, #8]
 8002ce6:	e0a7      	b.n	8002e38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2320      	movs	r3, #32
 8002d02:	6093      	str	r3, [r2, #8]
 8002d04:	e098      	b.n	8002e38 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f040 8093 	bne.w	8002e38 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	4a4b      	ldr	r2, [pc, #300]	; (8002e44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d90f      	bls.n	8002d3a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00a      	beq.n	8002d3a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d30:	461a      	mov	r2, r3
 8002d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d36:	6093      	str	r3, [r2, #8]
 8002d38:	e07e      	b.n	8002e38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	0159      	lsls	r1, r3, #5
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	440b      	add	r3, r1
 8002d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d66:	1ad2      	subs	r2, r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d114      	bne.n	8002d9c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d84:	461a      	mov	r2, r3
 8002d86:	2101      	movs	r1, #1
 8002d88:	f002 ffda 	bl	8005d40 <USB_EP0_OutStart>
 8002d8c:	e006      	b.n	8002d9c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	441a      	add	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	4619      	mov	r1, r3
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f005 faca 	bl	800833c <HAL_PCD_DataOutStageCallback>
 8002da8:	e046      	b.n	8002e38 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d124      	bne.n	8002dfc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dce:	6093      	str	r3, [r2, #8]
 8002dd0:	e032      	b.n	8002e38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de8:	461a      	mov	r2, r3
 8002dea:	2320      	movs	r3, #32
 8002dec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	4619      	mov	r1, r3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f005 faa1 	bl	800833c <HAL_PCD_DataOutStageCallback>
 8002dfa:	e01d      	b.n	8002e38 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d114      	bne.n	8002e2c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d108      	bne.n	8002e2c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e24:	461a      	mov	r2, r3
 8002e26:	2100      	movs	r1, #0
 8002e28:	f002 ff8a 	bl	8005d40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	4619      	mov	r1, r3
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f005 fa82 	bl	800833c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	4f54300a 	.word	0x4f54300a
 8002e48:	4f54310a 	.word	0x4f54310a

08002e4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	333c      	adds	r3, #60	; 0x3c
 8002e64:	3304      	adds	r3, #4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4a15      	ldr	r2, [pc, #84]	; (8002ed4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d90e      	bls.n	8002ea0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d009      	beq.n	8002ea0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e98:	461a      	mov	r2, r3
 8002e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f005 fa39 	bl	8008318 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d90c      	bls.n	8002ec8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d108      	bne.n	8002ec8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	f002 ff3c 	bl	8005d40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	4f54300a 	.word	0x4f54300a

08002ed8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d107      	bne.n	8002f06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ef6:	883b      	ldrh	r3, [r7, #0]
 8002ef8:	0419      	lsls	r1, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	629a      	str	r2, [r3, #40]	; 0x28
 8002f04:	e028      	b.n	8002f58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	0c1b      	lsrs	r3, r3, #16
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	4413      	add	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f14:	2300      	movs	r3, #0
 8002f16:	73fb      	strb	r3, [r7, #15]
 8002f18:	e00d      	b.n	8002f36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	3340      	adds	r3, #64	; 0x40
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	0c1b      	lsrs	r3, r3, #16
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	3301      	adds	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d3ec      	bcc.n	8002f1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f40:	883b      	ldrh	r3, [r7, #0]
 8002f42:	0418      	lsls	r0, r3, #16
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6819      	ldr	r1, [r3, #0]
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	4302      	orrs	r2, r0
 8002f50:	3340      	adds	r3, #64	; 0x40
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	887a      	ldrh	r2, [r7, #2]
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e267      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d075      	beq.n	80030aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fbe:	4b88      	ldr	r3, [pc, #544]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d00c      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fca:	4b85      	ldr	r3, [pc, #532]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d112      	bne.n	8002ffc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fd6:	4b82      	ldr	r3, [pc, #520]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe2:	d10b      	bne.n	8002ffc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe4:	4b7e      	ldr	r3, [pc, #504]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d05b      	beq.n	80030a8 <HAL_RCC_OscConfig+0x108>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d157      	bne.n	80030a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e242      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003004:	d106      	bne.n	8003014 <HAL_RCC_OscConfig+0x74>
 8003006:	4b76      	ldr	r3, [pc, #472]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a75      	ldr	r2, [pc, #468]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e01d      	b.n	8003050 <HAL_RCC_OscConfig+0xb0>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x98>
 800301e:	4b70      	ldr	r3, [pc, #448]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a6f      	ldr	r2, [pc, #444]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 8003024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	4b6d      	ldr	r3, [pc, #436]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a6c      	ldr	r2, [pc, #432]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 8003030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	e00b      	b.n	8003050 <HAL_RCC_OscConfig+0xb0>
 8003038:	4b69      	ldr	r3, [pc, #420]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a68      	ldr	r2, [pc, #416]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 800303e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	4b66      	ldr	r3, [pc, #408]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a65      	ldr	r2, [pc, #404]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 800304a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d013      	beq.n	8003080 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7fd ff34 	bl	8000ec4 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003060:	f7fd ff30 	bl	8000ec4 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e207      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	4b5b      	ldr	r3, [pc, #364]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0xc0>
 800307e:	e014      	b.n	80030aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fd ff20 	bl	8000ec4 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003088:	f7fd ff1c 	bl	8000ec4 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	; 0x64
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e1f3      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309a:	4b51      	ldr	r3, [pc, #324]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0xe8>
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d063      	beq.n	800317e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030b6:	4b4a      	ldr	r3, [pc, #296]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030c2:	4b47      	ldr	r3, [pc, #284]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d11c      	bne.n	8003108 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ce:	4b44      	ldr	r3, [pc, #272]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d116      	bne.n	8003108 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030da:	4b41      	ldr	r3, [pc, #260]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_RCC_OscConfig+0x152>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d001      	beq.n	80030f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e1c7      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f2:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4937      	ldr	r1, [pc, #220]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003106:	e03a      	b.n	800317e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d020      	beq.n	8003152 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003110:	4b34      	ldr	r3, [pc, #208]	; (80031e4 <HAL_RCC_OscConfig+0x244>)
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003116:	f7fd fed5 	bl	8000ec4 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800311e:	f7fd fed1 	bl	8000ec4 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e1a8      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003130:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313c:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4925      	ldr	r1, [pc, #148]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 800314c:	4313      	orrs	r3, r2
 800314e:	600b      	str	r3, [r1, #0]
 8003150:	e015      	b.n	800317e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCC_OscConfig+0x244>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fd feb4 	bl	8000ec4 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003160:	f7fd feb0 	bl	8000ec4 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e187      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003172:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d036      	beq.n	80031f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d016      	beq.n	80031c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_RCC_OscConfig+0x248>)
 8003194:	2201      	movs	r2, #1
 8003196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003198:	f7fd fe94 	bl	8000ec4 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a0:	f7fd fe90 	bl	8000ec4 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e167      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCC_OscConfig+0x240>)
 80031b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0x200>
 80031be:	e01b      	b.n	80031f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_RCC_OscConfig+0x248>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c6:	f7fd fe7d 	bl	8000ec4 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031cc:	e00e      	b.n	80031ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ce:	f7fd fe79 	bl	8000ec4 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d907      	bls.n	80031ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e150      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
 80031e0:	40023800 	.word	0x40023800
 80031e4:	42470000 	.word	0x42470000
 80031e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ec:	4b88      	ldr	r3, [pc, #544]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 80031ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1ea      	bne.n	80031ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8097 	beq.w	8003334 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003206:	2300      	movs	r3, #0
 8003208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800320a:	4b81      	ldr	r3, [pc, #516]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10f      	bne.n	8003236 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	4b7d      	ldr	r3, [pc, #500]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	4a7c      	ldr	r2, [pc, #496]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 8003220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003224:	6413      	str	r3, [r2, #64]	; 0x40
 8003226:	4b7a      	ldr	r3, [pc, #488]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003232:	2301      	movs	r3, #1
 8003234:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003236:	4b77      	ldr	r3, [pc, #476]	; (8003414 <HAL_RCC_OscConfig+0x474>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d118      	bne.n	8003274 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003242:	4b74      	ldr	r3, [pc, #464]	; (8003414 <HAL_RCC_OscConfig+0x474>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a73      	ldr	r2, [pc, #460]	; (8003414 <HAL_RCC_OscConfig+0x474>)
 8003248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324e:	f7fd fe39 	bl	8000ec4 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003256:	f7fd fe35 	bl	8000ec4 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e10c      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003268:	4b6a      	ldr	r3, [pc, #424]	; (8003414 <HAL_RCC_OscConfig+0x474>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d106      	bne.n	800328a <HAL_RCC_OscConfig+0x2ea>
 800327c:	4b64      	ldr	r3, [pc, #400]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	4a63      	ldr	r2, [pc, #396]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	6713      	str	r3, [r2, #112]	; 0x70
 8003288:	e01c      	b.n	80032c4 <HAL_RCC_OscConfig+0x324>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b05      	cmp	r3, #5
 8003290:	d10c      	bne.n	80032ac <HAL_RCC_OscConfig+0x30c>
 8003292:	4b5f      	ldr	r3, [pc, #380]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	4a5e      	ldr	r2, [pc, #376]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 8003298:	f043 0304 	orr.w	r3, r3, #4
 800329c:	6713      	str	r3, [r2, #112]	; 0x70
 800329e:	4b5c      	ldr	r3, [pc, #368]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a5b      	ldr	r2, [pc, #364]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
 80032aa:	e00b      	b.n	80032c4 <HAL_RCC_OscConfig+0x324>
 80032ac:	4b58      	ldr	r3, [pc, #352]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	4a57      	ldr	r2, [pc, #348]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	6713      	str	r3, [r2, #112]	; 0x70
 80032b8:	4b55      	ldr	r3, [pc, #340]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032bc:	4a54      	ldr	r2, [pc, #336]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 80032be:	f023 0304 	bic.w	r3, r3, #4
 80032c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d015      	beq.n	80032f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032cc:	f7fd fdfa 	bl	8000ec4 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d4:	f7fd fdf6 	bl	8000ec4 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e0cb      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ea:	4b49      	ldr	r3, [pc, #292]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0ee      	beq.n	80032d4 <HAL_RCC_OscConfig+0x334>
 80032f6:	e014      	b.n	8003322 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f8:	f7fd fde4 	bl	8000ec4 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003300:	f7fd fde0 	bl	8000ec4 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	; 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e0b5      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003316:	4b3e      	ldr	r3, [pc, #248]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1ee      	bne.n	8003300 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003322:	7dfb      	ldrb	r3, [r7, #23]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d105      	bne.n	8003334 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003328:	4b39      	ldr	r3, [pc, #228]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	4a38      	ldr	r2, [pc, #224]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 800332e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003332:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80a1 	beq.w	8003480 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800333e:	4b34      	ldr	r3, [pc, #208]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b08      	cmp	r3, #8
 8003348:	d05c      	beq.n	8003404 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d141      	bne.n	80033d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003352:	4b31      	ldr	r3, [pc, #196]	; (8003418 <HAL_RCC_OscConfig+0x478>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7fd fdb4 	bl	8000ec4 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003360:	f7fd fdb0 	bl	8000ec4 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e087      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	4b27      	ldr	r3, [pc, #156]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69da      	ldr	r2, [r3, #28]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	019b      	lsls	r3, r3, #6
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	085b      	lsrs	r3, r3, #1
 8003396:	3b01      	subs	r3, #1
 8003398:	041b      	lsls	r3, r3, #16
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	061b      	lsls	r3, r3, #24
 80033a2:	491b      	ldr	r1, [pc, #108]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <HAL_RCC_OscConfig+0x478>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ae:	f7fd fd89 	bl	8000ec4 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b6:	f7fd fd85 	bl	8000ec4 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e05c      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c8:	4b11      	ldr	r3, [pc, #68]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x416>
 80033d4:	e054      	b.n	8003480 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d6:	4b10      	ldr	r3, [pc, #64]	; (8003418 <HAL_RCC_OscConfig+0x478>)
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7fd fd72 	bl	8000ec4 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e4:	f7fd fd6e 	bl	8000ec4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e045      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_RCC_OscConfig+0x470>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x444>
 8003402:	e03d      	b.n	8003480 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d107      	bne.n	800341c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e038      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
 8003410:	40023800 	.word	0x40023800
 8003414:	40007000 	.word	0x40007000
 8003418:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800341c:	4b1b      	ldr	r3, [pc, #108]	; (800348c <HAL_RCC_OscConfig+0x4ec>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d028      	beq.n	800347c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003434:	429a      	cmp	r2, r3
 8003436:	d121      	bne.n	800347c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003442:	429a      	cmp	r2, r3
 8003444:	d11a      	bne.n	800347c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800344c:	4013      	ands	r3, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003452:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003454:	4293      	cmp	r3, r2
 8003456:	d111      	bne.n	800347c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	3b01      	subs	r3, #1
 8003466:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d107      	bne.n	800347c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003478:	429a      	cmp	r2, r3
 800347a:	d001      	beq.n	8003480 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800

08003490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0cc      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a4:	4b68      	ldr	r3, [pc, #416]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d90c      	bls.n	80034cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b65      	ldr	r3, [pc, #404]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ba:	4b63      	ldr	r3, [pc, #396]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0b8      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d020      	beq.n	800351a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e4:	4b59      	ldr	r3, [pc, #356]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4a58      	ldr	r2, [pc, #352]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034fc:	4b53      	ldr	r3, [pc, #332]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4a52      	ldr	r2, [pc, #328]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003508:	4b50      	ldr	r3, [pc, #320]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	494d      	ldr	r1, [pc, #308]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d044      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d107      	bne.n	800353e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	4b47      	ldr	r3, [pc, #284]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d119      	bne.n	800356e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e07f      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d003      	beq.n	800354e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354a:	2b03      	cmp	r3, #3
 800354c:	d107      	bne.n	800355e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354e:	4b3f      	ldr	r3, [pc, #252]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e06f      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355e:	4b3b      	ldr	r3, [pc, #236]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e067      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800356e:	4b37      	ldr	r3, [pc, #220]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f023 0203 	bic.w	r2, r3, #3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4934      	ldr	r1, [pc, #208]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	4313      	orrs	r3, r2
 800357e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003580:	f7fd fca0 	bl	8000ec4 <HAL_GetTick>
 8003584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003586:	e00a      	b.n	800359e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003588:	f7fd fc9c 	bl	8000ec4 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f241 3288 	movw	r2, #5000	; 0x1388
 8003596:	4293      	cmp	r3, r2
 8003598:	d901      	bls.n	800359e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e04f      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359e:	4b2b      	ldr	r3, [pc, #172]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 020c 	and.w	r2, r3, #12
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d1eb      	bne.n	8003588 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035b0:	4b25      	ldr	r3, [pc, #148]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d20c      	bcs.n	80035d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035be:	4b22      	ldr	r3, [pc, #136]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e032      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e4:	4b19      	ldr	r3, [pc, #100]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4916      	ldr	r1, [pc, #88]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	490e      	ldr	r1, [pc, #56]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003616:	f000 f821 	bl	800365c <HAL_RCC_GetSysClockFreq>
 800361a:	4602      	mov	r2, r0
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	490a      	ldr	r1, [pc, #40]	; (8003650 <HAL_RCC_ClockConfig+0x1c0>)
 8003628:	5ccb      	ldrb	r3, [r1, r3]
 800362a:	fa22 f303 	lsr.w	r3, r2, r3
 800362e:	4a09      	ldr	r2, [pc, #36]	; (8003654 <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <HAL_RCC_ClockConfig+0x1c8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd fc00 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40023c00 	.word	0x40023c00
 800364c:	40023800 	.word	0x40023800
 8003650:	0800895c 	.word	0x0800895c
 8003654:	20000000 	.word	0x20000000
 8003658:	20000004 	.word	0x20000004

0800365c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800365c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003660:	b094      	sub	sp, #80	; 0x50
 8003662:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	647b      	str	r3, [r7, #68]	; 0x44
 8003668:	2300      	movs	r3, #0
 800366a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800366c:	2300      	movs	r3, #0
 800366e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003674:	4b79      	ldr	r3, [pc, #484]	; (800385c <HAL_RCC_GetSysClockFreq+0x200>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 030c 	and.w	r3, r3, #12
 800367c:	2b08      	cmp	r3, #8
 800367e:	d00d      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x40>
 8003680:	2b08      	cmp	r3, #8
 8003682:	f200 80e1 	bhi.w	8003848 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_RCC_GetSysClockFreq+0x34>
 800368a:	2b04      	cmp	r3, #4
 800368c:	d003      	beq.n	8003696 <HAL_RCC_GetSysClockFreq+0x3a>
 800368e:	e0db      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003690:	4b73      	ldr	r3, [pc, #460]	; (8003860 <HAL_RCC_GetSysClockFreq+0x204>)
 8003692:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003694:	e0db      	b.n	800384e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003696:	4b73      	ldr	r3, [pc, #460]	; (8003864 <HAL_RCC_GetSysClockFreq+0x208>)
 8003698:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800369a:	e0d8      	b.n	800384e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800369c:	4b6f      	ldr	r3, [pc, #444]	; (800385c <HAL_RCC_GetSysClockFreq+0x200>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036a6:	4b6d      	ldr	r3, [pc, #436]	; (800385c <HAL_RCC_GetSysClockFreq+0x200>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d063      	beq.n	800377a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b2:	4b6a      	ldr	r3, [pc, #424]	; (800385c <HAL_RCC_GetSysClockFreq+0x200>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	099b      	lsrs	r3, r3, #6
 80036b8:	2200      	movs	r2, #0
 80036ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80036bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c4:	633b      	str	r3, [r7, #48]	; 0x30
 80036c6:	2300      	movs	r3, #0
 80036c8:	637b      	str	r3, [r7, #52]	; 0x34
 80036ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036ce:	4622      	mov	r2, r4
 80036d0:	462b      	mov	r3, r5
 80036d2:	f04f 0000 	mov.w	r0, #0
 80036d6:	f04f 0100 	mov.w	r1, #0
 80036da:	0159      	lsls	r1, r3, #5
 80036dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036e0:	0150      	lsls	r0, r2, #5
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4621      	mov	r1, r4
 80036e8:	1a51      	subs	r1, r2, r1
 80036ea:	6139      	str	r1, [r7, #16]
 80036ec:	4629      	mov	r1, r5
 80036ee:	eb63 0301 	sbc.w	r3, r3, r1
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003700:	4659      	mov	r1, fp
 8003702:	018b      	lsls	r3, r1, #6
 8003704:	4651      	mov	r1, sl
 8003706:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800370a:	4651      	mov	r1, sl
 800370c:	018a      	lsls	r2, r1, #6
 800370e:	4651      	mov	r1, sl
 8003710:	ebb2 0801 	subs.w	r8, r2, r1
 8003714:	4659      	mov	r1, fp
 8003716:	eb63 0901 	sbc.w	r9, r3, r1
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003726:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800372a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800372e:	4690      	mov	r8, r2
 8003730:	4699      	mov	r9, r3
 8003732:	4623      	mov	r3, r4
 8003734:	eb18 0303 	adds.w	r3, r8, r3
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	462b      	mov	r3, r5
 800373c:	eb49 0303 	adc.w	r3, r9, r3
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800374e:	4629      	mov	r1, r5
 8003750:	024b      	lsls	r3, r1, #9
 8003752:	4621      	mov	r1, r4
 8003754:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003758:	4621      	mov	r1, r4
 800375a:	024a      	lsls	r2, r1, #9
 800375c:	4610      	mov	r0, r2
 800375e:	4619      	mov	r1, r3
 8003760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003762:	2200      	movs	r2, #0
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
 8003766:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003768:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800376c:	f7fc fd3e 	bl	80001ec <__aeabi_uldivmod>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4613      	mov	r3, r2
 8003776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003778:	e058      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377a:	4b38      	ldr	r3, [pc, #224]	; (800385c <HAL_RCC_GetSysClockFreq+0x200>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	099b      	lsrs	r3, r3, #6
 8003780:	2200      	movs	r2, #0
 8003782:	4618      	mov	r0, r3
 8003784:	4611      	mov	r1, r2
 8003786:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800378a:	623b      	str	r3, [r7, #32]
 800378c:	2300      	movs	r3, #0
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
 8003790:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003794:	4642      	mov	r2, r8
 8003796:	464b      	mov	r3, r9
 8003798:	f04f 0000 	mov.w	r0, #0
 800379c:	f04f 0100 	mov.w	r1, #0
 80037a0:	0159      	lsls	r1, r3, #5
 80037a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a6:	0150      	lsls	r0, r2, #5
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4641      	mov	r1, r8
 80037ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80037b2:	4649      	mov	r1, r9
 80037b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037cc:	ebb2 040a 	subs.w	r4, r2, sl
 80037d0:	eb63 050b 	sbc.w	r5, r3, fp
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	00eb      	lsls	r3, r5, #3
 80037de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037e2:	00e2      	lsls	r2, r4, #3
 80037e4:	4614      	mov	r4, r2
 80037e6:	461d      	mov	r5, r3
 80037e8:	4643      	mov	r3, r8
 80037ea:	18e3      	adds	r3, r4, r3
 80037ec:	603b      	str	r3, [r7, #0]
 80037ee:	464b      	mov	r3, r9
 80037f0:	eb45 0303 	adc.w	r3, r5, r3
 80037f4:	607b      	str	r3, [r7, #4]
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003802:	4629      	mov	r1, r5
 8003804:	028b      	lsls	r3, r1, #10
 8003806:	4621      	mov	r1, r4
 8003808:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800380c:	4621      	mov	r1, r4
 800380e:	028a      	lsls	r2, r1, #10
 8003810:	4610      	mov	r0, r2
 8003812:	4619      	mov	r1, r3
 8003814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003816:	2200      	movs	r2, #0
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	61fa      	str	r2, [r7, #28]
 800381c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003820:	f7fc fce4 	bl	80001ec <__aeabi_uldivmod>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4613      	mov	r3, r2
 800382a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_RCC_GetSysClockFreq+0x200>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	0c1b      	lsrs	r3, r3, #16
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	3301      	adds	r3, #1
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800383c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800383e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003840:	fbb2 f3f3 	udiv	r3, r2, r3
 8003844:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003846:	e002      	b.n	800384e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <HAL_RCC_GetSysClockFreq+0x204>)
 800384a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800384c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800384e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003850:	4618      	mov	r0, r3
 8003852:	3750      	adds	r7, #80	; 0x50
 8003854:	46bd      	mov	sp, r7
 8003856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800
 8003860:	00f42400 	.word	0x00f42400
 8003864:	007a1200 	.word	0x007a1200

08003868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <HAL_RCC_GetHCLKFreq+0x14>)
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20000000 	.word	0x20000000

08003880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003884:	f7ff fff0 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0a9b      	lsrs	r3, r3, #10
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4903      	ldr	r1, [pc, #12]	; (80038a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40023800 	.word	0x40023800
 80038a4:	0800896c 	.word	0x0800896c

080038a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038ac:	f7ff ffdc 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	0b5b      	lsrs	r3, r3, #13
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4903      	ldr	r1, [pc, #12]	; (80038cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40023800 	.word	0x40023800
 80038cc:	0800896c 	.word	0x0800896c

080038d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e041      	b.n	8003966 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fd f904 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	4619      	mov	r1, r3
 800390e:	4610      	mov	r0, r2
 8003910:	f000 f968 	bl	8003be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b02      	cmp	r3, #2
 8003982:	d122      	bne.n	80039ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b02      	cmp	r3, #2
 8003990:	d11b      	bne.n	80039ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f06f 0202 	mvn.w	r2, #2
 800399a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f8f8 	bl	8003ba6 <HAL_TIM_IC_CaptureCallback>
 80039b6:	e005      	b.n	80039c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f8ea 	bl	8003b92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8fb 	bl	8003bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d122      	bne.n	8003a1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d11b      	bne.n	8003a1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f06f 0204 	mvn.w	r2, #4
 80039ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f8ce 	bl	8003ba6 <HAL_TIM_IC_CaptureCallback>
 8003a0a:	e005      	b.n	8003a18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f8c0 	bl	8003b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f8d1 	bl	8003bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d122      	bne.n	8003a72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d11b      	bne.n	8003a72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f06f 0208 	mvn.w	r2, #8
 8003a42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2204      	movs	r2, #4
 8003a48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f8a4 	bl	8003ba6 <HAL_TIM_IC_CaptureCallback>
 8003a5e:	e005      	b.n	8003a6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f896 	bl	8003b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f8a7 	bl	8003bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d122      	bne.n	8003ac6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	2b10      	cmp	r3, #16
 8003a8c:	d11b      	bne.n	8003ac6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f06f 0210 	mvn.w	r2, #16
 8003a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2208      	movs	r2, #8
 8003a9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f87a 	bl	8003ba6 <HAL_TIM_IC_CaptureCallback>
 8003ab2:	e005      	b.n	8003ac0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f86c 	bl	8003b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f87d 	bl	8003bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d10e      	bne.n	8003af2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d107      	bne.n	8003af2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f06f 0201 	mvn.w	r2, #1
 8003aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f846 	bl	8003b7e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afc:	2b80      	cmp	r3, #128	; 0x80
 8003afe:	d10e      	bne.n	8003b1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0a:	2b80      	cmp	r3, #128	; 0x80
 8003b0c:	d107      	bne.n	8003b1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f989 	bl	8003e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b28:	2b40      	cmp	r3, #64	; 0x40
 8003b2a:	d10e      	bne.n	8003b4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b36:	2b40      	cmp	r3, #64	; 0x40
 8003b38:	d107      	bne.n	8003b4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f842 	bl	8003bce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d10e      	bne.n	8003b76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d107      	bne.n	8003b76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f06f 0220 	mvn.w	r2, #32
 8003b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f953 	bl	8003e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a40      	ldr	r2, [pc, #256]	; (8003cf8 <TIM_Base_SetConfig+0x114>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d013      	beq.n	8003c24 <TIM_Base_SetConfig+0x40>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c02:	d00f      	beq.n	8003c24 <TIM_Base_SetConfig+0x40>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a3d      	ldr	r2, [pc, #244]	; (8003cfc <TIM_Base_SetConfig+0x118>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00b      	beq.n	8003c24 <TIM_Base_SetConfig+0x40>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a3c      	ldr	r2, [pc, #240]	; (8003d00 <TIM_Base_SetConfig+0x11c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d007      	beq.n	8003c24 <TIM_Base_SetConfig+0x40>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a3b      	ldr	r2, [pc, #236]	; (8003d04 <TIM_Base_SetConfig+0x120>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <TIM_Base_SetConfig+0x40>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a3a      	ldr	r2, [pc, #232]	; (8003d08 <TIM_Base_SetConfig+0x124>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d108      	bne.n	8003c36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a2f      	ldr	r2, [pc, #188]	; (8003cf8 <TIM_Base_SetConfig+0x114>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d02b      	beq.n	8003c96 <TIM_Base_SetConfig+0xb2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c44:	d027      	beq.n	8003c96 <TIM_Base_SetConfig+0xb2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a2c      	ldr	r2, [pc, #176]	; (8003cfc <TIM_Base_SetConfig+0x118>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d023      	beq.n	8003c96 <TIM_Base_SetConfig+0xb2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a2b      	ldr	r2, [pc, #172]	; (8003d00 <TIM_Base_SetConfig+0x11c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d01f      	beq.n	8003c96 <TIM_Base_SetConfig+0xb2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a2a      	ldr	r2, [pc, #168]	; (8003d04 <TIM_Base_SetConfig+0x120>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01b      	beq.n	8003c96 <TIM_Base_SetConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a29      	ldr	r2, [pc, #164]	; (8003d08 <TIM_Base_SetConfig+0x124>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d017      	beq.n	8003c96 <TIM_Base_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a28      	ldr	r2, [pc, #160]	; (8003d0c <TIM_Base_SetConfig+0x128>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <TIM_Base_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a27      	ldr	r2, [pc, #156]	; (8003d10 <TIM_Base_SetConfig+0x12c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00f      	beq.n	8003c96 <TIM_Base_SetConfig+0xb2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a26      	ldr	r2, [pc, #152]	; (8003d14 <TIM_Base_SetConfig+0x130>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00b      	beq.n	8003c96 <TIM_Base_SetConfig+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a25      	ldr	r2, [pc, #148]	; (8003d18 <TIM_Base_SetConfig+0x134>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d007      	beq.n	8003c96 <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a24      	ldr	r2, [pc, #144]	; (8003d1c <TIM_Base_SetConfig+0x138>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <TIM_Base_SetConfig+0xb2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a23      	ldr	r2, [pc, #140]	; (8003d20 <TIM_Base_SetConfig+0x13c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d108      	bne.n	8003ca8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <TIM_Base_SetConfig+0x114>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d003      	beq.n	8003cdc <TIM_Base_SetConfig+0xf8>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a0c      	ldr	r2, [pc, #48]	; (8003d08 <TIM_Base_SetConfig+0x124>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d103      	bne.n	8003ce4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	615a      	str	r2, [r3, #20]
}
 8003cea:	bf00      	nop
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40000800 	.word	0x40000800
 8003d04:	40000c00 	.word	0x40000c00
 8003d08:	40010400 	.word	0x40010400
 8003d0c:	40014000 	.word	0x40014000
 8003d10:	40014400 	.word	0x40014400
 8003d14:	40014800 	.word	0x40014800
 8003d18:	40001800 	.word	0x40001800
 8003d1c:	40001c00 	.word	0x40001c00
 8003d20:	40002000 	.word	0x40002000

08003d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e05a      	b.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a21      	ldr	r2, [pc, #132]	; (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d022      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d88:	d01d      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1d      	ldr	r2, [pc, #116]	; (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d018      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1b      	ldr	r2, [pc, #108]	; (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a1a      	ldr	r2, [pc, #104]	; (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00e      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d009      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a17      	ldr	r2, [pc, #92]	; (8003e14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d004      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a15      	ldr	r2, [pc, #84]	; (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d10c      	bne.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40010000 	.word	0x40010000
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40000800 	.word	0x40000800
 8003e0c:	40000c00 	.word	0x40000c00
 8003e10:	40010400 	.word	0x40010400
 8003e14:	40014000 	.word	0x40014000
 8003e18:	40001800 	.word	0x40001800

08003e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e03f      	b.n	8003ed6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fc fec8 	bl	8000c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2224      	movs	r2, #36	; 0x24
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f929 	bl	80040e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ebc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b08a      	sub	sp, #40	; 0x28
 8003ee2:	af02      	add	r7, sp, #8
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	d17c      	bne.n	8003ff8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_UART_Transmit+0x2c>
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e075      	b.n	8003ffa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_UART_Transmit+0x3e>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e06e      	b.n	8003ffa <HAL_UART_Transmit+0x11c>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2221      	movs	r2, #33	; 0x21
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f32:	f7fc ffc7 	bl	8000ec4 <HAL_GetTick>
 8003f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	88fa      	ldrh	r2, [r7, #6]
 8003f3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	88fa      	ldrh	r2, [r7, #6]
 8003f42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4c:	d108      	bne.n	8003f60 <HAL_UART_Transmit+0x82>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d104      	bne.n	8003f60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	e003      	b.n	8003f68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f70:	e02a      	b.n	8003fc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2180      	movs	r1, #128	; 0x80
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f840 	bl	8004002 <UART_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e036      	b.n	8003ffa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10b      	bne.n	8003faa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	3302      	adds	r3, #2
 8003fa6:	61bb      	str	r3, [r7, #24]
 8003fa8:	e007      	b.n	8003fba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	781a      	ldrb	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1cf      	bne.n	8003f72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2140      	movs	r1, #64	; 0x40
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f810 	bl	8004002 <UART_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e006      	b.n	8003ffa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e000      	b.n	8003ffa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ff8:	2302      	movs	r3, #2
  }
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b090      	sub	sp, #64	; 0x40
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	4613      	mov	r3, r2
 8004010:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004012:	e050      	b.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800401a:	d04c      	beq.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800401c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401e:	2b00      	cmp	r3, #0
 8004020:	d007      	beq.n	8004032 <UART_WaitOnFlagUntilTimeout+0x30>
 8004022:	f7fc ff4f 	bl	8000ec4 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800402e:	429a      	cmp	r2, r3
 8004030:	d241      	bcs.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004052:	637a      	str	r2, [r7, #52]	; 0x34
 8004054:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e5      	bne.n	8004032 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3314      	adds	r3, #20
 800406c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	613b      	str	r3, [r7, #16]
   return(result);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	63bb      	str	r3, [r7, #56]	; 0x38
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3314      	adds	r3, #20
 8004084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004086:	623a      	str	r2, [r7, #32]
 8004088:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	69f9      	ldr	r1, [r7, #28]
 800408c:	6a3a      	ldr	r2, [r7, #32]
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	61bb      	str	r3, [r7, #24]
   return(result);
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e5      	bne.n	8004066 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e00f      	b.n	80040d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4013      	ands	r3, r2
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	bf0c      	ite	eq
 80040c6:	2301      	moveq	r3, #1
 80040c8:	2300      	movne	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d09f      	beq.n	8004014 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3740      	adds	r7, #64	; 0x40
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e4:	b0c0      	sub	sp, #256	; 0x100
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fc:	68d9      	ldr	r1, [r3, #12]
 80040fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	ea40 0301 	orr.w	r3, r0, r1
 8004108:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800410a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	431a      	orrs	r2, r3
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	431a      	orrs	r2, r3
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004138:	f021 010c 	bic.w	r1, r1, #12
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004146:	430b      	orrs	r3, r1
 8004148:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800414a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415a:	6999      	ldr	r1, [r3, #24]
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	ea40 0301 	orr.w	r3, r0, r1
 8004166:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	4b8f      	ldr	r3, [pc, #572]	; (80043ac <UART_SetConfig+0x2cc>)
 8004170:	429a      	cmp	r2, r3
 8004172:	d005      	beq.n	8004180 <UART_SetConfig+0xa0>
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4b8d      	ldr	r3, [pc, #564]	; (80043b0 <UART_SetConfig+0x2d0>)
 800417c:	429a      	cmp	r2, r3
 800417e:	d104      	bne.n	800418a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004180:	f7ff fb92 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 8004184:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004188:	e003      	b.n	8004192 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800418a:	f7ff fb79 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 800418e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419c:	f040 810c 	bne.w	80043b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a4:	2200      	movs	r2, #0
 80041a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041b2:	4622      	mov	r2, r4
 80041b4:	462b      	mov	r3, r5
 80041b6:	1891      	adds	r1, r2, r2
 80041b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80041ba:	415b      	adcs	r3, r3
 80041bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041c2:	4621      	mov	r1, r4
 80041c4:	eb12 0801 	adds.w	r8, r2, r1
 80041c8:	4629      	mov	r1, r5
 80041ca:	eb43 0901 	adc.w	r9, r3, r1
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041e2:	4690      	mov	r8, r2
 80041e4:	4699      	mov	r9, r3
 80041e6:	4623      	mov	r3, r4
 80041e8:	eb18 0303 	adds.w	r3, r8, r3
 80041ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041f0:	462b      	mov	r3, r5
 80041f2:	eb49 0303 	adc.w	r3, r9, r3
 80041f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004206:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800420a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800420e:	460b      	mov	r3, r1
 8004210:	18db      	adds	r3, r3, r3
 8004212:	653b      	str	r3, [r7, #80]	; 0x50
 8004214:	4613      	mov	r3, r2
 8004216:	eb42 0303 	adc.w	r3, r2, r3
 800421a:	657b      	str	r3, [r7, #84]	; 0x54
 800421c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004220:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004224:	f7fb ffe2 	bl	80001ec <__aeabi_uldivmod>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4b61      	ldr	r3, [pc, #388]	; (80043b4 <UART_SetConfig+0x2d4>)
 800422e:	fba3 2302 	umull	r2, r3, r3, r2
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	011c      	lsls	r4, r3, #4
 8004236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800423a:	2200      	movs	r2, #0
 800423c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004240:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004244:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004248:	4642      	mov	r2, r8
 800424a:	464b      	mov	r3, r9
 800424c:	1891      	adds	r1, r2, r2
 800424e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004250:	415b      	adcs	r3, r3
 8004252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004254:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004258:	4641      	mov	r1, r8
 800425a:	eb12 0a01 	adds.w	sl, r2, r1
 800425e:	4649      	mov	r1, r9
 8004260:	eb43 0b01 	adc.w	fp, r3, r1
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004270:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004274:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004278:	4692      	mov	sl, r2
 800427a:	469b      	mov	fp, r3
 800427c:	4643      	mov	r3, r8
 800427e:	eb1a 0303 	adds.w	r3, sl, r3
 8004282:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004286:	464b      	mov	r3, r9
 8004288:	eb4b 0303 	adc.w	r3, fp, r3
 800428c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800429c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042a4:	460b      	mov	r3, r1
 80042a6:	18db      	adds	r3, r3, r3
 80042a8:	643b      	str	r3, [r7, #64]	; 0x40
 80042aa:	4613      	mov	r3, r2
 80042ac:	eb42 0303 	adc.w	r3, r2, r3
 80042b0:	647b      	str	r3, [r7, #68]	; 0x44
 80042b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042ba:	f7fb ff97 	bl	80001ec <__aeabi_uldivmod>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4611      	mov	r1, r2
 80042c4:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <UART_SetConfig+0x2d4>)
 80042c6:	fba3 2301 	umull	r2, r3, r3, r1
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	2264      	movs	r2, #100	; 0x64
 80042ce:	fb02 f303 	mul.w	r3, r2, r3
 80042d2:	1acb      	subs	r3, r1, r3
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042da:	4b36      	ldr	r3, [pc, #216]	; (80043b4 <UART_SetConfig+0x2d4>)
 80042dc:	fba3 2302 	umull	r2, r3, r3, r2
 80042e0:	095b      	lsrs	r3, r3, #5
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042e8:	441c      	add	r4, r3
 80042ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042fc:	4642      	mov	r2, r8
 80042fe:	464b      	mov	r3, r9
 8004300:	1891      	adds	r1, r2, r2
 8004302:	63b9      	str	r1, [r7, #56]	; 0x38
 8004304:	415b      	adcs	r3, r3
 8004306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004308:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800430c:	4641      	mov	r1, r8
 800430e:	1851      	adds	r1, r2, r1
 8004310:	6339      	str	r1, [r7, #48]	; 0x30
 8004312:	4649      	mov	r1, r9
 8004314:	414b      	adcs	r3, r1
 8004316:	637b      	str	r3, [r7, #52]	; 0x34
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004324:	4659      	mov	r1, fp
 8004326:	00cb      	lsls	r3, r1, #3
 8004328:	4651      	mov	r1, sl
 800432a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800432e:	4651      	mov	r1, sl
 8004330:	00ca      	lsls	r2, r1, #3
 8004332:	4610      	mov	r0, r2
 8004334:	4619      	mov	r1, r3
 8004336:	4603      	mov	r3, r0
 8004338:	4642      	mov	r2, r8
 800433a:	189b      	adds	r3, r3, r2
 800433c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004340:	464b      	mov	r3, r9
 8004342:	460a      	mov	r2, r1
 8004344:	eb42 0303 	adc.w	r3, r2, r3
 8004348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004358:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800435c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004360:	460b      	mov	r3, r1
 8004362:	18db      	adds	r3, r3, r3
 8004364:	62bb      	str	r3, [r7, #40]	; 0x28
 8004366:	4613      	mov	r3, r2
 8004368:	eb42 0303 	adc.w	r3, r2, r3
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800436e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004372:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004376:	f7fb ff39 	bl	80001ec <__aeabi_uldivmod>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <UART_SetConfig+0x2d4>)
 8004380:	fba3 1302 	umull	r1, r3, r3, r2
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	2164      	movs	r1, #100	; 0x64
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	3332      	adds	r3, #50	; 0x32
 8004392:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <UART_SetConfig+0x2d4>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	f003 0207 	and.w	r2, r3, #7
 800439e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4422      	add	r2, r4
 80043a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043a8:	e105      	b.n	80045b6 <UART_SetConfig+0x4d6>
 80043aa:	bf00      	nop
 80043ac:	40011000 	.word	0x40011000
 80043b0:	40011400 	.word	0x40011400
 80043b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043bc:	2200      	movs	r2, #0
 80043be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043ca:	4642      	mov	r2, r8
 80043cc:	464b      	mov	r3, r9
 80043ce:	1891      	adds	r1, r2, r2
 80043d0:	6239      	str	r1, [r7, #32]
 80043d2:	415b      	adcs	r3, r3
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
 80043d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043da:	4641      	mov	r1, r8
 80043dc:	1854      	adds	r4, r2, r1
 80043de:	4649      	mov	r1, r9
 80043e0:	eb43 0501 	adc.w	r5, r3, r1
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	00eb      	lsls	r3, r5, #3
 80043ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043f2:	00e2      	lsls	r2, r4, #3
 80043f4:	4614      	mov	r4, r2
 80043f6:	461d      	mov	r5, r3
 80043f8:	4643      	mov	r3, r8
 80043fa:	18e3      	adds	r3, r4, r3
 80043fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004400:	464b      	mov	r3, r9
 8004402:	eb45 0303 	adc.w	r3, r5, r3
 8004406:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800440a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004416:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004426:	4629      	mov	r1, r5
 8004428:	008b      	lsls	r3, r1, #2
 800442a:	4621      	mov	r1, r4
 800442c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004430:	4621      	mov	r1, r4
 8004432:	008a      	lsls	r2, r1, #2
 8004434:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004438:	f7fb fed8 	bl	80001ec <__aeabi_uldivmod>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4b60      	ldr	r3, [pc, #384]	; (80045c4 <UART_SetConfig+0x4e4>)
 8004442:	fba3 2302 	umull	r2, r3, r3, r2
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	011c      	lsls	r4, r3, #4
 800444a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800444e:	2200      	movs	r2, #0
 8004450:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004454:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004458:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800445c:	4642      	mov	r2, r8
 800445e:	464b      	mov	r3, r9
 8004460:	1891      	adds	r1, r2, r2
 8004462:	61b9      	str	r1, [r7, #24]
 8004464:	415b      	adcs	r3, r3
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800446c:	4641      	mov	r1, r8
 800446e:	1851      	adds	r1, r2, r1
 8004470:	6139      	str	r1, [r7, #16]
 8004472:	4649      	mov	r1, r9
 8004474:	414b      	adcs	r3, r1
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004484:	4659      	mov	r1, fp
 8004486:	00cb      	lsls	r3, r1, #3
 8004488:	4651      	mov	r1, sl
 800448a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800448e:	4651      	mov	r1, sl
 8004490:	00ca      	lsls	r2, r1, #3
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	4603      	mov	r3, r0
 8004498:	4642      	mov	r2, r8
 800449a:	189b      	adds	r3, r3, r2
 800449c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044a0:	464b      	mov	r3, r9
 80044a2:	460a      	mov	r2, r1
 80044a4:	eb42 0303 	adc.w	r3, r2, r3
 80044a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80044b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044c4:	4649      	mov	r1, r9
 80044c6:	008b      	lsls	r3, r1, #2
 80044c8:	4641      	mov	r1, r8
 80044ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ce:	4641      	mov	r1, r8
 80044d0:	008a      	lsls	r2, r1, #2
 80044d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044d6:	f7fb fe89 	bl	80001ec <__aeabi_uldivmod>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4b39      	ldr	r3, [pc, #228]	; (80045c4 <UART_SetConfig+0x4e4>)
 80044e0:	fba3 1302 	umull	r1, r3, r3, r2
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	2164      	movs	r1, #100	; 0x64
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	3332      	adds	r3, #50	; 0x32
 80044f2:	4a34      	ldr	r2, [pc, #208]	; (80045c4 <UART_SetConfig+0x4e4>)
 80044f4:	fba2 2303 	umull	r2, r3, r2, r3
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044fe:	441c      	add	r4, r3
 8004500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004504:	2200      	movs	r2, #0
 8004506:	673b      	str	r3, [r7, #112]	; 0x70
 8004508:	677a      	str	r2, [r7, #116]	; 0x74
 800450a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800450e:	4642      	mov	r2, r8
 8004510:	464b      	mov	r3, r9
 8004512:	1891      	adds	r1, r2, r2
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	415b      	adcs	r3, r3
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800451e:	4641      	mov	r1, r8
 8004520:	1851      	adds	r1, r2, r1
 8004522:	6039      	str	r1, [r7, #0]
 8004524:	4649      	mov	r1, r9
 8004526:	414b      	adcs	r3, r1
 8004528:	607b      	str	r3, [r7, #4]
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004536:	4659      	mov	r1, fp
 8004538:	00cb      	lsls	r3, r1, #3
 800453a:	4651      	mov	r1, sl
 800453c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004540:	4651      	mov	r1, sl
 8004542:	00ca      	lsls	r2, r1, #3
 8004544:	4610      	mov	r0, r2
 8004546:	4619      	mov	r1, r3
 8004548:	4603      	mov	r3, r0
 800454a:	4642      	mov	r2, r8
 800454c:	189b      	adds	r3, r3, r2
 800454e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004550:	464b      	mov	r3, r9
 8004552:	460a      	mov	r2, r1
 8004554:	eb42 0303 	adc.w	r3, r2, r3
 8004558:	66fb      	str	r3, [r7, #108]	; 0x6c
 800455a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	663b      	str	r3, [r7, #96]	; 0x60
 8004564:	667a      	str	r2, [r7, #100]	; 0x64
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004572:	4649      	mov	r1, r9
 8004574:	008b      	lsls	r3, r1, #2
 8004576:	4641      	mov	r1, r8
 8004578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800457c:	4641      	mov	r1, r8
 800457e:	008a      	lsls	r2, r1, #2
 8004580:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004584:	f7fb fe32 	bl	80001ec <__aeabi_uldivmod>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <UART_SetConfig+0x4e4>)
 800458e:	fba3 1302 	umull	r1, r3, r3, r2
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	2164      	movs	r1, #100	; 0x64
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	3332      	adds	r3, #50	; 0x32
 80045a0:	4a08      	ldr	r2, [pc, #32]	; (80045c4 <UART_SetConfig+0x4e4>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	f003 020f 	and.w	r2, r3, #15
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4422      	add	r2, r4
 80045b4:	609a      	str	r2, [r3, #8]
}
 80045b6:	bf00      	nop
 80045b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045bc:	46bd      	mov	sp, r7
 80045be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045c2:	bf00      	nop
 80045c4:	51eb851f 	.word	0x51eb851f

080045c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045c8:	b084      	sub	sp, #16
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	f107 001c 	add.w	r0, r7, #28
 80045d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d122      	bne.n	8004626 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80045f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f001 fbee 	bl	8005dfc <USB_CoreReset>
 8004620:	4603      	mov	r3, r0
 8004622:	73fb      	strb	r3, [r7, #15]
 8004624:	e01a      	b.n	800465c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f001 fbe2 	bl	8005dfc <USB_CoreReset>
 8004638:	4603      	mov	r3, r0
 800463a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800463c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004646:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	639a      	str	r2, [r3, #56]	; 0x38
 800464e:	e005      	b.n	800465c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	2b01      	cmp	r3, #1
 8004660:	d10b      	bne.n	800467a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f043 0206 	orr.w	r2, r3, #6
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f043 0220 	orr.w	r2, r3, #32
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800467a:	7bfb      	ldrb	r3, [r7, #15]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004686:	b004      	add	sp, #16
 8004688:	4770      	bx	lr
	...

0800468c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	4613      	mov	r3, r2
 8004698:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d165      	bne.n	800476c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4a41      	ldr	r2, [pc, #260]	; (80047a8 <USB_SetTurnaroundTime+0x11c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d906      	bls.n	80046b6 <USB_SetTurnaroundTime+0x2a>
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4a40      	ldr	r2, [pc, #256]	; (80047ac <USB_SetTurnaroundTime+0x120>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d202      	bcs.n	80046b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80046b0:	230f      	movs	r3, #15
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	e062      	b.n	800477c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4a3c      	ldr	r2, [pc, #240]	; (80047ac <USB_SetTurnaroundTime+0x120>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d306      	bcc.n	80046cc <USB_SetTurnaroundTime+0x40>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	4a3b      	ldr	r2, [pc, #236]	; (80047b0 <USB_SetTurnaroundTime+0x124>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d202      	bcs.n	80046cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80046c6:	230e      	movs	r3, #14
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	e057      	b.n	800477c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4a38      	ldr	r2, [pc, #224]	; (80047b0 <USB_SetTurnaroundTime+0x124>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d306      	bcc.n	80046e2 <USB_SetTurnaroundTime+0x56>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4a37      	ldr	r2, [pc, #220]	; (80047b4 <USB_SetTurnaroundTime+0x128>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d202      	bcs.n	80046e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80046dc:	230d      	movs	r3, #13
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e04c      	b.n	800477c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	4a33      	ldr	r2, [pc, #204]	; (80047b4 <USB_SetTurnaroundTime+0x128>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d306      	bcc.n	80046f8 <USB_SetTurnaroundTime+0x6c>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4a32      	ldr	r2, [pc, #200]	; (80047b8 <USB_SetTurnaroundTime+0x12c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d802      	bhi.n	80046f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80046f2:	230c      	movs	r3, #12
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	e041      	b.n	800477c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4a2f      	ldr	r2, [pc, #188]	; (80047b8 <USB_SetTurnaroundTime+0x12c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d906      	bls.n	800470e <USB_SetTurnaroundTime+0x82>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4a2e      	ldr	r2, [pc, #184]	; (80047bc <USB_SetTurnaroundTime+0x130>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d802      	bhi.n	800470e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004708:	230b      	movs	r3, #11
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	e036      	b.n	800477c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	4a2a      	ldr	r2, [pc, #168]	; (80047bc <USB_SetTurnaroundTime+0x130>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d906      	bls.n	8004724 <USB_SetTurnaroundTime+0x98>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4a29      	ldr	r2, [pc, #164]	; (80047c0 <USB_SetTurnaroundTime+0x134>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d802      	bhi.n	8004724 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800471e:	230a      	movs	r3, #10
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	e02b      	b.n	800477c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a26      	ldr	r2, [pc, #152]	; (80047c0 <USB_SetTurnaroundTime+0x134>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d906      	bls.n	800473a <USB_SetTurnaroundTime+0xae>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4a25      	ldr	r2, [pc, #148]	; (80047c4 <USB_SetTurnaroundTime+0x138>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d202      	bcs.n	800473a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004734:	2309      	movs	r3, #9
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e020      	b.n	800477c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4a21      	ldr	r2, [pc, #132]	; (80047c4 <USB_SetTurnaroundTime+0x138>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d306      	bcc.n	8004750 <USB_SetTurnaroundTime+0xc4>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	4a20      	ldr	r2, [pc, #128]	; (80047c8 <USB_SetTurnaroundTime+0x13c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d802      	bhi.n	8004750 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800474a:	2308      	movs	r3, #8
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e015      	b.n	800477c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4a1d      	ldr	r2, [pc, #116]	; (80047c8 <USB_SetTurnaroundTime+0x13c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d906      	bls.n	8004766 <USB_SetTurnaroundTime+0xda>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4a1c      	ldr	r2, [pc, #112]	; (80047cc <USB_SetTurnaroundTime+0x140>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d202      	bcs.n	8004766 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004760:	2307      	movs	r3, #7
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	e00a      	b.n	800477c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004766:	2306      	movs	r3, #6
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	e007      	b.n	800477c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d102      	bne.n	8004778 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004772:	2309      	movs	r3, #9
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	e001      	b.n	800477c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004778:	2309      	movs	r3, #9
 800477a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	029b      	lsls	r3, r3, #10
 8004790:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004794:	431a      	orrs	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	00d8acbf 	.word	0x00d8acbf
 80047ac:	00e4e1c0 	.word	0x00e4e1c0
 80047b0:	00f42400 	.word	0x00f42400
 80047b4:	01067380 	.word	0x01067380
 80047b8:	011a499f 	.word	0x011a499f
 80047bc:	01312cff 	.word	0x01312cff
 80047c0:	014ca43f 	.word	0x014ca43f
 80047c4:	016e3600 	.word	0x016e3600
 80047c8:	01a6ab1f 	.word	0x01a6ab1f
 80047cc:	01e84800 	.word	0x01e84800

080047d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f043 0201 	orr.w	r2, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f023 0201 	bic.w	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004830:	78fb      	ldrb	r3, [r7, #3]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d115      	bne.n	8004862 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004842:	2001      	movs	r0, #1
 8004844:	f7fc fb4a 	bl	8000edc <HAL_Delay>
      ms++;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3301      	adds	r3, #1
 800484c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f001 fa45 	bl	8005cde <USB_GetMode>
 8004854:	4603      	mov	r3, r0
 8004856:	2b01      	cmp	r3, #1
 8004858:	d01e      	beq.n	8004898 <USB_SetCurrentMode+0x84>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b31      	cmp	r3, #49	; 0x31
 800485e:	d9f0      	bls.n	8004842 <USB_SetCurrentMode+0x2e>
 8004860:	e01a      	b.n	8004898 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004862:	78fb      	ldrb	r3, [r7, #3]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d115      	bne.n	8004894 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004874:	2001      	movs	r0, #1
 8004876:	f7fc fb31 	bl	8000edc <HAL_Delay>
      ms++;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3301      	adds	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f001 fa2c 	bl	8005cde <USB_GetMode>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <USB_SetCurrentMode+0x84>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b31      	cmp	r3, #49	; 0x31
 8004890:	d9f0      	bls.n	8004874 <USB_SetCurrentMode+0x60>
 8004892:	e001      	b.n	8004898 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e005      	b.n	80048a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b32      	cmp	r3, #50	; 0x32
 800489c:	d101      	bne.n	80048a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048ac:	b084      	sub	sp, #16
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b086      	sub	sp, #24
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048c6:	2300      	movs	r3, #0
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	e009      	b.n	80048e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	3340      	adds	r3, #64	; 0x40
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	2200      	movs	r2, #0
 80048d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	3301      	adds	r3, #1
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	2b0e      	cmp	r3, #14
 80048e4:	d9f2      	bls.n	80048cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d11c      	bne.n	8004926 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048fa:	f043 0302 	orr.w	r3, r3, #2
 80048fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004910:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	639a      	str	r2, [r3, #56]	; 0x38
 8004924:	e00b      	b.n	800493e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004944:	461a      	mov	r2, r3
 8004946:	2300      	movs	r3, #0
 8004948:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004950:	4619      	mov	r1, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004958:	461a      	mov	r2, r3
 800495a:	680b      	ldr	r3, [r1, #0]
 800495c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004960:	2b01      	cmp	r3, #1
 8004962:	d10c      	bne.n	800497e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d104      	bne.n	8004974 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800496a:	2100      	movs	r1, #0
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f965 	bl	8004c3c <USB_SetDevSpeed>
 8004972:	e008      	b.n	8004986 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004974:	2101      	movs	r1, #1
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f960 	bl	8004c3c <USB_SetDevSpeed>
 800497c:	e003      	b.n	8004986 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800497e:	2103      	movs	r1, #3
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f95b 	bl	8004c3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004986:	2110      	movs	r1, #16
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f8f3 	bl	8004b74 <USB_FlushTxFifo>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f91f 	bl	8004bdc <USB_FlushRxFifo>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ae:	461a      	mov	r2, r3
 80049b0:	2300      	movs	r3, #0
 80049b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ba:	461a      	mov	r2, r3
 80049bc:	2300      	movs	r3, #0
 80049be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c6:	461a      	mov	r2, r3
 80049c8:	2300      	movs	r3, #0
 80049ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049cc:	2300      	movs	r3, #0
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	e043      	b.n	8004a5a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049e8:	d118      	bne.n	8004a1c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	461a      	mov	r2, r3
 80049fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	e013      	b.n	8004a2e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a12:	461a      	mov	r2, r3
 8004a14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	e008      	b.n	8004a2e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	3301      	adds	r3, #1
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d3b7      	bcc.n	80049d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a62:	2300      	movs	r3, #0
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	e043      	b.n	8004af0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a7e:	d118      	bne.n	8004ab2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10a      	bne.n	8004a9c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a92:	461a      	mov	r2, r3
 8004a94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e013      	b.n	8004ac4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	e008      	b.n	8004ac4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abe:	461a      	mov	r2, r3
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ae8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	3301      	adds	r3, #1
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d3b7      	bcc.n	8004a68 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d105      	bne.n	8004b2c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f043 0210 	orr.w	r2, r3, #16
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699a      	ldr	r2, [r3, #24]
 8004b30:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <USB_DevInit+0x2c4>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	f043 0208 	orr.w	r2, r3, #8
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d107      	bne.n	8004b60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b58:	f043 0304 	orr.w	r3, r3, #4
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b6c:	b004      	add	sp, #16
 8004b6e:	4770      	bx	lr
 8004b70:	803c3800 	.word	0x803c3800

08004b74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3301      	adds	r3, #1
 8004b86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4a13      	ldr	r2, [pc, #76]	; (8004bd8 <USB_FlushTxFifo+0x64>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e01b      	b.n	8004bcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	daf2      	bge.n	8004b82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	019b      	lsls	r3, r3, #6
 8004ba4:	f043 0220 	orr.w	r2, r3, #32
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4a08      	ldr	r2, [pc, #32]	; (8004bd8 <USB_FlushTxFifo+0x64>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e006      	b.n	8004bcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d0f0      	beq.n	8004bac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	00030d40 	.word	0x00030d40

08004bdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	3301      	adds	r3, #1
 8004bec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4a11      	ldr	r2, [pc, #68]	; (8004c38 <USB_FlushRxFifo+0x5c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e018      	b.n	8004c2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	daf2      	bge.n	8004be8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2210      	movs	r2, #16
 8004c0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4a08      	ldr	r2, [pc, #32]	; (8004c38 <USB_FlushRxFifo+0x5c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e006      	b.n	8004c2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d0f0      	beq.n	8004c0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	00030d40 	.word	0x00030d40

08004c3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	68f9      	ldr	r1, [r7, #12]
 8004c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b087      	sub	sp, #28
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 0306 	and.w	r3, r3, #6
 8004c86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d102      	bne.n	8004c94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	75fb      	strb	r3, [r7, #23]
 8004c92:	e00a      	b.n	8004caa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d002      	beq.n	8004ca0 <USB_GetDevSpeed+0x32>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b06      	cmp	r3, #6
 8004c9e:	d102      	bne.n	8004ca6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	75fb      	strb	r3, [r7, #23]
 8004ca4:	e001      	b.n	8004caa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ca6:	230f      	movs	r3, #15
 8004ca8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	371c      	adds	r7, #28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	785b      	ldrb	r3, [r3, #1]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d13a      	bne.n	8004d4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	f003 030f 	and.w	r3, r3, #15
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	68f9      	ldr	r1, [r7, #12]
 8004cee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d155      	bne.n	8004db8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	791b      	ldrb	r3, [r3, #4]
 8004d26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	059b      	lsls	r3, r3, #22
 8004d2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d30:	4313      	orrs	r3, r2
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	0151      	lsls	r1, r2, #5
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	440a      	add	r2, r1
 8004d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	e036      	b.n	8004db8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d50:	69da      	ldr	r2, [r3, #28]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d60:	041b      	lsls	r3, r3, #16
 8004d62:	68f9      	ldr	r1, [r7, #12]
 8004d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d11a      	bne.n	8004db8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	791b      	ldrb	r3, [r3, #4]
 8004d9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	4313      	orrs	r3, r2
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	0151      	lsls	r1, r2, #5
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	440a      	add	r2, r1
 8004daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	785b      	ldrb	r3, [r3, #1]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d161      	bne.n	8004ea8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dfa:	d11f      	bne.n	8004e3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	0151      	lsls	r1, r2, #5
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	440a      	add	r2, r1
 8004e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	68f9      	ldr	r1, [r7, #12]
 8004e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	2101      	movs	r1, #1
 8004e72:	fa01 f303 	lsl.w	r3, r1, r3
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	68f9      	ldr	r1, [r7, #12]
 8004e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e80:	4013      	ands	r3, r2
 8004e82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	0159      	lsls	r1, r3, #5
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	440b      	add	r3, r1
 8004e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4b35      	ldr	r3, [pc, #212]	; (8004f78 <USB_DeactivateEndpoint+0x1b0>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	600b      	str	r3, [r1, #0]
 8004ea6:	e060      	b.n	8004f6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ebe:	d11f      	bne.n	8004f00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	0151      	lsls	r1, r2, #5
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ede:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	0151      	lsls	r1, r2, #5
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	440a      	add	r2, r1
 8004ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004efe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	2101      	movs	r1, #1
 8004f12:	fa01 f303 	lsl.w	r3, r1, r3
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f20:	4013      	ands	r3, r2
 8004f22:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2a:	69da      	ldr	r2, [r3, #28]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	2101      	movs	r1, #1
 8004f36:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3a:	041b      	lsls	r3, r3, #16
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	68f9      	ldr	r1, [r7, #12]
 8004f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f44:	4013      	ands	r3, r2
 8004f46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	0159      	lsls	r1, r3, #5
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	440b      	add	r3, r1
 8004f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f62:	4619      	mov	r1, r3
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <USB_DeactivateEndpoint+0x1b4>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	ec337800 	.word	0xec337800
 8004f7c:	eff37800 	.word	0xeff37800

08004f80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	; 0x28
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	785b      	ldrb	r3, [r3, #1]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	f040 815c 	bne.w	800525a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d132      	bne.n	8005010 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	0151      	lsls	r1, r2, #5
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	440a      	add	r2, r1
 8004fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	0151      	lsls	r1, r2, #5
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	440a      	add	r2, r1
 8004fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	0151      	lsls	r1, r2, #5
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	440a      	add	r2, r1
 8005004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005008:	0cdb      	lsrs	r3, r3, #19
 800500a:	04db      	lsls	r3, r3, #19
 800500c:	6113      	str	r3, [r2, #16]
 800500e:	e074      	b.n	80050fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502a:	0cdb      	lsrs	r3, r3, #19
 800502c:	04db      	lsls	r3, r3, #19
 800502e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	0151      	lsls	r1, r2, #5
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	440a      	add	r2, r1
 8005046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800504a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800504e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005060:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	6999      	ldr	r1, [r3, #24]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	440b      	add	r3, r1
 800506c:	1e59      	subs	r1, r3, #1
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	fbb1 f3f3 	udiv	r3, r1, r3
 8005076:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005078:	4b9d      	ldr	r3, [pc, #628]	; (80052f0 <USB_EPStartXfer+0x370>)
 800507a:	400b      	ands	r3, r1
 800507c:	69b9      	ldr	r1, [r7, #24]
 800507e:	0148      	lsls	r0, r1, #5
 8005080:	69f9      	ldr	r1, [r7, #28]
 8005082:	4401      	add	r1, r0
 8005084:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005088:	4313      	orrs	r3, r2
 800508a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a2:	69b9      	ldr	r1, [r7, #24]
 80050a4:	0148      	lsls	r0, r1, #5
 80050a6:	69f9      	ldr	r1, [r7, #28]
 80050a8:	4401      	add	r1, r0
 80050aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050ae:	4313      	orrs	r3, r2
 80050b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	791b      	ldrb	r3, [r3, #4]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d11f      	bne.n	80050fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	0151      	lsls	r1, r2, #5
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	440a      	add	r2, r1
 80050d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80050d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	0151      	lsls	r1, r2, #5
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	440a      	add	r2, r1
 80050f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d14b      	bne.n	8005198 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d009      	beq.n	800511c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	461a      	mov	r2, r3
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	791b      	ldrb	r3, [r3, #4]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d128      	bne.n	8005176 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005130:	2b00      	cmp	r3, #0
 8005132:	d110      	bne.n	8005156 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800514e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	e00f      	b.n	8005176 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	0151      	lsls	r1, r2, #5
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	440a      	add	r2, r1
 800516c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005174:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	440a      	add	r2, r1
 800518c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005190:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e133      	b.n	8005400 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	791b      	ldrb	r3, [r3, #4]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d015      	beq.n	80051ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 811b 	beq.w	8005400 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	2101      	movs	r1, #1
 80051dc:	fa01 f303 	lsl.w	r3, r1, r3
 80051e0:	69f9      	ldr	r1, [r7, #28]
 80051e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051e6:	4313      	orrs	r3, r2
 80051e8:	634b      	str	r3, [r1, #52]	; 0x34
 80051ea:	e109      	b.n	8005400 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d110      	bne.n	800521e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	440a      	add	r2, r1
 8005212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005216:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	e00f      	b.n	800523e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	0151      	lsls	r1, r2, #5
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	440a      	add	r2, r1
 8005234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800523c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	6919      	ldr	r1, [r3, #16]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	781a      	ldrb	r2, [r3, #0]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	b298      	uxth	r0, r3
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	4603      	mov	r3, r0
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 fade 	bl	8005814 <USB_WritePacket>
 8005258:	e0d2      	b.n	8005400 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	0151      	lsls	r1, r2, #5
 800526c:	69fa      	ldr	r2, [r7, #28]
 800526e:	440a      	add	r2, r1
 8005270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005274:	0cdb      	lsrs	r3, r3, #19
 8005276:	04db      	lsls	r3, r3, #19
 8005278:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	0151      	lsls	r1, r2, #5
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	440a      	add	r2, r1
 8005290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005294:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005298:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800529c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d126      	bne.n	80052f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052bc:	69b9      	ldr	r1, [r7, #24]
 80052be:	0148      	lsls	r0, r1, #5
 80052c0:	69f9      	ldr	r1, [r7, #28]
 80052c2:	4401      	add	r1, r0
 80052c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052c8:	4313      	orrs	r3, r2
 80052ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052ea:	6113      	str	r3, [r2, #16]
 80052ec:	e03a      	b.n	8005364 <USB_EPStartXfer+0x3e4>
 80052ee:	bf00      	nop
 80052f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	699a      	ldr	r2, [r3, #24]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	1e5a      	subs	r2, r3, #1
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	8afa      	ldrh	r2, [r7, #22]
 8005310:	fb03 f202 	mul.w	r2, r3, r2
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005324:	691a      	ldr	r2, [r3, #16]
 8005326:	8afb      	ldrh	r3, [r7, #22]
 8005328:	04d9      	lsls	r1, r3, #19
 800532a:	4b38      	ldr	r3, [pc, #224]	; (800540c <USB_EPStartXfer+0x48c>)
 800532c:	400b      	ands	r3, r1
 800532e:	69b9      	ldr	r1, [r7, #24]
 8005330:	0148      	lsls	r0, r1, #5
 8005332:	69f9      	ldr	r1, [r7, #28]
 8005334:	4401      	add	r1, r0
 8005336:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800533a:	4313      	orrs	r3, r2
 800533c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005354:	69b9      	ldr	r1, [r7, #24]
 8005356:	0148      	lsls	r0, r1, #5
 8005358:	69f9      	ldr	r1, [r7, #28]
 800535a:	4401      	add	r1, r0
 800535c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005360:	4313      	orrs	r3, r2
 8005362:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005364:	79fb      	ldrb	r3, [r7, #7]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d10d      	bne.n	8005386 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	6919      	ldr	r1, [r3, #16]
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005382:	460a      	mov	r2, r1
 8005384:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	791b      	ldrb	r3, [r3, #4]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d128      	bne.n	80053e0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539a:	2b00      	cmp	r3, #0
 800539c:	d110      	bne.n	80053c0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	e00f      	b.n	80053e0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	0151      	lsls	r1, r2, #5
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	440a      	add	r2, r1
 80053d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	0151      	lsls	r1, r2, #5
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	440a      	add	r2, r1
 80053f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3720      	adds	r7, #32
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	1ff80000 	.word	0x1ff80000

08005410 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	4613      	mov	r3, r2
 800541c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	2b01      	cmp	r3, #1
 800542e:	f040 80ce 	bne.w	80055ce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d132      	bne.n	80054a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	0151      	lsls	r1, r2, #5
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	440a      	add	r2, r1
 8005450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005454:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005458:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800545c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	440a      	add	r2, r1
 8005474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005478:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800547c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	0151      	lsls	r1, r2, #5
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	440a      	add	r2, r1
 8005494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005498:	0cdb      	lsrs	r3, r3, #19
 800549a:	04db      	lsls	r3, r3, #19
 800549c:	6113      	str	r3, [r2, #16]
 800549e:	e04e      	b.n	800553e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	0151      	lsls	r1, r2, #5
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	440a      	add	r2, r1
 80054b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ba:	0cdb      	lsrs	r3, r3, #19
 80054bc:	04db      	lsls	r3, r3, #19
 80054be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	699a      	ldr	r2, [r3, #24]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d903      	bls.n	80054f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	0151      	lsls	r1, r2, #5
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	440a      	add	r2, r1
 800550e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005512:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005516:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800552e:	6939      	ldr	r1, [r7, #16]
 8005530:	0148      	lsls	r0, r1, #5
 8005532:	6979      	ldr	r1, [r7, #20]
 8005534:	4401      	add	r1, r0
 8005536:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800553a:	4313      	orrs	r3, r2
 800553c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800553e:	79fb      	ldrb	r3, [r7, #7]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d11e      	bne.n	8005582 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d009      	beq.n	8005560 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005558:	461a      	mov	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	0151      	lsls	r1, r2, #5
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	440a      	add	r2, r1
 8005576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	e097      	b.n	80056b2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	440a      	add	r2, r1
 8005598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 8083 	beq.w	80056b2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	2101      	movs	r1, #1
 80055be:	fa01 f303 	lsl.w	r3, r1, r3
 80055c2:	6979      	ldr	r1, [r7, #20]
 80055c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055c8:	4313      	orrs	r3, r2
 80055ca:	634b      	str	r3, [r1, #52]	; 0x34
 80055cc:	e071      	b.n	80056b2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	0151      	lsls	r1, r2, #5
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	440a      	add	r2, r1
 80055e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e8:	0cdb      	lsrs	r3, r3, #19
 80055ea:	04db      	lsls	r3, r3, #19
 80055ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	0151      	lsls	r1, r2, #5
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	440a      	add	r2, r1
 8005604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005608:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800560c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005610:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	0151      	lsls	r1, r2, #5
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	440a      	add	r2, r1
 8005640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005644:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005648:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005660:	6939      	ldr	r1, [r7, #16]
 8005662:	0148      	lsls	r0, r1, #5
 8005664:	6979      	ldr	r1, [r7, #20]
 8005666:	4401      	add	r1, r0
 8005668:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800566c:	4313      	orrs	r3, r2
 800566e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d10d      	bne.n	8005692 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d009      	beq.n	8005692 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	6919      	ldr	r1, [r3, #16]
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568e:	460a      	mov	r2, r1
 8005690:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	785b      	ldrb	r3, [r3, #1]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d14a      	bne.n	8005774 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056f6:	f040 8086 	bne.w	8005806 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	440a      	add	r2, r1
 8005714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005718:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800571c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	7812      	ldrb	r2, [r2, #0]
 8005732:	0151      	lsls	r1, r2, #5
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	440a      	add	r2, r1
 8005738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005740:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3301      	adds	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f242 7210 	movw	r2, #10000	; 0x2710
 800574e:	4293      	cmp	r3, r2
 8005750:	d902      	bls.n	8005758 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	75fb      	strb	r3, [r7, #23]
          break;
 8005756:	e056      	b.n	8005806 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800576c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005770:	d0e7      	beq.n	8005742 <USB_EPStopXfer+0x82>
 8005772:	e048      	b.n	8005806 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800578c:	d13b      	bne.n	8005806 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	7812      	ldrb	r2, [r2, #0]
 80057a2:	0151      	lsls	r1, r2, #5
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	440a      	add	r2, r1
 80057a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	7812      	ldrb	r2, [r2, #0]
 80057c6:	0151      	lsls	r1, r2, #5
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	440a      	add	r2, r1
 80057cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3301      	adds	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f242 7210 	movw	r2, #10000	; 0x2710
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d902      	bls.n	80057ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	75fb      	strb	r3, [r7, #23]
          break;
 80057ea:	e00c      	b.n	8005806 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005804:	d0e7      	beq.n	80057d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005806:	7dfb      	ldrb	r3, [r7, #23]
}
 8005808:	4618      	mov	r0, r3
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005814:	b480      	push	{r7}
 8005816:	b089      	sub	sp, #36	; 0x24
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	4611      	mov	r1, r2
 8005820:	461a      	mov	r2, r3
 8005822:	460b      	mov	r3, r1
 8005824:	71fb      	strb	r3, [r7, #7]
 8005826:	4613      	mov	r3, r2
 8005828:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005832:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005836:	2b00      	cmp	r3, #0
 8005838:	d123      	bne.n	8005882 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800583a:	88bb      	ldrh	r3, [r7, #4]
 800583c:	3303      	adds	r3, #3
 800583e:	089b      	lsrs	r3, r3, #2
 8005840:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005842:	2300      	movs	r3, #0
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	e018      	b.n	800587a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	031a      	lsls	r2, r3, #12
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	4413      	add	r3, r2
 8005850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005854:	461a      	mov	r2, r3
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	3301      	adds	r3, #1
 8005860:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	3301      	adds	r3, #1
 8005866:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	3301      	adds	r3, #1
 800586c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	3301      	adds	r3, #1
 8005872:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	3301      	adds	r3, #1
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	429a      	cmp	r2, r3
 8005880:	d3e2      	bcc.n	8005848 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3724      	adds	r7, #36	; 0x24
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005890:	b480      	push	{r7}
 8005892:	b08b      	sub	sp, #44	; 0x2c
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	4613      	mov	r3, r2
 800589c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058a6:	88fb      	ldrh	r3, [r7, #6]
 80058a8:	089b      	lsrs	r3, r3, #2
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058ae:	88fb      	ldrh	r3, [r7, #6]
 80058b0:	f003 0303 	and.w	r3, r3, #3
 80058b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058b6:	2300      	movs	r3, #0
 80058b8:	623b      	str	r3, [r7, #32]
 80058ba:	e014      	b.n	80058e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	3301      	adds	r3, #1
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	3301      	adds	r3, #1
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	3301      	adds	r3, #1
 80058d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	3301      	adds	r3, #1
 80058de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	3301      	adds	r3, #1
 80058e4:	623b      	str	r3, [r7, #32]
 80058e6:	6a3a      	ldr	r2, [r7, #32]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d3e6      	bcc.n	80058bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058ee:	8bfb      	ldrh	r3, [r7, #30]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01e      	beq.n	8005932 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058fe:	461a      	mov	r2, r3
 8005900:	f107 0310 	add.w	r3, r7, #16
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	fa22 f303 	lsr.w	r3, r2, r3
 8005914:	b2da      	uxtb	r2, r3
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	701a      	strb	r2, [r3, #0]
      i++;
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	3301      	adds	r3, #1
 800591e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	3301      	adds	r3, #1
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005926:	8bfb      	ldrh	r3, [r7, #30]
 8005928:	3b01      	subs	r3, #1
 800592a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800592c:	8bfb      	ldrh	r3, [r7, #30]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1ea      	bne.n	8005908 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005934:	4618      	mov	r0, r3
 8005936:	372c      	adds	r7, #44	; 0x2c
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d12c      	bne.n	80059b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	db12      	blt.n	8005994 <USB_EPSetStall+0x54>
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00f      	beq.n	8005994 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	440a      	add	r2, r1
 800598a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005992:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	0151      	lsls	r1, r2, #5
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	440a      	add	r2, r1
 80059aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	e02b      	b.n	8005a0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	db12      	blt.n	80059ee <USB_EPSetStall+0xae>
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00f      	beq.n	80059ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	0151      	lsls	r1, r2, #5
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	440a      	add	r2, r1
 8005a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	785b      	ldrb	r3, [r3, #1]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d128      	bne.n	8005a8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	0151      	lsls	r1, r2, #5
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	440a      	add	r2, r1
 8005a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	791b      	ldrb	r3, [r3, #4]
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d003      	beq.n	8005a68 <USB_EPClearStall+0x4c>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	791b      	ldrb	r3, [r3, #4]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d138      	bne.n	8005ada <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	0151      	lsls	r1, r2, #5
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	e027      	b.n	8005ada <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	0151      	lsls	r1, r2, #5
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	440a      	add	r2, r1
 8005aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005aa8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	791b      	ldrb	r3, [r3, #4]
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d003      	beq.n	8005aba <USB_EPClearStall+0x9e>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	791b      	ldrb	r3, [r3, #4]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d10f      	bne.n	8005ada <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	0151      	lsls	r1, r2, #5
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	440a      	add	r2, r1
 8005ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	011b      	lsls	r3, r3, #4
 8005b18:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b1c:	68f9      	ldr	r1, [r7, #12]
 8005b1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b22:	4313      	orrs	r3, r2
 8005b24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b62:	f023 0302 	bic.w	r3, r3, #2
 8005b66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b085      	sub	sp, #20
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b90:	f023 0303 	bic.w	r3, r3, #3
 8005b94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ba4:	f043 0302 	orr.w	r3, r3, #2
 8005ba8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b085      	sub	sp, #20
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	0c1b      	lsrs	r3, r3, #16
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b085      	sub	sp, #20
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	4013      	ands	r3, r2
 8005c34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	b29b      	uxth	r3, r3
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	460b      	mov	r3, r1
 8005c50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c56:	78fb      	ldrb	r3, [r7, #3]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	4013      	ands	r3, r2
 8005c72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c74:	68bb      	ldr	r3, [r7, #8]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b087      	sub	sp, #28
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb2:	01db      	lsls	r3, r3, #7
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	f003 0301 	and.w	r3, r3, #1
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d18:	f023 0307 	bic.w	r3, r3, #7
 8005d1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	333c      	adds	r3, #60	; 0x3c
 8005d56:	3304      	adds	r3, #4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	4a26      	ldr	r2, [pc, #152]	; (8005df8 <USB_EP0_OutStart+0xb8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d90a      	bls.n	8005d7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d74:	d101      	bne.n	8005d7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	e037      	b.n	8005dea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d80:	461a      	mov	r2, r3
 8005d82:	2300      	movs	r3, #0
 8005d84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da8:	f043 0318 	orr.w	r3, r3, #24
 8005dac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dbc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005dc0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005dc2:	7afb      	ldrb	r3, [r7, #11]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d10f      	bne.n	8005de8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dce:	461a      	mov	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005de6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	4f54300a 	.word	0x4f54300a

08005dfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4a13      	ldr	r2, [pc, #76]	; (8005e60 <USB_CoreReset+0x64>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d901      	bls.n	8005e1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e01b      	b.n	8005e52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	daf2      	bge.n	8005e08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f043 0201 	orr.w	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3301      	adds	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4a09      	ldr	r2, [pc, #36]	; (8005e60 <USB_CoreReset+0x64>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d901      	bls.n	8005e44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e006      	b.n	8005e52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d0f0      	beq.n	8005e32 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	00030d40 	.word	0x00030d40

08005e64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e74:	f002 fccc 	bl	8008810 <USBD_static_malloc>
 8005e78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d109      	bne.n	8005e94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	32b0      	adds	r2, #176	; 0xb0
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005e90:	2302      	movs	r3, #2
 8005e92:	e0d4      	b.n	800603e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005e94:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005e98:	2100      	movs	r1, #0
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f002 fd2e 	bl	80088fc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	32b0      	adds	r2, #176	; 0xb0
 8005eaa:	68f9      	ldr	r1, [r7, #12]
 8005eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	32b0      	adds	r2, #176	; 0xb0
 8005eba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	7c1b      	ldrb	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d138      	bne.n	8005f3e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ecc:	4b5e      	ldr	r3, [pc, #376]	; (8006048 <USBD_CDC_Init+0x1e4>)
 8005ece:	7819      	ldrb	r1, [r3, #0]
 8005ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f002 fb77 	bl	80085ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005edc:	4b5a      	ldr	r3, [pc, #360]	; (8006048 <USBD_CDC_Init+0x1e4>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	f003 020f 	and.w	r2, r3, #15
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	440b      	add	r3, r1
 8005ef0:	3324      	adds	r3, #36	; 0x24
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ef6:	4b55      	ldr	r3, [pc, #340]	; (800604c <USBD_CDC_Init+0x1e8>)
 8005ef8:	7819      	ldrb	r1, [r3, #0]
 8005efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005efe:	2202      	movs	r2, #2
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f002 fb62 	bl	80085ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f06:	4b51      	ldr	r3, [pc, #324]	; (800604c <USBD_CDC_Init+0x1e8>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	f003 020f 	and.w	r2, r3, #15
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	440b      	add	r3, r1
 8005f1a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f1e:	2201      	movs	r2, #1
 8005f20:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f22:	4b4b      	ldr	r3, [pc, #300]	; (8006050 <USBD_CDC_Init+0x1ec>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	f003 020f 	and.w	r2, r3, #15
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	3326      	adds	r3, #38	; 0x26
 8005f38:	2210      	movs	r2, #16
 8005f3a:	801a      	strh	r2, [r3, #0]
 8005f3c:	e035      	b.n	8005faa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f3e:	4b42      	ldr	r3, [pc, #264]	; (8006048 <USBD_CDC_Init+0x1e4>)
 8005f40:	7819      	ldrb	r1, [r3, #0]
 8005f42:	2340      	movs	r3, #64	; 0x40
 8005f44:	2202      	movs	r2, #2
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f002 fb3f 	bl	80085ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f4c:	4b3e      	ldr	r3, [pc, #248]	; (8006048 <USBD_CDC_Init+0x1e4>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	f003 020f 	and.w	r2, r3, #15
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	440b      	add	r3, r1
 8005f60:	3324      	adds	r3, #36	; 0x24
 8005f62:	2201      	movs	r2, #1
 8005f64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f66:	4b39      	ldr	r3, [pc, #228]	; (800604c <USBD_CDC_Init+0x1e8>)
 8005f68:	7819      	ldrb	r1, [r3, #0]
 8005f6a:	2340      	movs	r3, #64	; 0x40
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f002 fb2b 	bl	80085ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f74:	4b35      	ldr	r3, [pc, #212]	; (800604c <USBD_CDC_Init+0x1e8>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	f003 020f 	and.w	r2, r3, #15
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	440b      	add	r3, r1
 8005f88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005f90:	4b2f      	ldr	r3, [pc, #188]	; (8006050 <USBD_CDC_Init+0x1ec>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f003 020f 	and.w	r2, r3, #15
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	3326      	adds	r3, #38	; 0x26
 8005fa6:	2210      	movs	r2, #16
 8005fa8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005faa:	4b29      	ldr	r3, [pc, #164]	; (8006050 <USBD_CDC_Init+0x1ec>)
 8005fac:	7819      	ldrb	r1, [r3, #0]
 8005fae:	2308      	movs	r3, #8
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f002 fb09 	bl	80085ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005fb8:	4b25      	ldr	r3, [pc, #148]	; (8006050 <USBD_CDC_Init+0x1ec>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	f003 020f 	and.w	r2, r3, #15
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	440b      	add	r3, r1
 8005fcc:	3324      	adds	r3, #36	; 0x24
 8005fce:	2201      	movs	r2, #1
 8005fd0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	33b0      	adds	r3, #176	; 0xb0
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006008:	2302      	movs	r3, #2
 800600a:	e018      	b.n	800603e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	7c1b      	ldrb	r3, [r3, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10a      	bne.n	800602a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006014:	4b0d      	ldr	r3, [pc, #52]	; (800604c <USBD_CDC_Init+0x1e8>)
 8006016:	7819      	ldrb	r1, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800601e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f002 fbc0 	bl	80087a8 <USBD_LL_PrepareReceive>
 8006028:	e008      	b.n	800603c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800602a:	4b08      	ldr	r3, [pc, #32]	; (800604c <USBD_CDC_Init+0x1e8>)
 800602c:	7819      	ldrb	r1, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006034:	2340      	movs	r3, #64	; 0x40
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f002 fbb6 	bl	80087a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000093 	.word	0x20000093
 800604c:	20000094 	.word	0x20000094
 8006050:	20000095 	.word	0x20000095

08006054 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006060:	4b3a      	ldr	r3, [pc, #232]	; (800614c <USBD_CDC_DeInit+0xf8>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f002 fad5 	bl	8008616 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800606c:	4b37      	ldr	r3, [pc, #220]	; (800614c <USBD_CDC_DeInit+0xf8>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	f003 020f 	and.w	r2, r3, #15
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	3324      	adds	r3, #36	; 0x24
 8006082:	2200      	movs	r2, #0
 8006084:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006086:	4b32      	ldr	r3, [pc, #200]	; (8006150 <USBD_CDC_DeInit+0xfc>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f002 fac2 	bl	8008616 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006092:	4b2f      	ldr	r3, [pc, #188]	; (8006150 <USBD_CDC_DeInit+0xfc>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	f003 020f 	and.w	r2, r3, #15
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060aa:	2200      	movs	r2, #0
 80060ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80060ae:	4b29      	ldr	r3, [pc, #164]	; (8006154 <USBD_CDC_DeInit+0x100>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f002 faae 	bl	8008616 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80060ba:	4b26      	ldr	r3, [pc, #152]	; (8006154 <USBD_CDC_DeInit+0x100>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	f003 020f 	and.w	r2, r3, #15
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	440b      	add	r3, r1
 80060ce:	3324      	adds	r3, #36	; 0x24
 80060d0:	2200      	movs	r2, #0
 80060d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80060d4:	4b1f      	ldr	r3, [pc, #124]	; (8006154 <USBD_CDC_DeInit+0x100>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	f003 020f 	and.w	r2, r3, #15
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	440b      	add	r3, r1
 80060e8:	3326      	adds	r3, #38	; 0x26
 80060ea:	2200      	movs	r2, #0
 80060ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	32b0      	adds	r2, #176	; 0xb0
 80060f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d01f      	beq.n	8006140 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	33b0      	adds	r3, #176	; 0xb0
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	32b0      	adds	r2, #176	; 0xb0
 800611e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006122:	4618      	mov	r0, r3
 8006124:	f002 fb82 	bl	800882c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	32b0      	adds	r2, #176	; 0xb0
 8006132:	2100      	movs	r1, #0
 8006134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	20000093 	.word	0x20000093
 8006150:	20000094 	.word	0x20000094
 8006154:	20000095 	.word	0x20000095

08006158 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	32b0      	adds	r2, #176	; 0xb0
 800616c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006170:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006184:	2303      	movs	r3, #3
 8006186:	e0bf      	b.n	8006308 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006190:	2b00      	cmp	r3, #0
 8006192:	d050      	beq.n	8006236 <USBD_CDC_Setup+0xde>
 8006194:	2b20      	cmp	r3, #32
 8006196:	f040 80af 	bne.w	80062f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	88db      	ldrh	r3, [r3, #6]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d03a      	beq.n	8006218 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	b25b      	sxtb	r3, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	da1b      	bge.n	80061e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	33b0      	adds	r3, #176	; 0xb0
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80061c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	88d2      	ldrh	r2, [r2, #6]
 80061c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	88db      	ldrh	r3, [r3, #6]
 80061ce:	2b07      	cmp	r3, #7
 80061d0:	bf28      	it	cs
 80061d2:	2307      	movcs	r3, #7
 80061d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	89fa      	ldrh	r2, [r7, #14]
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 fd89 	bl	8007cf4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80061e2:	e090      	b.n	8006306 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	785a      	ldrb	r2, [r3, #1]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	88db      	ldrh	r3, [r3, #6]
 80061f2:	2b3f      	cmp	r3, #63	; 0x3f
 80061f4:	d803      	bhi.n	80061fe <USBD_CDC_Setup+0xa6>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	88db      	ldrh	r3, [r3, #6]
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	e000      	b.n	8006200 <USBD_CDC_Setup+0xa8>
 80061fe:	2240      	movs	r2, #64	; 0x40
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006206:	6939      	ldr	r1, [r7, #16]
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800620e:	461a      	mov	r2, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f001 fd9b 	bl	8007d4c <USBD_CtlPrepareRx>
      break;
 8006216:	e076      	b.n	8006306 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	33b0      	adds	r3, #176	; 0xb0
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	7850      	ldrb	r0, [r2, #1]
 800622e:	2200      	movs	r2, #0
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	4798      	blx	r3
      break;
 8006234:	e067      	b.n	8006306 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	785b      	ldrb	r3, [r3, #1]
 800623a:	2b0b      	cmp	r3, #11
 800623c:	d851      	bhi.n	80062e2 <USBD_CDC_Setup+0x18a>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <USBD_CDC_Setup+0xec>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006275 	.word	0x08006275
 8006248:	080062f1 	.word	0x080062f1
 800624c:	080062e3 	.word	0x080062e3
 8006250:	080062e3 	.word	0x080062e3
 8006254:	080062e3 	.word	0x080062e3
 8006258:	080062e3 	.word	0x080062e3
 800625c:	080062e3 	.word	0x080062e3
 8006260:	080062e3 	.word	0x080062e3
 8006264:	080062e3 	.word	0x080062e3
 8006268:	080062e3 	.word	0x080062e3
 800626c:	0800629f 	.word	0x0800629f
 8006270:	080062c9 	.word	0x080062c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b03      	cmp	r3, #3
 800627e:	d107      	bne.n	8006290 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006280:	f107 030a 	add.w	r3, r7, #10
 8006284:	2202      	movs	r2, #2
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f001 fd33 	bl	8007cf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800628e:	e032      	b.n	80062f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f001 fcbd 	bl	8007c12 <USBD_CtlError>
            ret = USBD_FAIL;
 8006298:	2303      	movs	r3, #3
 800629a:	75fb      	strb	r3, [r7, #23]
          break;
 800629c:	e02b      	b.n	80062f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d107      	bne.n	80062ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80062aa:	f107 030d 	add.w	r3, r7, #13
 80062ae:	2201      	movs	r2, #1
 80062b0:	4619      	mov	r1, r3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f001 fd1e 	bl	8007cf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062b8:	e01d      	b.n	80062f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 fca8 	bl	8007c12 <USBD_CtlError>
            ret = USBD_FAIL;
 80062c2:	2303      	movs	r3, #3
 80062c4:	75fb      	strb	r3, [r7, #23]
          break;
 80062c6:	e016      	b.n	80062f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d00f      	beq.n	80062f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f001 fc9b 	bl	8007c12 <USBD_CtlError>
            ret = USBD_FAIL;
 80062dc:	2303      	movs	r3, #3
 80062de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80062e0:	e008      	b.n	80062f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f001 fc94 	bl	8007c12 <USBD_CtlError>
          ret = USBD_FAIL;
 80062ea:	2303      	movs	r3, #3
 80062ec:	75fb      	strb	r3, [r7, #23]
          break;
 80062ee:	e002      	b.n	80062f6 <USBD_CDC_Setup+0x19e>
          break;
 80062f0:	bf00      	nop
 80062f2:	e008      	b.n	8006306 <USBD_CDC_Setup+0x1ae>
          break;
 80062f4:	bf00      	nop
      }
      break;
 80062f6:	e006      	b.n	8006306 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f001 fc89 	bl	8007c12 <USBD_CtlError>
      ret = USBD_FAIL;
 8006300:	2303      	movs	r3, #3
 8006302:	75fb      	strb	r3, [r7, #23]
      break;
 8006304:	bf00      	nop
  }

  return (uint8_t)ret;
 8006306:	7dfb      	ldrb	r3, [r7, #23]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006322:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	32b0      	adds	r2, #176	; 0xb0
 800632e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006336:	2303      	movs	r3, #3
 8006338:	e065      	b.n	8006406 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	32b0      	adds	r2, #176	; 0xb0
 8006344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006348:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800634a:	78fb      	ldrb	r3, [r7, #3]
 800634c:	f003 020f 	and.w	r2, r3, #15
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	4613      	mov	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	440b      	add	r3, r1
 800635c:	3318      	adds	r3, #24
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d02f      	beq.n	80063c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	f003 020f 	and.w	r2, r3, #15
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	4613      	mov	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	3318      	adds	r3, #24
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	78fb      	ldrb	r3, [r7, #3]
 800637c:	f003 010f 	and.w	r1, r3, #15
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	460b      	mov	r3, r1
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	440b      	add	r3, r1
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4403      	add	r3, r0
 800638c:	3348      	adds	r3, #72	; 0x48
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	fbb2 f1f3 	udiv	r1, r2, r3
 8006394:	fb01 f303 	mul.w	r3, r1, r3
 8006398:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800639a:	2b00      	cmp	r3, #0
 800639c:	d112      	bne.n	80063c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	f003 020f 	and.w	r2, r3, #15
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	440b      	add	r3, r1
 80063b0:	3318      	adds	r3, #24
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063b6:	78f9      	ldrb	r1, [r7, #3]
 80063b8:	2300      	movs	r3, #0
 80063ba:	2200      	movs	r2, #0
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f002 f9d2 	bl	8008766 <USBD_LL_Transmit>
 80063c2:	e01f      	b.n	8006404 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	33b0      	adds	r3, #176	; 0xb0
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d010      	beq.n	8006404 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	33b0      	adds	r3, #176	; 0xb0
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006400:	78fa      	ldrb	r2, [r7, #3]
 8006402:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	460b      	mov	r3, r1
 8006418:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	32b0      	adds	r2, #176	; 0xb0
 8006424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006428:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	32b0      	adds	r2, #176	; 0xb0
 8006434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800643c:	2303      	movs	r3, #3
 800643e:	e01a      	b.n	8006476 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f002 f9d0 	bl	80087ea <USBD_LL_GetRxDataSize>
 800644a:	4602      	mov	r2, r0
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	33b0      	adds	r3, #176	; 0xb0
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006470:	4611      	mov	r1, r2
 8006472:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	32b0      	adds	r2, #176	; 0xb0
 8006490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006494:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800649c:	2303      	movs	r3, #3
 800649e:	e025      	b.n	80064ec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	33b0      	adds	r3, #176	; 0xb0
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01a      	beq.n	80064ea <USBD_CDC_EP0_RxReady+0x6c>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80064ba:	2bff      	cmp	r3, #255	; 0xff
 80064bc:	d015      	beq.n	80064ea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	33b0      	adds	r3, #176	; 0xb0
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80064d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80064de:	b292      	uxth	r2, r2
 80064e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	22ff      	movs	r2, #255	; 0xff
 80064e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064fc:	2182      	movs	r1, #130	; 0x82
 80064fe:	4818      	ldr	r0, [pc, #96]	; (8006560 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006500:	f000 fd4f 	bl	8006fa2 <USBD_GetEpDesc>
 8006504:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006506:	2101      	movs	r1, #1
 8006508:	4815      	ldr	r0, [pc, #84]	; (8006560 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800650a:	f000 fd4a 	bl	8006fa2 <USBD_GetEpDesc>
 800650e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006510:	2181      	movs	r1, #129	; 0x81
 8006512:	4813      	ldr	r0, [pc, #76]	; (8006560 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006514:	f000 fd45 	bl	8006fa2 <USBD_GetEpDesc>
 8006518:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2210      	movs	r2, #16
 8006524:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d006      	beq.n	800653a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	2200      	movs	r2, #0
 8006530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006534:	711a      	strb	r2, [r3, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d006      	beq.n	800654e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006548:	711a      	strb	r2, [r3, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2243      	movs	r2, #67	; 0x43
 8006552:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006554:	4b02      	ldr	r3, [pc, #8]	; (8006560 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20000050 	.word	0x20000050

08006564 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800656c:	2182      	movs	r1, #130	; 0x82
 800656e:	4818      	ldr	r0, [pc, #96]	; (80065d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006570:	f000 fd17 	bl	8006fa2 <USBD_GetEpDesc>
 8006574:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006576:	2101      	movs	r1, #1
 8006578:	4815      	ldr	r0, [pc, #84]	; (80065d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800657a:	f000 fd12 	bl	8006fa2 <USBD_GetEpDesc>
 800657e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006580:	2181      	movs	r1, #129	; 0x81
 8006582:	4813      	ldr	r0, [pc, #76]	; (80065d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006584:	f000 fd0d 	bl	8006fa2 <USBD_GetEpDesc>
 8006588:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2210      	movs	r2, #16
 8006594:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d006      	beq.n	80065aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	2200      	movs	r2, #0
 80065a0:	711a      	strb	r2, [r3, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f042 0202 	orr.w	r2, r2, #2
 80065a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d006      	beq.n	80065be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	711a      	strb	r2, [r3, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f042 0202 	orr.w	r2, r2, #2
 80065bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2243      	movs	r2, #67	; 0x43
 80065c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065c4:	4b02      	ldr	r3, [pc, #8]	; (80065d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000050 	.word	0x20000050

080065d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065dc:	2182      	movs	r1, #130	; 0x82
 80065de:	4818      	ldr	r0, [pc, #96]	; (8006640 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065e0:	f000 fcdf 	bl	8006fa2 <USBD_GetEpDesc>
 80065e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065e6:	2101      	movs	r1, #1
 80065e8:	4815      	ldr	r0, [pc, #84]	; (8006640 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065ea:	f000 fcda 	bl	8006fa2 <USBD_GetEpDesc>
 80065ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065f0:	2181      	movs	r1, #129	; 0x81
 80065f2:	4813      	ldr	r0, [pc, #76]	; (8006640 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065f4:	f000 fcd5 	bl	8006fa2 <USBD_GetEpDesc>
 80065f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2210      	movs	r2, #16
 8006604:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d006      	beq.n	800661a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	2200      	movs	r2, #0
 8006610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006614:	711a      	strb	r2, [r3, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d006      	beq.n	800662e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006628:	711a      	strb	r2, [r3, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2243      	movs	r2, #67	; 0x43
 8006632:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006634:	4b02      	ldr	r3, [pc, #8]	; (8006640 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000050 	.word	0x20000050

08006644 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	220a      	movs	r2, #10
 8006650:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006652:	4b03      	ldr	r3, [pc, #12]	; (8006660 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	2000000c 	.word	0x2000000c

08006664 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006674:	2303      	movs	r3, #3
 8006676:	e009      	b.n	800668c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	33b0      	adds	r3, #176	; 0xb0
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	32b0      	adds	r2, #176	; 0xb0
 80066ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e008      	b.n	80066d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	371c      	adds	r7, #28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	32b0      	adds	r2, #176	; 0xb0
 80066f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e004      	b.n	800670a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
	...

08006718 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	32b0      	adds	r2, #176	; 0xb0
 800672a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006730:	2301      	movs	r3, #1
 8006732:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	32b0      	adds	r2, #176	; 0xb0
 800673e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006746:	2303      	movs	r3, #3
 8006748:	e025      	b.n	8006796 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006750:	2b00      	cmp	r3, #0
 8006752:	d11f      	bne.n	8006794 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2201      	movs	r2, #1
 8006758:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800675c:	4b10      	ldr	r3, [pc, #64]	; (80067a0 <USBD_CDC_TransmitPacket+0x88>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	f003 020f 	and.w	r2, r3, #15
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4613      	mov	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4403      	add	r3, r0
 8006776:	3318      	adds	r3, #24
 8006778:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800677a:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <USBD_CDC_TransmitPacket+0x88>)
 800677c:	7819      	ldrb	r1, [r3, #0]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f001 ffeb 	bl	8008766 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006794:	7bfb      	ldrb	r3, [r7, #15]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	20000093 	.word	0x20000093

080067a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	32b0      	adds	r2, #176	; 0xb0
 80067b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	32b0      	adds	r2, #176	; 0xb0
 80067c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e018      	b.n	8006804 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	7c1b      	ldrb	r3, [r3, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10a      	bne.n	80067f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067da:	4b0c      	ldr	r3, [pc, #48]	; (800680c <USBD_CDC_ReceivePacket+0x68>)
 80067dc:	7819      	ldrb	r1, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f001 ffdd 	bl	80087a8 <USBD_LL_PrepareReceive>
 80067ee:	e008      	b.n	8006802 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067f0:	4b06      	ldr	r3, [pc, #24]	; (800680c <USBD_CDC_ReceivePacket+0x68>)
 80067f2:	7819      	ldrb	r1, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067fa:	2340      	movs	r3, #64	; 0x40
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 ffd3 	bl	80087a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20000094 	.word	0x20000094

08006810 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	4613      	mov	r3, r2
 800681c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006824:	2303      	movs	r3, #3
 8006826:	e01f      	b.n	8006868 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	79fa      	ldrb	r2, [r7, #7]
 800685a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f001 fe4d 	bl	80084fc <USBD_LL_Init>
 8006862:	4603      	mov	r3, r0
 8006864:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006866:	7dfb      	ldrb	r3, [r7, #23]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3718      	adds	r7, #24
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006884:	2303      	movs	r3, #3
 8006886:	e025      	b.n	80068d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	32ae      	adds	r2, #174	; 0xae
 800689a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00f      	beq.n	80068c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	32ae      	adds	r2, #174	; 0xae
 80068ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	f107 020e 	add.w	r2, r7, #14
 80068b8:	4610      	mov	r0, r2
 80068ba:	4798      	blx	r3
 80068bc:	4602      	mov	r2, r0
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 fe55 	bl	8008594 <USBD_LL_Start>
 80068ea:	4603      	mov	r3, r0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	460b      	mov	r3, r1
 8006914:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d009      	beq.n	8006938 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	78fa      	ldrb	r2, [r7, #3]
 800692e:	4611      	mov	r1, r2
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
 8006934:	4603      	mov	r3, r0
 8006936:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006938:	7bfb      	ldrb	r3, [r7, #15]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	460b      	mov	r3, r1
 800694c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	78fa      	ldrb	r2, [r7, #3]
 800695c:	4611      	mov	r1, r2
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	4798      	blx	r3
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006968:	2303      	movs	r3, #3
 800696a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800696c:	7bfb      	ldrb	r3, [r7, #15]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	4618      	mov	r0, r3
 800698a:	f001 f908 	bl	8007b9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800699c:	461a      	mov	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069aa:	f003 031f 	and.w	r3, r3, #31
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d01a      	beq.n	80069e8 <USBD_LL_SetupStage+0x72>
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d822      	bhi.n	80069fc <USBD_LL_SetupStage+0x86>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d002      	beq.n	80069c0 <USBD_LL_SetupStage+0x4a>
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d00a      	beq.n	80069d4 <USBD_LL_SetupStage+0x5e>
 80069be:	e01d      	b.n	80069fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fb5f 	bl	800708c <USBD_StdDevReq>
 80069ce:	4603      	mov	r3, r0
 80069d0:	73fb      	strb	r3, [r7, #15]
      break;
 80069d2:	e020      	b.n	8006a16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fbc7 	bl	8007170 <USBD_StdItfReq>
 80069e2:	4603      	mov	r3, r0
 80069e4:	73fb      	strb	r3, [r7, #15]
      break;
 80069e6:	e016      	b.n	8006a16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fc29 	bl	8007248 <USBD_StdEPReq>
 80069f6:	4603      	mov	r3, r0
 80069f8:	73fb      	strb	r3, [r7, #15]
      break;
 80069fa:	e00c      	b.n	8006a16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f001 fe22 	bl	8008654 <USBD_LL_StallEP>
 8006a10:	4603      	mov	r3, r0
 8006a12:	73fb      	strb	r3, [r7, #15]
      break;
 8006a14:	bf00      	nop
  }

  return ret;
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006a32:	7afb      	ldrb	r3, [r7, #11]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d16e      	bne.n	8006b16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	f040 8098 	bne.w	8006b7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d913      	bls.n	8006a80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	1ad2      	subs	r2, r2, r3
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	bf28      	it	cs
 8006a72:	4613      	movcs	r3, r2
 8006a74:	461a      	mov	r2, r3
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f001 f984 	bl	8007d86 <USBD_CtlContinueRx>
 8006a7e:	e07d      	b.n	8006b7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a86:	f003 031f 	and.w	r3, r3, #31
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d014      	beq.n	8006ab8 <USBD_LL_DataOutStage+0x98>
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d81d      	bhi.n	8006ace <USBD_LL_DataOutStage+0xae>
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d002      	beq.n	8006a9c <USBD_LL_DataOutStage+0x7c>
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d003      	beq.n	8006aa2 <USBD_LL_DataOutStage+0x82>
 8006a9a:	e018      	b.n	8006ace <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	75bb      	strb	r3, [r7, #22]
            break;
 8006aa0:	e018      	b.n	8006ad4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	4619      	mov	r1, r3
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 fa5e 	bl	8006f6e <USBD_CoreFindIF>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	75bb      	strb	r3, [r7, #22]
            break;
 8006ab6:	e00d      	b.n	8006ad4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 fa60 	bl	8006f88 <USBD_CoreFindEP>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	75bb      	strb	r3, [r7, #22]
            break;
 8006acc:	e002      	b.n	8006ad4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	75bb      	strb	r3, [r7, #22]
            break;
 8006ad2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006ad4:	7dbb      	ldrb	r3, [r7, #22]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d119      	bne.n	8006b0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	d113      	bne.n	8006b0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006ae6:	7dba      	ldrb	r2, [r7, #22]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	32ae      	adds	r2, #174	; 0xae
 8006aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00b      	beq.n	8006b0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006af6:	7dba      	ldrb	r2, [r7, #22]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006afe:	7dba      	ldrb	r2, [r7, #22]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	32ae      	adds	r2, #174	; 0xae
 8006b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f001 f94a 	bl	8007da8 <USBD_CtlSendStatus>
 8006b14:	e032      	b.n	8006b7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b16:	7afb      	ldrb	r3, [r7, #11]
 8006b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	4619      	mov	r1, r3
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 fa31 	bl	8006f88 <USBD_CoreFindEP>
 8006b26:	4603      	mov	r3, r0
 8006b28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b2a:	7dbb      	ldrb	r3, [r7, #22]
 8006b2c:	2bff      	cmp	r3, #255	; 0xff
 8006b2e:	d025      	beq.n	8006b7c <USBD_LL_DataOutStage+0x15c>
 8006b30:	7dbb      	ldrb	r3, [r7, #22]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d122      	bne.n	8006b7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d117      	bne.n	8006b72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006b42:	7dba      	ldrb	r2, [r7, #22]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	32ae      	adds	r2, #174	; 0xae
 8006b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00f      	beq.n	8006b72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006b52:	7dba      	ldrb	r2, [r7, #22]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006b5a:	7dba      	ldrb	r2, [r7, #22]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	32ae      	adds	r2, #174	; 0xae
 8006b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	7afa      	ldrb	r2, [r7, #11]
 8006b68:	4611      	mov	r1, r2
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	4798      	blx	r3
 8006b6e:	4603      	mov	r3, r0
 8006b70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006b72:	7dfb      	ldrb	r3, [r7, #23]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006b78:	7dfb      	ldrb	r3, [r7, #23]
 8006b7a:	e000      	b.n	8006b7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b086      	sub	sp, #24
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	607a      	str	r2, [r7, #4]
 8006b92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006b94:	7afb      	ldrb	r3, [r7, #11]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d16f      	bne.n	8006c7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3314      	adds	r3, #20
 8006b9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d15a      	bne.n	8006c60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d914      	bls.n	8006be0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	1ad2      	subs	r2, r2, r3
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	6879      	ldr	r1, [r7, #4]
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f001 f8ac 	bl	8007d2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f001 fde5 	bl	80087a8 <USBD_LL_PrepareReceive>
 8006bde:	e03f      	b.n	8006c60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	68da      	ldr	r2, [r3, #12]
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d11c      	bne.n	8006c26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d316      	bcc.n	8006c26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d20f      	bcs.n	8006c26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c06:	2200      	movs	r2, #0
 8006c08:	2100      	movs	r1, #0
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f001 f88d 	bl	8007d2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f001 fdc2 	bl	80087a8 <USBD_LL_PrepareReceive>
 8006c24:	e01c      	b.n	8006c60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d10f      	bne.n	8006c52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d009      	beq.n	8006c52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c52:	2180      	movs	r1, #128	; 0x80
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f001 fcfd 	bl	8008654 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f001 f8b7 	bl	8007dce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d03a      	beq.n	8006ce0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f7ff fe42 	bl	80068f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c78:	e032      	b.n	8006ce0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006c7a:	7afb      	ldrb	r3, [r7, #11]
 8006c7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	4619      	mov	r1, r3
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 f97f 	bl	8006f88 <USBD_CoreFindEP>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	2bff      	cmp	r3, #255	; 0xff
 8006c92:	d025      	beq.n	8006ce0 <USBD_LL_DataInStage+0x15a>
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d122      	bne.n	8006ce0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d11c      	bne.n	8006ce0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ca6:	7dfa      	ldrb	r2, [r7, #23]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	32ae      	adds	r2, #174	; 0xae
 8006cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d014      	beq.n	8006ce0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006cb6:	7dfa      	ldrb	r2, [r7, #23]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006cbe:	7dfa      	ldrb	r2, [r7, #23]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	32ae      	adds	r2, #174	; 0xae
 8006cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	7afa      	ldrb	r2, [r7, #11]
 8006ccc:	4611      	mov	r1, r2
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	4798      	blx	r3
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006cd6:	7dbb      	ldrb	r3, [r7, #22]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006cdc:	7dbb      	ldrb	r3, [r7, #22]
 8006cde:	e000      	b.n	8006ce2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d014      	beq.n	8006d50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00e      	beq.n	8006d50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6852      	ldr	r2, [r2, #4]
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	4611      	mov	r1, r2
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	4798      	blx	r3
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d50:	2340      	movs	r3, #64	; 0x40
 8006d52:	2200      	movs	r2, #0
 8006d54:	2100      	movs	r1, #0
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fc37 	bl	80085ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2240      	movs	r2, #64	; 0x40
 8006d68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d6c:	2340      	movs	r3, #64	; 0x40
 8006d6e:	2200      	movs	r2, #0
 8006d70:	2180      	movs	r1, #128	; 0x80
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 fc29 	bl	80085ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2240      	movs	r2, #64	; 0x40
 8006d82:	621a      	str	r2, [r3, #32]

  return ret;
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	460b      	mov	r3, r1
 8006d98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	78fa      	ldrb	r2, [r7, #3]
 8006d9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2204      	movs	r2, #4
 8006dc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b04      	cmp	r3, #4
 8006dec:	d106      	bne.n	8006dfc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b082      	sub	sp, #8
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d110      	bne.n	8006e40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b082      	sub	sp, #8
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	460b      	mov	r3, r1
 8006e54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	32ae      	adds	r2, #174	; 0xae
 8006e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e01c      	b.n	8006ea6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d115      	bne.n	8006ea4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	32ae      	adds	r2, #174	; 0xae
 8006e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00b      	beq.n	8006ea4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	32ae      	adds	r2, #174	; 0xae
 8006e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	78fa      	ldrb	r2, [r7, #3]
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b082      	sub	sp, #8
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	32ae      	adds	r2, #174	; 0xae
 8006ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e01c      	b.n	8006f0a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d115      	bne.n	8006f08 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	32ae      	adds	r2, #174	; 0xae
 8006ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00b      	beq.n	8006f08 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	32ae      	adds	r2, #174	; 0xae
 8006efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	78fa      	ldrb	r2, [r7, #3]
 8006f02:	4611      	mov	r1, r2
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00e      	beq.n	8006f64 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	6852      	ldr	r2, [r2, #4]
 8006f52:	b2d2      	uxtb	r2, r2
 8006f54:	4611      	mov	r1, r2
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	4798      	blx	r3
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006f60:	2303      	movs	r3, #3
 8006f62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	460b      	mov	r3, r1
 8006f78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b086      	sub	sp, #24
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	460b      	mov	r3, r1
 8006fac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	885b      	ldrh	r3, [r3, #2]
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d920      	bls.n	800700c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006fd2:	e013      	b.n	8006ffc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006fd4:	f107 030a 	add.w	r3, r7, #10
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6978      	ldr	r0, [r7, #20]
 8006fdc:	f000 f81b 	bl	8007016 <USBD_GetNextDesc>
 8006fe0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b05      	cmp	r3, #5
 8006fe8:	d108      	bne.n	8006ffc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	789b      	ldrb	r3, [r3, #2]
 8006ff2:	78fa      	ldrb	r2, [r7, #3]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d008      	beq.n	800700a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	885b      	ldrh	r3, [r3, #2]
 8007000:	b29a      	uxth	r2, r3
 8007002:	897b      	ldrh	r3, [r7, #10]
 8007004:	429a      	cmp	r2, r3
 8007006:	d8e5      	bhi.n	8006fd4 <USBD_GetEpDesc+0x32>
 8007008:	e000      	b.n	800700c <USBD_GetEpDesc+0x6a>
          break;
 800700a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800700c:	693b      	ldr	r3, [r7, #16]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007016:	b480      	push	{r7}
 8007018:	b085      	sub	sp, #20
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	881a      	ldrh	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	4413      	add	r3, r2
 8007030:	b29a      	uxth	r2, r3
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4413      	add	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007042:	68fb      	ldr	r3, [r7, #12]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	3301      	adds	r3, #1
 8007066:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800706e:	8a3b      	ldrh	r3, [r7, #16]
 8007070:	021b      	lsls	r3, r3, #8
 8007072:	b21a      	sxth	r2, r3
 8007074:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007078:	4313      	orrs	r3, r2
 800707a:	b21b      	sxth	r3, r3
 800707c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800707e:	89fb      	ldrh	r3, [r7, #14]
}
 8007080:	4618      	mov	r0, r3
 8007082:	371c      	adds	r7, #28
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070a2:	2b40      	cmp	r3, #64	; 0x40
 80070a4:	d005      	beq.n	80070b2 <USBD_StdDevReq+0x26>
 80070a6:	2b40      	cmp	r3, #64	; 0x40
 80070a8:	d857      	bhi.n	800715a <USBD_StdDevReq+0xce>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00f      	beq.n	80070ce <USBD_StdDevReq+0x42>
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	d153      	bne.n	800715a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	32ae      	adds	r2, #174	; 0xae
 80070bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	4798      	blx	r3
 80070c8:	4603      	mov	r3, r0
 80070ca:	73fb      	strb	r3, [r7, #15]
      break;
 80070cc:	e04a      	b.n	8007164 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	785b      	ldrb	r3, [r3, #1]
 80070d2:	2b09      	cmp	r3, #9
 80070d4:	d83b      	bhi.n	800714e <USBD_StdDevReq+0xc2>
 80070d6:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <USBD_StdDevReq+0x50>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	08007131 	.word	0x08007131
 80070e0:	08007145 	.word	0x08007145
 80070e4:	0800714f 	.word	0x0800714f
 80070e8:	0800713b 	.word	0x0800713b
 80070ec:	0800714f 	.word	0x0800714f
 80070f0:	0800710f 	.word	0x0800710f
 80070f4:	08007105 	.word	0x08007105
 80070f8:	0800714f 	.word	0x0800714f
 80070fc:	08007127 	.word	0x08007127
 8007100:	08007119 	.word	0x08007119
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fa3c 	bl	8007584 <USBD_GetDescriptor>
          break;
 800710c:	e024      	b.n	8007158 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fba1 	bl	8007858 <USBD_SetAddress>
          break;
 8007116:	e01f      	b.n	8007158 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fbe0 	bl	80078e0 <USBD_SetConfig>
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]
          break;
 8007124:	e018      	b.n	8007158 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fc83 	bl	8007a34 <USBD_GetConfig>
          break;
 800712e:	e013      	b.n	8007158 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fcb4 	bl	8007aa0 <USBD_GetStatus>
          break;
 8007138:	e00e      	b.n	8007158 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fce3 	bl	8007b08 <USBD_SetFeature>
          break;
 8007142:	e009      	b.n	8007158 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fd07 	bl	8007b5a <USBD_ClrFeature>
          break;
 800714c:	e004      	b.n	8007158 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fd5e 	bl	8007c12 <USBD_CtlError>
          break;
 8007156:	bf00      	nop
      }
      break;
 8007158:	e004      	b.n	8007164 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fd58 	bl	8007c12 <USBD_CtlError>
      break;
 8007162:	bf00      	nop
  }

  return ret;
 8007164:	7bfb      	ldrb	r3, [r7, #15]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop

08007170 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007186:	2b40      	cmp	r3, #64	; 0x40
 8007188:	d005      	beq.n	8007196 <USBD_StdItfReq+0x26>
 800718a:	2b40      	cmp	r3, #64	; 0x40
 800718c:	d852      	bhi.n	8007234 <USBD_StdItfReq+0xc4>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <USBD_StdItfReq+0x26>
 8007192:	2b20      	cmp	r3, #32
 8007194:	d14e      	bne.n	8007234 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800719c:	b2db      	uxtb	r3, r3
 800719e:	3b01      	subs	r3, #1
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d840      	bhi.n	8007226 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	889b      	ldrh	r3, [r3, #4]
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d836      	bhi.n	800721c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	889b      	ldrh	r3, [r3, #4]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7ff fed9 	bl	8006f6e <USBD_CoreFindIF>
 80071bc:	4603      	mov	r3, r0
 80071be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	2bff      	cmp	r3, #255	; 0xff
 80071c4:	d01d      	beq.n	8007202 <USBD_StdItfReq+0x92>
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d11a      	bne.n	8007202 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80071cc:	7bba      	ldrb	r2, [r7, #14]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	32ae      	adds	r2, #174	; 0xae
 80071d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00f      	beq.n	80071fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80071dc:	7bba      	ldrb	r2, [r7, #14]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80071e4:	7bba      	ldrb	r2, [r7, #14]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	32ae      	adds	r2, #174	; 0xae
 80071ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
 80071f6:	4603      	mov	r3, r0
 80071f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80071fa:	e004      	b.n	8007206 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80071fc:	2303      	movs	r3, #3
 80071fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007200:	e001      	b.n	8007206 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007202:	2303      	movs	r3, #3
 8007204:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	88db      	ldrh	r3, [r3, #6]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d110      	bne.n	8007230 <USBD_StdItfReq+0xc0>
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10d      	bne.n	8007230 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fdc7 	bl	8007da8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800721a:	e009      	b.n	8007230 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fcf7 	bl	8007c12 <USBD_CtlError>
          break;
 8007224:	e004      	b.n	8007230 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fcf2 	bl	8007c12 <USBD_CtlError>
          break;
 800722e:	e000      	b.n	8007232 <USBD_StdItfReq+0xc2>
          break;
 8007230:	bf00      	nop
      }
      break;
 8007232:	e004      	b.n	800723e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fceb 	bl	8007c12 <USBD_CtlError>
      break;
 800723c:	bf00      	nop
  }

  return ret;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	889b      	ldrh	r3, [r3, #4]
 800725a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007264:	2b40      	cmp	r3, #64	; 0x40
 8007266:	d007      	beq.n	8007278 <USBD_StdEPReq+0x30>
 8007268:	2b40      	cmp	r3, #64	; 0x40
 800726a:	f200 817f 	bhi.w	800756c <USBD_StdEPReq+0x324>
 800726e:	2b00      	cmp	r3, #0
 8007270:	d02a      	beq.n	80072c8 <USBD_StdEPReq+0x80>
 8007272:	2b20      	cmp	r3, #32
 8007274:	f040 817a 	bne.w	800756c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7ff fe83 	bl	8006f88 <USBD_CoreFindEP>
 8007282:	4603      	mov	r3, r0
 8007284:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007286:	7b7b      	ldrb	r3, [r7, #13]
 8007288:	2bff      	cmp	r3, #255	; 0xff
 800728a:	f000 8174 	beq.w	8007576 <USBD_StdEPReq+0x32e>
 800728e:	7b7b      	ldrb	r3, [r7, #13]
 8007290:	2b00      	cmp	r3, #0
 8007292:	f040 8170 	bne.w	8007576 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007296:	7b7a      	ldrb	r2, [r7, #13]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800729e:	7b7a      	ldrb	r2, [r7, #13]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	32ae      	adds	r2, #174	; 0xae
 80072a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 8163 	beq.w	8007576 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80072b0:	7b7a      	ldrb	r2, [r7, #13]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	32ae      	adds	r2, #174	; 0xae
 80072b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	4798      	blx	r3
 80072c2:	4603      	mov	r3, r0
 80072c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80072c6:	e156      	b.n	8007576 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	785b      	ldrb	r3, [r3, #1]
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d008      	beq.n	80072e2 <USBD_StdEPReq+0x9a>
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	f300 8145 	bgt.w	8007560 <USBD_StdEPReq+0x318>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 809b 	beq.w	8007412 <USBD_StdEPReq+0x1ca>
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d03c      	beq.n	800735a <USBD_StdEPReq+0x112>
 80072e0:	e13e      	b.n	8007560 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d002      	beq.n	80072f4 <USBD_StdEPReq+0xac>
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d016      	beq.n	8007320 <USBD_StdEPReq+0xd8>
 80072f2:	e02c      	b.n	800734e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00d      	beq.n	8007316 <USBD_StdEPReq+0xce>
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	2b80      	cmp	r3, #128	; 0x80
 80072fe:	d00a      	beq.n	8007316 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 f9a5 	bl	8008654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800730a:	2180      	movs	r1, #128	; 0x80
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f001 f9a1 	bl	8008654 <USBD_LL_StallEP>
 8007312:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007314:	e020      	b.n	8007358 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fc7a 	bl	8007c12 <USBD_CtlError>
              break;
 800731e:	e01b      	b.n	8007358 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	885b      	ldrh	r3, [r3, #2]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10e      	bne.n	8007346 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00b      	beq.n	8007346 <USBD_StdEPReq+0xfe>
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	2b80      	cmp	r3, #128	; 0x80
 8007332:	d008      	beq.n	8007346 <USBD_StdEPReq+0xfe>
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	88db      	ldrh	r3, [r3, #6]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d104      	bne.n	8007346 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 f987 	bl	8008654 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fd2e 	bl	8007da8 <USBD_CtlSendStatus>

              break;
 800734c:	e004      	b.n	8007358 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fc5e 	bl	8007c12 <USBD_CtlError>
              break;
 8007356:	bf00      	nop
          }
          break;
 8007358:	e107      	b.n	800756a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d002      	beq.n	800736c <USBD_StdEPReq+0x124>
 8007366:	2b03      	cmp	r3, #3
 8007368:	d016      	beq.n	8007398 <USBD_StdEPReq+0x150>
 800736a:	e04b      	b.n	8007404 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00d      	beq.n	800738e <USBD_StdEPReq+0x146>
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	2b80      	cmp	r3, #128	; 0x80
 8007376:	d00a      	beq.n	800738e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 f969 	bl	8008654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007382:	2180      	movs	r1, #128	; 0x80
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 f965 	bl	8008654 <USBD_LL_StallEP>
 800738a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800738c:	e040      	b.n	8007410 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fc3e 	bl	8007c12 <USBD_CtlError>
              break;
 8007396:	e03b      	b.n	8007410 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	885b      	ldrh	r3, [r3, #2]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d136      	bne.n	800740e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d004      	beq.n	80073b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 f96f 	bl	8008692 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fcf7 	bl	8007da8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff fde2 	bl	8006f88 <USBD_CoreFindEP>
 80073c4:	4603      	mov	r3, r0
 80073c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073c8:	7b7b      	ldrb	r3, [r7, #13]
 80073ca:	2bff      	cmp	r3, #255	; 0xff
 80073cc:	d01f      	beq.n	800740e <USBD_StdEPReq+0x1c6>
 80073ce:	7b7b      	ldrb	r3, [r7, #13]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d11c      	bne.n	800740e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80073d4:	7b7a      	ldrb	r2, [r7, #13]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80073dc:	7b7a      	ldrb	r2, [r7, #13]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	32ae      	adds	r2, #174	; 0xae
 80073e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d010      	beq.n	800740e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80073ec:	7b7a      	ldrb	r2, [r7, #13]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	32ae      	adds	r2, #174	; 0xae
 80073f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
 80073fe:	4603      	mov	r3, r0
 8007400:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007402:	e004      	b.n	800740e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fc03 	bl	8007c12 <USBD_CtlError>
              break;
 800740c:	e000      	b.n	8007410 <USBD_StdEPReq+0x1c8>
              break;
 800740e:	bf00      	nop
          }
          break;
 8007410:	e0ab      	b.n	800756a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b02      	cmp	r3, #2
 800741c:	d002      	beq.n	8007424 <USBD_StdEPReq+0x1dc>
 800741e:	2b03      	cmp	r3, #3
 8007420:	d032      	beq.n	8007488 <USBD_StdEPReq+0x240>
 8007422:	e097      	b.n	8007554 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d007      	beq.n	800743a <USBD_StdEPReq+0x1f2>
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	2b80      	cmp	r3, #128	; 0x80
 800742e:	d004      	beq.n	800743a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fbed 	bl	8007c12 <USBD_CtlError>
                break;
 8007438:	e091      	b.n	800755e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800743a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800743e:	2b00      	cmp	r3, #0
 8007440:	da0b      	bge.n	800745a <USBD_StdEPReq+0x212>
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	3310      	adds	r3, #16
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	4413      	add	r3, r2
 8007456:	3304      	adds	r3, #4
 8007458:	e00b      	b.n	8007472 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	4413      	add	r3, r2
 8007470:	3304      	adds	r3, #4
 8007472:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2202      	movs	r2, #2
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fc37 	bl	8007cf4 <USBD_CtlSendData>
              break;
 8007486:	e06a      	b.n	800755e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800748c:	2b00      	cmp	r3, #0
 800748e:	da11      	bge.n	80074b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	f003 020f 	and.w	r2, r3, #15
 8007496:	6879      	ldr	r1, [r7, #4]
 8007498:	4613      	mov	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	440b      	add	r3, r1
 80074a2:	3324      	adds	r3, #36	; 0x24
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d117      	bne.n	80074da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fbb0 	bl	8007c12 <USBD_CtlError>
                  break;
 80074b2:	e054      	b.n	800755e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	f003 020f 	and.w	r2, r3, #15
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	440b      	add	r3, r1
 80074c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d104      	bne.n	80074da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fb9d 	bl	8007c12 <USBD_CtlError>
                  break;
 80074d8:	e041      	b.n	800755e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	da0b      	bge.n	80074fa <USBD_StdEPReq+0x2b2>
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	3310      	adds	r3, #16
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	4413      	add	r3, r2
 80074f6:	3304      	adds	r3, #4
 80074f8:	e00b      	b.n	8007512 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007500:	4613      	mov	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	4413      	add	r3, r2
 8007510:	3304      	adds	r3, #4
 8007512:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007514:	7bbb      	ldrb	r3, [r7, #14]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <USBD_StdEPReq+0x2d8>
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	2b80      	cmp	r3, #128	; 0x80
 800751e:	d103      	bne.n	8007528 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2200      	movs	r2, #0
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	e00e      	b.n	8007546 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 f8cf 	bl	80086d0 <USBD_LL_IsStallEP>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2201      	movs	r2, #1
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	e002      	b.n	8007546 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2202      	movs	r2, #2
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fbd1 	bl	8007cf4 <USBD_CtlSendData>
              break;
 8007552:	e004      	b.n	800755e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fb5b 	bl	8007c12 <USBD_CtlError>
              break;
 800755c:	bf00      	nop
          }
          break;
 800755e:	e004      	b.n	800756a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fb55 	bl	8007c12 <USBD_CtlError>
          break;
 8007568:	bf00      	nop
      }
      break;
 800756a:	e005      	b.n	8007578 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fb4f 	bl	8007c12 <USBD_CtlError>
      break;
 8007574:	e000      	b.n	8007578 <USBD_StdEPReq+0x330>
      break;
 8007576:	bf00      	nop
  }

  return ret;
 8007578:	7bfb      	ldrb	r3, [r7, #15]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007592:	2300      	movs	r3, #0
 8007594:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	885b      	ldrh	r3, [r3, #2]
 800759e:	0a1b      	lsrs	r3, r3, #8
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	3b01      	subs	r3, #1
 80075a4:	2b06      	cmp	r3, #6
 80075a6:	f200 8128 	bhi.w	80077fa <USBD_GetDescriptor+0x276>
 80075aa:	a201      	add	r2, pc, #4	; (adr r2, 80075b0 <USBD_GetDescriptor+0x2c>)
 80075ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b0:	080075cd 	.word	0x080075cd
 80075b4:	080075e5 	.word	0x080075e5
 80075b8:	08007625 	.word	0x08007625
 80075bc:	080077fb 	.word	0x080077fb
 80075c0:	080077fb 	.word	0x080077fb
 80075c4:	0800779b 	.word	0x0800779b
 80075c8:	080077c7 	.word	0x080077c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	7c12      	ldrb	r2, [r2, #16]
 80075d8:	f107 0108 	add.w	r1, r7, #8
 80075dc:	4610      	mov	r0, r2
 80075de:	4798      	blx	r3
 80075e0:	60f8      	str	r0, [r7, #12]
      break;
 80075e2:	e112      	b.n	800780a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	7c1b      	ldrb	r3, [r3, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10d      	bne.n	8007608 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f4:	f107 0208 	add.w	r2, r7, #8
 80075f8:	4610      	mov	r0, r2
 80075fa:	4798      	blx	r3
 80075fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3301      	adds	r3, #1
 8007602:	2202      	movs	r2, #2
 8007604:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007606:	e100      	b.n	800780a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	f107 0208 	add.w	r2, r7, #8
 8007614:	4610      	mov	r0, r2
 8007616:	4798      	blx	r3
 8007618:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3301      	adds	r3, #1
 800761e:	2202      	movs	r2, #2
 8007620:	701a      	strb	r2, [r3, #0]
      break;
 8007622:	e0f2      	b.n	800780a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	885b      	ldrh	r3, [r3, #2]
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b05      	cmp	r3, #5
 800762c:	f200 80ac 	bhi.w	8007788 <USBD_GetDescriptor+0x204>
 8007630:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <USBD_GetDescriptor+0xb4>)
 8007632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007636:	bf00      	nop
 8007638:	08007651 	.word	0x08007651
 800763c:	08007685 	.word	0x08007685
 8007640:	080076b9 	.word	0x080076b9
 8007644:	080076ed 	.word	0x080076ed
 8007648:	08007721 	.word	0x08007721
 800764c:	08007755 	.word	0x08007755
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	7c12      	ldrb	r2, [r2, #16]
 8007668:	f107 0108 	add.w	r1, r7, #8
 800766c:	4610      	mov	r0, r2
 800766e:	4798      	blx	r3
 8007670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007672:	e091      	b.n	8007798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 facb 	bl	8007c12 <USBD_CtlError>
            err++;
 800767c:	7afb      	ldrb	r3, [r7, #11]
 800767e:	3301      	adds	r3, #1
 8007680:	72fb      	strb	r3, [r7, #11]
          break;
 8007682:	e089      	b.n	8007798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00b      	beq.n	80076a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	7c12      	ldrb	r2, [r2, #16]
 800769c:	f107 0108 	add.w	r1, r7, #8
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
 80076a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076a6:	e077      	b.n	8007798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fab1 	bl	8007c12 <USBD_CtlError>
            err++;
 80076b0:	7afb      	ldrb	r3, [r7, #11]
 80076b2:	3301      	adds	r3, #1
 80076b4:	72fb      	strb	r3, [r7, #11]
          break;
 80076b6:	e06f      	b.n	8007798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	7c12      	ldrb	r2, [r2, #16]
 80076d0:	f107 0108 	add.w	r1, r7, #8
 80076d4:	4610      	mov	r0, r2
 80076d6:	4798      	blx	r3
 80076d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076da:	e05d      	b.n	8007798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa97 	bl	8007c12 <USBD_CtlError>
            err++;
 80076e4:	7afb      	ldrb	r3, [r7, #11]
 80076e6:	3301      	adds	r3, #1
 80076e8:	72fb      	strb	r3, [r7, #11]
          break;
 80076ea:	e055      	b.n	8007798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00b      	beq.n	8007710 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	7c12      	ldrb	r2, [r2, #16]
 8007704:	f107 0108 	add.w	r1, r7, #8
 8007708:	4610      	mov	r0, r2
 800770a:	4798      	blx	r3
 800770c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800770e:	e043      	b.n	8007798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa7d 	bl	8007c12 <USBD_CtlError>
            err++;
 8007718:	7afb      	ldrb	r3, [r7, #11]
 800771a:	3301      	adds	r3, #1
 800771c:	72fb      	strb	r3, [r7, #11]
          break;
 800771e:	e03b      	b.n	8007798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00b      	beq.n	8007744 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	7c12      	ldrb	r2, [r2, #16]
 8007738:	f107 0108 	add.w	r1, r7, #8
 800773c:	4610      	mov	r0, r2
 800773e:	4798      	blx	r3
 8007740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007742:	e029      	b.n	8007798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fa63 	bl	8007c12 <USBD_CtlError>
            err++;
 800774c:	7afb      	ldrb	r3, [r7, #11]
 800774e:	3301      	adds	r3, #1
 8007750:	72fb      	strb	r3, [r7, #11]
          break;
 8007752:	e021      	b.n	8007798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00b      	beq.n	8007778 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	7c12      	ldrb	r2, [r2, #16]
 800776c:	f107 0108 	add.w	r1, r7, #8
 8007770:	4610      	mov	r0, r2
 8007772:	4798      	blx	r3
 8007774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007776:	e00f      	b.n	8007798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa49 	bl	8007c12 <USBD_CtlError>
            err++;
 8007780:	7afb      	ldrb	r3, [r7, #11]
 8007782:	3301      	adds	r3, #1
 8007784:	72fb      	strb	r3, [r7, #11]
          break;
 8007786:	e007      	b.n	8007798 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa41 	bl	8007c12 <USBD_CtlError>
          err++;
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	3301      	adds	r3, #1
 8007794:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007796:	bf00      	nop
      }
      break;
 8007798:	e037      	b.n	800780a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	7c1b      	ldrb	r3, [r3, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d109      	bne.n	80077b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077aa:	f107 0208 	add.w	r2, r7, #8
 80077ae:	4610      	mov	r0, r2
 80077b0:	4798      	blx	r3
 80077b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077b4:	e029      	b.n	800780a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fa2a 	bl	8007c12 <USBD_CtlError>
        err++;
 80077be:	7afb      	ldrb	r3, [r7, #11]
 80077c0:	3301      	adds	r3, #1
 80077c2:	72fb      	strb	r3, [r7, #11]
      break;
 80077c4:	e021      	b.n	800780a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	7c1b      	ldrb	r3, [r3, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10d      	bne.n	80077ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d6:	f107 0208 	add.w	r2, r7, #8
 80077da:	4610      	mov	r0, r2
 80077dc:	4798      	blx	r3
 80077de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3301      	adds	r3, #1
 80077e4:	2207      	movs	r2, #7
 80077e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077e8:	e00f      	b.n	800780a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fa10 	bl	8007c12 <USBD_CtlError>
        err++;
 80077f2:	7afb      	ldrb	r3, [r7, #11]
 80077f4:	3301      	adds	r3, #1
 80077f6:	72fb      	strb	r3, [r7, #11]
      break;
 80077f8:	e007      	b.n	800780a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fa08 	bl	8007c12 <USBD_CtlError>
      err++;
 8007802:	7afb      	ldrb	r3, [r7, #11]
 8007804:	3301      	adds	r3, #1
 8007806:	72fb      	strb	r3, [r7, #11]
      break;
 8007808:	bf00      	nop
  }

  if (err != 0U)
 800780a:	7afb      	ldrb	r3, [r7, #11]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d11e      	bne.n	800784e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	88db      	ldrh	r3, [r3, #6]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d016      	beq.n	8007846 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007818:	893b      	ldrh	r3, [r7, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00e      	beq.n	800783c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	88da      	ldrh	r2, [r3, #6]
 8007822:	893b      	ldrh	r3, [r7, #8]
 8007824:	4293      	cmp	r3, r2
 8007826:	bf28      	it	cs
 8007828:	4613      	movcs	r3, r2
 800782a:	b29b      	uxth	r3, r3
 800782c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800782e:	893b      	ldrh	r3, [r7, #8]
 8007830:	461a      	mov	r2, r3
 8007832:	68f9      	ldr	r1, [r7, #12]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fa5d 	bl	8007cf4 <USBD_CtlSendData>
 800783a:	e009      	b.n	8007850 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f9e7 	bl	8007c12 <USBD_CtlError>
 8007844:	e004      	b.n	8007850 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 faae 	bl	8007da8 <USBD_CtlSendStatus>
 800784c:	e000      	b.n	8007850 <USBD_GetDescriptor+0x2cc>
    return;
 800784e:	bf00      	nop
  }
}
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop

08007858 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	889b      	ldrh	r3, [r3, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d131      	bne.n	80078ce <USBD_SetAddress+0x76>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	88db      	ldrh	r3, [r3, #6]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d12d      	bne.n	80078ce <USBD_SetAddress+0x76>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	885b      	ldrh	r3, [r3, #2]
 8007876:	2b7f      	cmp	r3, #127	; 0x7f
 8007878:	d829      	bhi.n	80078ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	885b      	ldrh	r3, [r3, #2]
 800787e:	b2db      	uxtb	r3, r3
 8007880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007884:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b03      	cmp	r3, #3
 8007890:	d104      	bne.n	800789c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f9bc 	bl	8007c12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800789a:	e01d      	b.n	80078d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7bfa      	ldrb	r2, [r7, #15]
 80078a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 ff3d 	bl	8008728 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fa7a 	bl	8007da8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d004      	beq.n	80078c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2202      	movs	r2, #2
 80078be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c2:	e009      	b.n	80078d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078cc:	e004      	b.n	80078d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f99e 	bl	8007c12 <USBD_CtlError>
  }
}
 80078d6:	bf00      	nop
 80078d8:	bf00      	nop
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	885b      	ldrh	r3, [r3, #2]
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	4b4e      	ldr	r3, [pc, #312]	; (8007a30 <USBD_SetConfig+0x150>)
 80078f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80078f8:	4b4d      	ldr	r3, [pc, #308]	; (8007a30 <USBD_SetConfig+0x150>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d905      	bls.n	800790c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f985 	bl	8007c12 <USBD_CtlError>
    return USBD_FAIL;
 8007908:	2303      	movs	r3, #3
 800790a:	e08c      	b.n	8007a26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b02      	cmp	r3, #2
 8007916:	d002      	beq.n	800791e <USBD_SetConfig+0x3e>
 8007918:	2b03      	cmp	r3, #3
 800791a:	d029      	beq.n	8007970 <USBD_SetConfig+0x90>
 800791c:	e075      	b.n	8007a0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800791e:	4b44      	ldr	r3, [pc, #272]	; (8007a30 <USBD_SetConfig+0x150>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d020      	beq.n	8007968 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007926:	4b42      	ldr	r3, [pc, #264]	; (8007a30 <USBD_SetConfig+0x150>)
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007930:	4b3f      	ldr	r3, [pc, #252]	; (8007a30 <USBD_SetConfig+0x150>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7fe ffe7 	bl	800690a <USBD_SetClassConfig>
 800793c:	4603      	mov	r3, r0
 800793e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007940:	7bfb      	ldrb	r3, [r7, #15]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d008      	beq.n	8007958 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f962 	bl	8007c12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2202      	movs	r2, #2
 8007952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007956:	e065      	b.n	8007a24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fa25 	bl	8007da8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2203      	movs	r2, #3
 8007962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007966:	e05d      	b.n	8007a24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fa1d 	bl	8007da8 <USBD_CtlSendStatus>
      break;
 800796e:	e059      	b.n	8007a24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007970:	4b2f      	ldr	r3, [pc, #188]	; (8007a30 <USBD_SetConfig+0x150>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d112      	bne.n	800799e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007980:	4b2b      	ldr	r3, [pc, #172]	; (8007a30 <USBD_SetConfig+0x150>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800798a:	4b29      	ldr	r3, [pc, #164]	; (8007a30 <USBD_SetConfig+0x150>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7fe ffd6 	bl	8006942 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa06 	bl	8007da8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800799c:	e042      	b.n	8007a24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800799e:	4b24      	ldr	r3, [pc, #144]	; (8007a30 <USBD_SetConfig+0x150>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d02a      	beq.n	8007a02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7fe ffc4 	bl	8006942 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079ba:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <USBD_SetConfig+0x150>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079c4:	4b1a      	ldr	r3, [pc, #104]	; (8007a30 <USBD_SetConfig+0x150>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7fe ff9d 	bl	800690a <USBD_SetClassConfig>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00f      	beq.n	80079fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f918 	bl	8007c12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7fe ffa9 	bl	8006942 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80079f8:	e014      	b.n	8007a24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f9d4 	bl	8007da8 <USBD_CtlSendStatus>
      break;
 8007a00:	e010      	b.n	8007a24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f9d0 	bl	8007da8 <USBD_CtlSendStatus>
      break;
 8007a08:	e00c      	b.n	8007a24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f900 	bl	8007c12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a12:	4b07      	ldr	r3, [pc, #28]	; (8007a30 <USBD_SetConfig+0x150>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7fe ff92 	bl	8006942 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	73fb      	strb	r3, [r7, #15]
      break;
 8007a22:	bf00      	nop
  }

  return ret;
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	200002a4 	.word	0x200002a4

08007a34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	88db      	ldrh	r3, [r3, #6]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d004      	beq.n	8007a50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f8e2 	bl	8007c12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a4e:	e023      	b.n	8007a98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	dc02      	bgt.n	8007a62 <USBD_GetConfig+0x2e>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	dc03      	bgt.n	8007a68 <USBD_GetConfig+0x34>
 8007a60:	e015      	b.n	8007a8e <USBD_GetConfig+0x5a>
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d00b      	beq.n	8007a7e <USBD_GetConfig+0x4a>
 8007a66:	e012      	b.n	8007a8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3308      	adds	r3, #8
 8007a72:	2201      	movs	r2, #1
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f93c 	bl	8007cf4 <USBD_CtlSendData>
        break;
 8007a7c:	e00c      	b.n	8007a98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3304      	adds	r3, #4
 8007a82:	2201      	movs	r2, #1
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f934 	bl	8007cf4 <USBD_CtlSendData>
        break;
 8007a8c:	e004      	b.n	8007a98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f8be 	bl	8007c12 <USBD_CtlError>
        break;
 8007a96:	bf00      	nop
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d81e      	bhi.n	8007af6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	88db      	ldrh	r3, [r3, #6]
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d004      	beq.n	8007aca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f8a5 	bl	8007c12 <USBD_CtlError>
        break;
 8007ac8:	e01a      	b.n	8007b00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d005      	beq.n	8007ae6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	f043 0202 	orr.w	r2, r3, #2
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	330c      	adds	r3, #12
 8007aea:	2202      	movs	r2, #2
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f900 	bl	8007cf4 <USBD_CtlSendData>
      break;
 8007af4:	e004      	b.n	8007b00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f88a 	bl	8007c12 <USBD_CtlError>
      break;
 8007afe:	bf00      	nop
  }
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	885b      	ldrh	r3, [r3, #2]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d107      	bne.n	8007b2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f940 	bl	8007da8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007b28:	e013      	b.n	8007b52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	885b      	ldrh	r3, [r3, #2]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d10b      	bne.n	8007b4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	889b      	ldrh	r3, [r3, #4]
 8007b36:	0a1b      	lsrs	r3, r3, #8
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f930 	bl	8007da8 <USBD_CtlSendStatus>
}
 8007b48:	e003      	b.n	8007b52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f860 	bl	8007c12 <USBD_CtlError>
}
 8007b52:	bf00      	nop
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d80b      	bhi.n	8007b8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	885b      	ldrh	r3, [r3, #2]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d10c      	bne.n	8007b94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f910 	bl	8007da8 <USBD_CtlSendStatus>
      }
      break;
 8007b88:	e004      	b.n	8007b94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f840 	bl	8007c12 <USBD_CtlError>
      break;
 8007b92:	e000      	b.n	8007b96 <USBD_ClrFeature+0x3c>
      break;
 8007b94:	bf00      	nop
  }
}
 8007b96:	bf00      	nop
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	781a      	ldrb	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	781a      	ldrb	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f7ff fa41 	bl	8007050 <SWAPBYTE>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3301      	adds	r3, #1
 8007be0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f7ff fa34 	bl	8007050 <SWAPBYTE>
 8007be8:	4603      	mov	r3, r0
 8007bea:	461a      	mov	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f7ff fa27 	bl	8007050 <SWAPBYTE>
 8007c02:	4603      	mov	r3, r0
 8007c04:	461a      	mov	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	80da      	strh	r2, [r3, #6]
}
 8007c0a:	bf00      	nop
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c1c:	2180      	movs	r1, #128	; 0x80
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fd18 	bl	8008654 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c24:	2100      	movs	r1, #0
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fd14 	bl	8008654 <USBD_LL_StallEP>
}
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d036      	beq.n	8007cb8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c4e:	6938      	ldr	r0, [r7, #16]
 8007c50:	f000 f836 	bl	8007cc0 <USBD_GetLen>
 8007c54:	4603      	mov	r3, r0
 8007c56:	3301      	adds	r3, #1
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	4413      	add	r3, r2
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	7812      	ldrb	r2, [r2, #0]
 8007c6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c6e:	7dfb      	ldrb	r3, [r7, #23]
 8007c70:	3301      	adds	r3, #1
 8007c72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c74:	7dfb      	ldrb	r3, [r7, #23]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	4413      	add	r3, r2
 8007c7a:	2203      	movs	r2, #3
 8007c7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	3301      	adds	r3, #1
 8007c82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c84:	e013      	b.n	8007cae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	7812      	ldrb	r2, [r2, #0]
 8007c90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	3301      	adds	r3, #1
 8007c96:	613b      	str	r3, [r7, #16]
    idx++;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
 8007caa:	3301      	adds	r3, #1
 8007cac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e7      	bne.n	8007c86 <USBD_GetString+0x52>
 8007cb6:	e000      	b.n	8007cba <USBD_GetString+0x86>
    return;
 8007cb8:	bf00      	nop
  }
}
 8007cba:	3718      	adds	r7, #24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007cd0:	e005      	b.n	8007cde <USBD_GetLen+0x1e>
  {
    len++;
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1f5      	bne.n	8007cd2 <USBD_GetLen+0x12>
  }

  return len;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	2100      	movs	r1, #0
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 fd23 	bl	8008766 <USBD_LL_Transmit>

  return USBD_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b084      	sub	sp, #16
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	60f8      	str	r0, [r7, #12]
 8007d32:	60b9      	str	r1, [r7, #8]
 8007d34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 fd12 	bl	8008766 <USBD_LL_Transmit>

  return USBD_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2203      	movs	r2, #3
 8007d5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	2100      	movs	r1, #0
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 fd16 	bl	80087a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	60f8      	str	r0, [r7, #12]
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	2100      	movs	r1, #0
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 fd05 	bl	80087a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2204      	movs	r2, #4
 8007db4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007db8:	2300      	movs	r3, #0
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fcd1 	bl	8008766 <USBD_LL_Transmit>

  return USBD_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b082      	sub	sp, #8
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2205      	movs	r2, #5
 8007dda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dde:	2300      	movs	r3, #0
 8007de0:	2200      	movs	r2, #0
 8007de2:	2100      	movs	r1, #0
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fcdf 	bl	80087a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	4912      	ldr	r1, [pc, #72]	; (8007e44 <MX_USB_DEVICE_Init+0x50>)
 8007dfc:	4812      	ldr	r0, [pc, #72]	; (8007e48 <MX_USB_DEVICE_Init+0x54>)
 8007dfe:	f7fe fd07 	bl	8006810 <USBD_Init>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e08:	f7f8 fd3e 	bl	8000888 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e0c:	490f      	ldr	r1, [pc, #60]	; (8007e4c <MX_USB_DEVICE_Init+0x58>)
 8007e0e:	480e      	ldr	r0, [pc, #56]	; (8007e48 <MX_USB_DEVICE_Init+0x54>)
 8007e10:	f7fe fd2e 	bl	8006870 <USBD_RegisterClass>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e1a:	f7f8 fd35 	bl	8000888 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e1e:	490c      	ldr	r1, [pc, #48]	; (8007e50 <MX_USB_DEVICE_Init+0x5c>)
 8007e20:	4809      	ldr	r0, [pc, #36]	; (8007e48 <MX_USB_DEVICE_Init+0x54>)
 8007e22:	f7fe fc1f 	bl	8006664 <USBD_CDC_RegisterInterface>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e2c:	f7f8 fd2c 	bl	8000888 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e30:	4805      	ldr	r0, [pc, #20]	; (8007e48 <MX_USB_DEVICE_Init+0x54>)
 8007e32:	f7fe fd53 	bl	80068dc <USBD_Start>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e3c:	f7f8 fd24 	bl	8000888 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e40:	bf00      	nop
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	200000ac 	.word	0x200000ac
 8007e48:	200002a8 	.word	0x200002a8
 8007e4c:	20000018 	.word	0x20000018
 8007e50:	20000098 	.word	0x20000098

08007e54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e58:	2200      	movs	r2, #0
 8007e5a:	4905      	ldr	r1, [pc, #20]	; (8007e70 <CDC_Init_FS+0x1c>)
 8007e5c:	4805      	ldr	r0, [pc, #20]	; (8007e74 <CDC_Init_FS+0x20>)
 8007e5e:	f7fe fc1b 	bl	8006698 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e62:	4905      	ldr	r1, [pc, #20]	; (8007e78 <CDC_Init_FS+0x24>)
 8007e64:	4803      	ldr	r0, [pc, #12]	; (8007e74 <CDC_Init_FS+0x20>)
 8007e66:	f7fe fc39 	bl	80066dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	20000d84 	.word	0x20000d84
 8007e74:	200002a8 	.word	0x200002a8
 8007e78:	20000584 	.word	0x20000584

08007e7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	4603      	mov	r3, r0
 8007e94:	6039      	str	r1, [r7, #0]
 8007e96:	71fb      	strb	r3, [r7, #7]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e9c:	79fb      	ldrb	r3, [r7, #7]
 8007e9e:	2b23      	cmp	r3, #35	; 0x23
 8007ea0:	d84a      	bhi.n	8007f38 <CDC_Control_FS+0xac>
 8007ea2:	a201      	add	r2, pc, #4	; (adr r2, 8007ea8 <CDC_Control_FS+0x1c>)
 8007ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea8:	08007f39 	.word	0x08007f39
 8007eac:	08007f39 	.word	0x08007f39
 8007eb0:	08007f39 	.word	0x08007f39
 8007eb4:	08007f39 	.word	0x08007f39
 8007eb8:	08007f39 	.word	0x08007f39
 8007ebc:	08007f39 	.word	0x08007f39
 8007ec0:	08007f39 	.word	0x08007f39
 8007ec4:	08007f39 	.word	0x08007f39
 8007ec8:	08007f39 	.word	0x08007f39
 8007ecc:	08007f39 	.word	0x08007f39
 8007ed0:	08007f39 	.word	0x08007f39
 8007ed4:	08007f39 	.word	0x08007f39
 8007ed8:	08007f39 	.word	0x08007f39
 8007edc:	08007f39 	.word	0x08007f39
 8007ee0:	08007f39 	.word	0x08007f39
 8007ee4:	08007f39 	.word	0x08007f39
 8007ee8:	08007f39 	.word	0x08007f39
 8007eec:	08007f39 	.word	0x08007f39
 8007ef0:	08007f39 	.word	0x08007f39
 8007ef4:	08007f39 	.word	0x08007f39
 8007ef8:	08007f39 	.word	0x08007f39
 8007efc:	08007f39 	.word	0x08007f39
 8007f00:	08007f39 	.word	0x08007f39
 8007f04:	08007f39 	.word	0x08007f39
 8007f08:	08007f39 	.word	0x08007f39
 8007f0c:	08007f39 	.word	0x08007f39
 8007f10:	08007f39 	.word	0x08007f39
 8007f14:	08007f39 	.word	0x08007f39
 8007f18:	08007f39 	.word	0x08007f39
 8007f1c:	08007f39 	.word	0x08007f39
 8007f20:	08007f39 	.word	0x08007f39
 8007f24:	08007f39 	.word	0x08007f39
 8007f28:	08007f39 	.word	0x08007f39
 8007f2c:	08007f39 	.word	0x08007f39
 8007f30:	08007f39 	.word	0x08007f39
 8007f34:	08007f39 	.word	0x08007f39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f38:	bf00      	nop
  }

  return (USBD_OK);
 8007f3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint8_t status = HAL_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	73fb      	strb	r3, [r7, #15]

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f56:	6879      	ldr	r1, [r7, #4]
 8007f58:	4817      	ldr	r0, [pc, #92]	; (8007fb8 <CDC_Receive_FS+0x70>)
 8007f5a:	f7fe fbbf 	bl	80066dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f5e:	4816      	ldr	r0, [pc, #88]	; (8007fb8 <CDC_Receive_FS+0x70>)
 8007f60:	f7fe fc20 	bl	80067a4 <USBD_CDC_ReceivePacket>


  memset (USB_Rx_data, '\0', USB_BUF_SIZE);  // clear the buffer
 8007f64:	220a      	movs	r2, #10
 8007f66:	2100      	movs	r1, #0
 8007f68:	4814      	ldr	r0, [pc, #80]	; (8007fbc <CDC_Receive_FS+0x74>)
 8007f6a:	f000 fcc7 	bl	80088fc <memset>
  uint8_t len = (uint8_t)*Len;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	73bb      	strb	r3, [r7, #14]
  memcpy(USB_Rx_data, Buf, len);  // copy the data to the buffer
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	461a      	mov	r2, r3
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	4810      	ldr	r0, [pc, #64]	; (8007fbc <CDC_Receive_FS+0x74>)
 8007f7c:	f000 fcb0 	bl	80088e0 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	461a      	mov	r2, r3
 8007f84:	2100      	movs	r1, #0
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fcb8 	bl	80088fc <memset>

  if (USB_Rx_data[0] != 0x0) {
 8007f8c:	4b0b      	ldr	r3, [pc, #44]	; (8007fbc <CDC_Receive_FS+0x74>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <CDC_Receive_FS+0x64>

	  if (HAL_UART_Transmit(&huart2, USB_Rx_data, 1, 2000) != HAL_OK) {
 8007f94:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007f98:	2201      	movs	r2, #1
 8007f9a:	4908      	ldr	r1, [pc, #32]	; (8007fbc <CDC_Receive_FS+0x74>)
 8007f9c:	4808      	ldr	r0, [pc, #32]	; (8007fc0 <CDC_Receive_FS+0x78>)
 8007f9e:	f7fb ff9e 	bl	8003ede <HAL_UART_Transmit>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <CDC_Receive_FS+0x64>
		  status = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	73fb      	strb	r3, [r7, #15]
	  }
  }

  return (USBD_OK);
 8007fac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	200002a8 	.word	0x200002a8
 8007fbc:	20000158 	.word	0x20000158
 8007fc0:	200001fc 	.word	0x200001fc

08007fc4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007fd4:	4b0d      	ldr	r3, [pc, #52]	; (800800c <CDC_Transmit_FS+0x48>)
 8007fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fda:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e00b      	b.n	8008002 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007fea:	887b      	ldrh	r3, [r7, #2]
 8007fec:	461a      	mov	r2, r3
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	4806      	ldr	r0, [pc, #24]	; (800800c <CDC_Transmit_FS+0x48>)
 8007ff2:	f7fe fb51 	bl	8006698 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007ff6:	4805      	ldr	r0, [pc, #20]	; (800800c <CDC_Transmit_FS+0x48>)
 8007ff8:	f7fe fb8e 	bl	8006718 <USBD_CDC_TransmitPacket>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008000:	7bfb      	ldrb	r3, [r7, #15]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	200002a8 	.word	0x200002a8

08008010 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008022:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008026:	4618      	mov	r0, r3
 8008028:	371c      	adds	r7, #28
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
	...

08008034 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	4603      	mov	r3, r0
 800803c:	6039      	str	r1, [r7, #0]
 800803e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2212      	movs	r2, #18
 8008044:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008046:	4b03      	ldr	r3, [pc, #12]	; (8008054 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	200000c8 	.word	0x200000c8

08008058 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	4603      	mov	r3, r0
 8008060:	6039      	str	r1, [r7, #0]
 8008062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2204      	movs	r2, #4
 8008068:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800806a:	4b03      	ldr	r3, [pc, #12]	; (8008078 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800806c:	4618      	mov	r0, r3
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	200000dc 	.word	0x200000dc

0800807c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	6039      	str	r1, [r7, #0]
 8008086:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d105      	bne.n	800809a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	4907      	ldr	r1, [pc, #28]	; (80080b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008092:	4808      	ldr	r0, [pc, #32]	; (80080b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008094:	f7ff fdce 	bl	8007c34 <USBD_GetString>
 8008098:	e004      	b.n	80080a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	4904      	ldr	r1, [pc, #16]	; (80080b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800809e:	4805      	ldr	r0, [pc, #20]	; (80080b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80080a0:	f7ff fdc8 	bl	8007c34 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080a4:	4b02      	ldr	r3, [pc, #8]	; (80080b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20001584 	.word	0x20001584
 80080b4:	08008924 	.word	0x08008924

080080b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	4603      	mov	r3, r0
 80080c0:	6039      	str	r1, [r7, #0]
 80080c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080c4:	683a      	ldr	r2, [r7, #0]
 80080c6:	4904      	ldr	r1, [pc, #16]	; (80080d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080c8:	4804      	ldr	r0, [pc, #16]	; (80080dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080ca:	f7ff fdb3 	bl	8007c34 <USBD_GetString>
  return USBD_StrDesc;
 80080ce:	4b02      	ldr	r3, [pc, #8]	; (80080d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	20001584 	.word	0x20001584
 80080dc:	0800893c 	.word	0x0800893c

080080e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	6039      	str	r1, [r7, #0]
 80080ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	221a      	movs	r2, #26
 80080f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080f2:	f000 f843 	bl	800817c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80080f6:	4b02      	ldr	r3, [pc, #8]	; (8008100 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	200000e0 	.word	0x200000e0

08008104 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	6039      	str	r1, [r7, #0]
 800810e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d105      	bne.n	8008122 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	4907      	ldr	r1, [pc, #28]	; (8008138 <USBD_FS_ConfigStrDescriptor+0x34>)
 800811a:	4808      	ldr	r0, [pc, #32]	; (800813c <USBD_FS_ConfigStrDescriptor+0x38>)
 800811c:	f7ff fd8a 	bl	8007c34 <USBD_GetString>
 8008120:	e004      	b.n	800812c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	4904      	ldr	r1, [pc, #16]	; (8008138 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008126:	4805      	ldr	r0, [pc, #20]	; (800813c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008128:	f7ff fd84 	bl	8007c34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800812c:	4b02      	ldr	r3, [pc, #8]	; (8008138 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20001584 	.word	0x20001584
 800813c:	08008940 	.word	0x08008940

08008140 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	4603      	mov	r3, r0
 8008148:	6039      	str	r1, [r7, #0]
 800814a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800814c:	79fb      	ldrb	r3, [r7, #7]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d105      	bne.n	800815e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	4907      	ldr	r1, [pc, #28]	; (8008174 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008156:	4808      	ldr	r0, [pc, #32]	; (8008178 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008158:	f7ff fd6c 	bl	8007c34 <USBD_GetString>
 800815c:	e004      	b.n	8008168 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	4904      	ldr	r1, [pc, #16]	; (8008174 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008162:	4805      	ldr	r0, [pc, #20]	; (8008178 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008164:	f7ff fd66 	bl	8007c34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008168:	4b02      	ldr	r3, [pc, #8]	; (8008174 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	20001584 	.word	0x20001584
 8008178:	0800894c 	.word	0x0800894c

0800817c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008182:	4b0f      	ldr	r3, [pc, #60]	; (80081c0 <Get_SerialNum+0x44>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008188:	4b0e      	ldr	r3, [pc, #56]	; (80081c4 <Get_SerialNum+0x48>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800818e:	4b0e      	ldr	r3, [pc, #56]	; (80081c8 <Get_SerialNum+0x4c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4413      	add	r3, r2
 800819a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d009      	beq.n	80081b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081a2:	2208      	movs	r2, #8
 80081a4:	4909      	ldr	r1, [pc, #36]	; (80081cc <Get_SerialNum+0x50>)
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 f814 	bl	80081d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081ac:	2204      	movs	r2, #4
 80081ae:	4908      	ldr	r1, [pc, #32]	; (80081d0 <Get_SerialNum+0x54>)
 80081b0:	68b8      	ldr	r0, [r7, #8]
 80081b2:	f000 f80f 	bl	80081d4 <IntToUnicode>
  }
}
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	1fff7a10 	.word	0x1fff7a10
 80081c4:	1fff7a14 	.word	0x1fff7a14
 80081c8:	1fff7a18 	.word	0x1fff7a18
 80081cc:	200000e2 	.word	0x200000e2
 80081d0:	200000f2 	.word	0x200000f2

080081d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b087      	sub	sp, #28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	4613      	mov	r3, r2
 80081e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081e6:	2300      	movs	r3, #0
 80081e8:	75fb      	strb	r3, [r7, #23]
 80081ea:	e027      	b.n	800823c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	0f1b      	lsrs	r3, r3, #28
 80081f0:	2b09      	cmp	r3, #9
 80081f2:	d80b      	bhi.n	800820c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	0f1b      	lsrs	r3, r3, #28
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	7dfb      	ldrb	r3, [r7, #23]
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	4619      	mov	r1, r3
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	440b      	add	r3, r1
 8008204:	3230      	adds	r2, #48	; 0x30
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	701a      	strb	r2, [r3, #0]
 800820a:	e00a      	b.n	8008222 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	0f1b      	lsrs	r3, r3, #28
 8008210:	b2da      	uxtb	r2, r3
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	4619      	mov	r1, r3
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	440b      	add	r3, r1
 800821c:	3237      	adds	r2, #55	; 0x37
 800821e:	b2d2      	uxtb	r2, r2
 8008220:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	011b      	lsls	r3, r3, #4
 8008226:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008228:	7dfb      	ldrb	r3, [r7, #23]
 800822a:	005b      	lsls	r3, r3, #1
 800822c:	3301      	adds	r3, #1
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	4413      	add	r3, r2
 8008232:	2200      	movs	r2, #0
 8008234:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008236:	7dfb      	ldrb	r3, [r7, #23]
 8008238:	3301      	adds	r3, #1
 800823a:	75fb      	strb	r3, [r7, #23]
 800823c:	7dfa      	ldrb	r2, [r7, #23]
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	429a      	cmp	r2, r3
 8008242:	d3d3      	bcc.n	80081ec <IntToUnicode+0x18>
  }
}
 8008244:	bf00      	nop
 8008246:	bf00      	nop
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
	...

08008254 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b08a      	sub	sp, #40	; 0x28
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800825c:	f107 0314 	add.w	r3, r7, #20
 8008260:	2200      	movs	r2, #0
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	605a      	str	r2, [r3, #4]
 8008266:	609a      	str	r2, [r3, #8]
 8008268:	60da      	str	r2, [r3, #12]
 800826a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008274:	d147      	bne.n	8008306 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008276:	2300      	movs	r3, #0
 8008278:	613b      	str	r3, [r7, #16]
 800827a:	4b25      	ldr	r3, [pc, #148]	; (8008310 <HAL_PCD_MspInit+0xbc>)
 800827c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827e:	4a24      	ldr	r2, [pc, #144]	; (8008310 <HAL_PCD_MspInit+0xbc>)
 8008280:	f043 0301 	orr.w	r3, r3, #1
 8008284:	6313      	str	r3, [r2, #48]	; 0x30
 8008286:	4b22      	ldr	r3, [pc, #136]	; (8008310 <HAL_PCD_MspInit+0xbc>)
 8008288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	613b      	str	r3, [r7, #16]
 8008290:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008292:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8008296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008298:	2302      	movs	r3, #2
 800829a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800829c:	2300      	movs	r3, #0
 800829e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082a0:	2303      	movs	r3, #3
 80082a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082a4:	230a      	movs	r3, #10
 80082a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082a8:	f107 0314 	add.w	r3, r7, #20
 80082ac:	4619      	mov	r1, r3
 80082ae:	4819      	ldr	r0, [pc, #100]	; (8008314 <HAL_PCD_MspInit+0xc0>)
 80082b0:	f7f9 fa34 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80082b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082ba:	2300      	movs	r3, #0
 80082bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80082c2:	f107 0314 	add.w	r3, r7, #20
 80082c6:	4619      	mov	r1, r3
 80082c8:	4812      	ldr	r0, [pc, #72]	; (8008314 <HAL_PCD_MspInit+0xc0>)
 80082ca:	f7f9 fa27 	bl	800171c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082ce:	4b10      	ldr	r3, [pc, #64]	; (8008310 <HAL_PCD_MspInit+0xbc>)
 80082d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d2:	4a0f      	ldr	r2, [pc, #60]	; (8008310 <HAL_PCD_MspInit+0xbc>)
 80082d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d8:	6353      	str	r3, [r2, #52]	; 0x34
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	4b0c      	ldr	r3, [pc, #48]	; (8008310 <HAL_PCD_MspInit+0xbc>)
 80082e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e2:	4a0b      	ldr	r2, [pc, #44]	; (8008310 <HAL_PCD_MspInit+0xbc>)
 80082e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082e8:	6453      	str	r3, [r2, #68]	; 0x44
 80082ea:	4b09      	ldr	r3, [pc, #36]	; (8008310 <HAL_PCD_MspInit+0xbc>)
 80082ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082f6:	2200      	movs	r2, #0
 80082f8:	2100      	movs	r1, #0
 80082fa:	2043      	movs	r0, #67	; 0x43
 80082fc:	f7f8 feed 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008300:	2043      	movs	r0, #67	; 0x43
 8008302:	f7f8 ff06 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008306:	bf00      	nop
 8008308:	3728      	adds	r7, #40	; 0x28
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	40023800 	.word	0x40023800
 8008314:	40020000 	.word	0x40020000

08008318 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800832c:	4619      	mov	r1, r3
 800832e:	4610      	mov	r0, r2
 8008330:	f7fe fb21 	bl	8006976 <USBD_LL_SetupStage>
}
 8008334:	bf00      	nop
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800834e:	78fa      	ldrb	r2, [r7, #3]
 8008350:	6879      	ldr	r1, [r7, #4]
 8008352:	4613      	mov	r3, r2
 8008354:	00db      	lsls	r3, r3, #3
 8008356:	4413      	add	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	440b      	add	r3, r1
 800835c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	78fb      	ldrb	r3, [r7, #3]
 8008364:	4619      	mov	r1, r3
 8008366:	f7fe fb5b 	bl	8006a20 <USBD_LL_DataOutStage>
}
 800836a:	bf00      	nop
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b082      	sub	sp, #8
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008384:	78fa      	ldrb	r2, [r7, #3]
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	4613      	mov	r3, r2
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	4413      	add	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	440b      	add	r3, r1
 8008392:	334c      	adds	r3, #76	; 0x4c
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	78fb      	ldrb	r3, [r7, #3]
 8008398:	4619      	mov	r1, r3
 800839a:	f7fe fbf4 	bl	8006b86 <USBD_LL_DataInStage>
}
 800839e:	bf00      	nop
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fe fd28 	bl	8006e0a <USBD_LL_SOF>
}
 80083ba:	bf00      	nop
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083ca:	2301      	movs	r3, #1
 80083cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d102      	bne.n	80083dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80083d6:	2300      	movs	r3, #0
 80083d8:	73fb      	strb	r3, [r7, #15]
 80083da:	e008      	b.n	80083ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d102      	bne.n	80083ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80083e4:	2301      	movs	r3, #1
 80083e6:	73fb      	strb	r3, [r7, #15]
 80083e8:	e001      	b.n	80083ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80083ea:	f7f8 fa4d 	bl	8000888 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083f4:	7bfa      	ldrb	r2, [r7, #15]
 80083f6:	4611      	mov	r1, r2
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7fe fcc8 	bl	8006d8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008404:	4618      	mov	r0, r3
 8008406:	f7fe fc70 	bl	8006cea <USBD_LL_Reset>
}
 800840a:	bf00      	nop
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe fcc3 	bl	8006dae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	6812      	ldr	r2, [r2, #0]
 8008436:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800843a:	f043 0301 	orr.w	r3, r3, #1
 800843e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008448:	4b04      	ldr	r3, [pc, #16]	; (800845c <HAL_PCD_SuspendCallback+0x48>)
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	4a03      	ldr	r2, [pc, #12]	; (800845c <HAL_PCD_SuspendCallback+0x48>)
 800844e:	f043 0306 	orr.w	r3, r3, #6
 8008452:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	e000ed00 	.word	0xe000ed00

08008460 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800846e:	4618      	mov	r0, r3
 8008470:	f7fe fcb3 	bl	8006dda <USBD_LL_Resume>
}
 8008474:	bf00      	nop
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800848e:	78fa      	ldrb	r2, [r7, #3]
 8008490:	4611      	mov	r1, r2
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe fd0b 	bl	8006eae <USBD_LL_IsoOUTIncomplete>
}
 8008498:	bf00      	nop
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084b2:	78fa      	ldrb	r2, [r7, #3]
 80084b4:	4611      	mov	r1, r2
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fe fcc7 	bl	8006e4a <USBD_LL_IsoINIncomplete>
}
 80084bc:	bf00      	nop
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe fd1d 	bl	8006f12 <USBD_LL_DevConnected>
}
 80084d8:	bf00      	nop
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fe fd1a 	bl	8006f28 <USBD_LL_DevDisconnected>
}
 80084f4:	bf00      	nop
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d13c      	bne.n	8008586 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800850c:	4a20      	ldr	r2, [pc, #128]	; (8008590 <USBD_LL_Init+0x94>)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a1e      	ldr	r2, [pc, #120]	; (8008590 <USBD_LL_Init+0x94>)
 8008518:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800851c:	4b1c      	ldr	r3, [pc, #112]	; (8008590 <USBD_LL_Init+0x94>)
 800851e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008522:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008524:	4b1a      	ldr	r3, [pc, #104]	; (8008590 <USBD_LL_Init+0x94>)
 8008526:	2204      	movs	r2, #4
 8008528:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800852a:	4b19      	ldr	r3, [pc, #100]	; (8008590 <USBD_LL_Init+0x94>)
 800852c:	2202      	movs	r2, #2
 800852e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008530:	4b17      	ldr	r3, [pc, #92]	; (8008590 <USBD_LL_Init+0x94>)
 8008532:	2200      	movs	r2, #0
 8008534:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008536:	4b16      	ldr	r3, [pc, #88]	; (8008590 <USBD_LL_Init+0x94>)
 8008538:	2202      	movs	r2, #2
 800853a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800853c:	4b14      	ldr	r3, [pc, #80]	; (8008590 <USBD_LL_Init+0x94>)
 800853e:	2200      	movs	r2, #0
 8008540:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008542:	4b13      	ldr	r3, [pc, #76]	; (8008590 <USBD_LL_Init+0x94>)
 8008544:	2200      	movs	r2, #0
 8008546:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008548:	4b11      	ldr	r3, [pc, #68]	; (8008590 <USBD_LL_Init+0x94>)
 800854a:	2200      	movs	r2, #0
 800854c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800854e:	4b10      	ldr	r3, [pc, #64]	; (8008590 <USBD_LL_Init+0x94>)
 8008550:	2200      	movs	r2, #0
 8008552:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008554:	4b0e      	ldr	r3, [pc, #56]	; (8008590 <USBD_LL_Init+0x94>)
 8008556:	2200      	movs	r2, #0
 8008558:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800855a:	480d      	ldr	r0, [pc, #52]	; (8008590 <USBD_LL_Init+0x94>)
 800855c:	f7f9 faa3 	bl	8001aa6 <HAL_PCD_Init>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008566:	f7f8 f98f 	bl	8000888 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800856a:	2180      	movs	r1, #128	; 0x80
 800856c:	4808      	ldr	r0, [pc, #32]	; (8008590 <USBD_LL_Init+0x94>)
 800856e:	f7fa fcfa 	bl	8002f66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008572:	2240      	movs	r2, #64	; 0x40
 8008574:	2100      	movs	r1, #0
 8008576:	4806      	ldr	r0, [pc, #24]	; (8008590 <USBD_LL_Init+0x94>)
 8008578:	f7fa fcae 	bl	8002ed8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800857c:	2280      	movs	r2, #128	; 0x80
 800857e:	2101      	movs	r1, #1
 8008580:	4803      	ldr	r0, [pc, #12]	; (8008590 <USBD_LL_Init+0x94>)
 8008582:	f7fa fca9 	bl	8002ed8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20001784 	.word	0x20001784

08008594 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7f9 fb98 	bl	8001ce0 <HAL_PCD_Start>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 f942 	bl	8008840 <USBD_Get_USB_Status>
 80085bc:	4603      	mov	r3, r0
 80085be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b084      	sub	sp, #16
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	4608      	mov	r0, r1
 80085d4:	4611      	mov	r1, r2
 80085d6:	461a      	mov	r2, r3
 80085d8:	4603      	mov	r3, r0
 80085da:	70fb      	strb	r3, [r7, #3]
 80085dc:	460b      	mov	r3, r1
 80085de:	70bb      	strb	r3, [r7, #2]
 80085e0:	4613      	mov	r3, r2
 80085e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80085f2:	78bb      	ldrb	r3, [r7, #2]
 80085f4:	883a      	ldrh	r2, [r7, #0]
 80085f6:	78f9      	ldrb	r1, [r7, #3]
 80085f8:	f7fa f869 	bl	80026ce <HAL_PCD_EP_Open>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008600:	7bfb      	ldrb	r3, [r7, #15]
 8008602:	4618      	mov	r0, r3
 8008604:	f000 f91c 	bl	8008840 <USBD_Get_USB_Status>
 8008608:	4603      	mov	r3, r0
 800860a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800860c:	7bbb      	ldrb	r3, [r7, #14]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	460b      	mov	r3, r1
 8008620:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008630:	78fa      	ldrb	r2, [r7, #3]
 8008632:	4611      	mov	r1, r2
 8008634:	4618      	mov	r0, r3
 8008636:	f7fa f8b2 	bl	800279e <HAL_PCD_EP_Close>
 800863a:	4603      	mov	r3, r0
 800863c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800863e:	7bfb      	ldrb	r3, [r7, #15]
 8008640:	4618      	mov	r0, r3
 8008642:	f000 f8fd 	bl	8008840 <USBD_Get_USB_Status>
 8008646:	4603      	mov	r3, r0
 8008648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800864a:	7bbb      	ldrb	r3, [r7, #14]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	460b      	mov	r3, r1
 800865e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008660:	2300      	movs	r3, #0
 8008662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008664:	2300      	movs	r3, #0
 8008666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800866e:	78fa      	ldrb	r2, [r7, #3]
 8008670:	4611      	mov	r1, r2
 8008672:	4618      	mov	r0, r3
 8008674:	f7fa f98a 	bl	800298c <HAL_PCD_EP_SetStall>
 8008678:	4603      	mov	r3, r0
 800867a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	4618      	mov	r0, r3
 8008680:	f000 f8de 	bl	8008840 <USBD_Get_USB_Status>
 8008684:	4603      	mov	r3, r0
 8008686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008688:	7bbb      	ldrb	r3, [r7, #14]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	460b      	mov	r3, r1
 800869c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086ac:	78fa      	ldrb	r2, [r7, #3]
 80086ae:	4611      	mov	r1, r2
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fa f9cf 	bl	8002a54 <HAL_PCD_EP_ClrStall>
 80086b6:	4603      	mov	r3, r0
 80086b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 f8bf 	bl	8008840 <USBD_Get_USB_Status>
 80086c2:	4603      	mov	r3, r0
 80086c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da0b      	bge.n	8008704 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086f2:	68f9      	ldr	r1, [r7, #12]
 80086f4:	4613      	mov	r3, r2
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	440b      	add	r3, r1
 80086fe:	333e      	adds	r3, #62	; 0x3e
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	e00b      	b.n	800871c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008704:	78fb      	ldrb	r3, [r7, #3]
 8008706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800870a:	68f9      	ldr	r1, [r7, #12]
 800870c:	4613      	mov	r3, r2
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	4413      	add	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	440b      	add	r3, r1
 8008716:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800871a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008742:	78fa      	ldrb	r2, [r7, #3]
 8008744:	4611      	mov	r1, r2
 8008746:	4618      	mov	r0, r3
 8008748:	f7f9 ff9c 	bl	8002684 <HAL_PCD_SetAddress>
 800874c:	4603      	mov	r3, r0
 800874e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	4618      	mov	r0, r3
 8008754:	f000 f874 	bl	8008840 <USBD_Get_USB_Status>
 8008758:	4603      	mov	r3, r0
 800875a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800875c:	7bbb      	ldrb	r3, [r7, #14]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b086      	sub	sp, #24
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
 8008772:	460b      	mov	r3, r1
 8008774:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008784:	7af9      	ldrb	r1, [r7, #11]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	f7fa f8b5 	bl	80028f8 <HAL_PCD_EP_Transmit>
 800878e:	4603      	mov	r3, r0
 8008790:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008792:	7dfb      	ldrb	r3, [r7, #23]
 8008794:	4618      	mov	r0, r3
 8008796:	f000 f853 	bl	8008840 <USBD_Get_USB_Status>
 800879a:	4603      	mov	r3, r0
 800879c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800879e:	7dbb      	ldrb	r3, [r7, #22]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	607a      	str	r2, [r7, #4]
 80087b2:	603b      	str	r3, [r7, #0]
 80087b4:	460b      	mov	r3, r1
 80087b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80087c6:	7af9      	ldrb	r1, [r7, #11]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	f7fa f831 	bl	8002832 <HAL_PCD_EP_Receive>
 80087d0:	4603      	mov	r3, r0
 80087d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087d4:	7dfb      	ldrb	r3, [r7, #23]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 f832 	bl	8008840 <USBD_Get_USB_Status>
 80087dc:	4603      	mov	r3, r0
 80087de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b082      	sub	sp, #8
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	460b      	mov	r3, r1
 80087f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087fc:	78fa      	ldrb	r2, [r7, #3]
 80087fe:	4611      	mov	r1, r2
 8008800:	4618      	mov	r0, r3
 8008802:	f7fa f861 	bl	80028c8 <HAL_PCD_EP_GetRxCount>
 8008806:	4603      	mov	r3, r0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008818:	4b03      	ldr	r3, [pc, #12]	; (8008828 <USBD_static_malloc+0x18>)
}
 800881a:	4618      	mov	r0, r3
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	20001c90 	.word	0x20001c90

0800882c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]

}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800884e:	79fb      	ldrb	r3, [r7, #7]
 8008850:	2b03      	cmp	r3, #3
 8008852:	d817      	bhi.n	8008884 <USBD_Get_USB_Status+0x44>
 8008854:	a201      	add	r2, pc, #4	; (adr r2, 800885c <USBD_Get_USB_Status+0x1c>)
 8008856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885a:	bf00      	nop
 800885c:	0800886d 	.word	0x0800886d
 8008860:	08008873 	.word	0x08008873
 8008864:	08008879 	.word	0x08008879
 8008868:	0800887f 	.word	0x0800887f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73fb      	strb	r3, [r7, #15]
    break;
 8008870:	e00b      	b.n	800888a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008872:	2303      	movs	r3, #3
 8008874:	73fb      	strb	r3, [r7, #15]
    break;
 8008876:	e008      	b.n	800888a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008878:	2301      	movs	r3, #1
 800887a:	73fb      	strb	r3, [r7, #15]
    break;
 800887c:	e005      	b.n	800888a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800887e:	2303      	movs	r3, #3
 8008880:	73fb      	strb	r3, [r7, #15]
    break;
 8008882:	e002      	b.n	800888a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008884:	2303      	movs	r3, #3
 8008886:	73fb      	strb	r3, [r7, #15]
    break;
 8008888:	bf00      	nop
  }
  return usb_status;
 800888a:	7bfb      	ldrb	r3, [r7, #15]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <__libc_init_array>:
 8008898:	b570      	push	{r4, r5, r6, lr}
 800889a:	4d0d      	ldr	r5, [pc, #52]	; (80088d0 <__libc_init_array+0x38>)
 800889c:	4c0d      	ldr	r4, [pc, #52]	; (80088d4 <__libc_init_array+0x3c>)
 800889e:	1b64      	subs	r4, r4, r5
 80088a0:	10a4      	asrs	r4, r4, #2
 80088a2:	2600      	movs	r6, #0
 80088a4:	42a6      	cmp	r6, r4
 80088a6:	d109      	bne.n	80088bc <__libc_init_array+0x24>
 80088a8:	4d0b      	ldr	r5, [pc, #44]	; (80088d8 <__libc_init_array+0x40>)
 80088aa:	4c0c      	ldr	r4, [pc, #48]	; (80088dc <__libc_init_array+0x44>)
 80088ac:	f000 f82e 	bl	800890c <_init>
 80088b0:	1b64      	subs	r4, r4, r5
 80088b2:	10a4      	asrs	r4, r4, #2
 80088b4:	2600      	movs	r6, #0
 80088b6:	42a6      	cmp	r6, r4
 80088b8:	d105      	bne.n	80088c6 <__libc_init_array+0x2e>
 80088ba:	bd70      	pop	{r4, r5, r6, pc}
 80088bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80088c0:	4798      	blx	r3
 80088c2:	3601      	adds	r6, #1
 80088c4:	e7ee      	b.n	80088a4 <__libc_init_array+0xc>
 80088c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ca:	4798      	blx	r3
 80088cc:	3601      	adds	r6, #1
 80088ce:	e7f2      	b.n	80088b6 <__libc_init_array+0x1e>
 80088d0:	08008984 	.word	0x08008984
 80088d4:	08008984 	.word	0x08008984
 80088d8:	08008984 	.word	0x08008984
 80088dc:	08008988 	.word	0x08008988

080088e0 <memcpy>:
 80088e0:	440a      	add	r2, r1
 80088e2:	4291      	cmp	r1, r2
 80088e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80088e8:	d100      	bne.n	80088ec <memcpy+0xc>
 80088ea:	4770      	bx	lr
 80088ec:	b510      	push	{r4, lr}
 80088ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088f6:	4291      	cmp	r1, r2
 80088f8:	d1f9      	bne.n	80088ee <memcpy+0xe>
 80088fa:	bd10      	pop	{r4, pc}

080088fc <memset>:
 80088fc:	4402      	add	r2, r0
 80088fe:	4603      	mov	r3, r0
 8008900:	4293      	cmp	r3, r2
 8008902:	d100      	bne.n	8008906 <memset+0xa>
 8008904:	4770      	bx	lr
 8008906:	f803 1b01 	strb.w	r1, [r3], #1
 800890a:	e7f9      	b.n	8008900 <memset+0x4>

0800890c <_init>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	bf00      	nop
 8008910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008912:	bc08      	pop	{r3}
 8008914:	469e      	mov	lr, r3
 8008916:	4770      	bx	lr

08008918 <_fini>:
 8008918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891a:	bf00      	nop
 800891c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891e:	bc08      	pop	{r3}
 8008920:	469e      	mov	lr, r3
 8008922:	4770      	bx	lr
